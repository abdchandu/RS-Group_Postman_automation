{
	"info": {
		"_postman_id": "d8efe3d0-5efe-43e3-8a79-0bff85ad069d",
		"name": "RS_Commerce_Regression",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43867066"
	},
	"item": [
		{
			"name": "PlaceOrder_B2C User",
			"item": [
				{
					"name": "Get Customer Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.response.json().data.generateCustomerToken.token);",
									"let customerToken = \"Bearer \" +pm.response.json().data.generateCustomerToken.token;",
									" ",
									"pm.environment.set(\"customerToken\", customerToken);",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Token must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.generateCustomerToken).to.exist;",
									"    pm.expect(responseData.data.generateCustomerToken.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"",
									"pm.test(\"The data object must be present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('data').that.is.an('object');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Store",
								"value": "{{store}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\n  generateCustomerToken(\n    email: \"testsavedcard1@mailinator.com\"\n    password: \"test@123456\"\n  ) {\n    token\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Customer Cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.response.json().data.customerCart.id);",
									"let cartId = pm.response.json().data.customerCart.id;",
									"pm.environment.set(\"cartId\", cartId);",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response contains the 'data' field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('data').that.is.an('object');",
									"});",
									"",
									"",
									"pm.test(\"Customer cart 'id' must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.customerCart).to.exist;",
									"    pm.expect(responseData.data.customerCart.id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  customerCart{\n    id\n  }\n}\n",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Cart Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields: cart, itemsV2, and items\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.addProductsToCart).to.exist;",
									"    pm.expect(responseData.data.addProductsToCart.cart).to.exist;",
									"    pm.expect(responseData.data.addProductsToCart.cart.itemsV2).to.exist;",
									"    pm.expect(responseData.data.addProductsToCart.cart.itemsV2.items).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Item uid is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.addProductsToCart.cart.itemsV2.items).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.data.addProductsToCart.cart.itemsV2.items.forEach(function(item) {",
									"        pm.expect(item.uid).to.be.a('string').that.is.not.empty;",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Quantity must be a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.addProductsToCart.cart.itemsV2.items).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.data.addProductsToCart.cart.itemsV2.items.forEach(function(item) {",
									"        pm.expect(item.quantity).to.be.a('number').that.is.at.least(0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Price value is a non-negative number and currency is a valid string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.addProductsToCart.cart.itemsV2.items).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.data.addProductsToCart.cart.itemsV2.items.forEach(item => {",
									"        pm.expect(item.prices.price_including_tax.value).to.be.a('number').that.is.at.least(0, \"Price value should be non-negative\");",
									"        pm.expect(item.prices.price_including_tax.currency).to.be.a('string').that.is.not.empty;",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation addProductsToCart($cartId: String!) {\n\taddProductsToCart(\n\t\tcartId: $cartId\n\t\tcartItems: [\n\t\t\t{\n\t\t\t\tquantity: 2\n\t\t\t\tsku: \"8722174\"\n\t\t\t}\n\t\t]\n\t) {\n\t\tcart {\n\t\t\titemsV2 {\n\t\t\t\titems {\n\t\t\t\t\tuid\n\t\t\t\t\tquantity\n\t\t\t\t\tprices{\n\t\t\t\t\t\tprice_including_tax{\n\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tuser_errors {\n\t\t\tcode\n\t\t\tmessage\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Cart Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has required fields in the cart object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.cart).to.exist;",
									"    pm.expect(responseData.data.cart).to.have.all.keys('email', 'total_quantity', 'prices', 'itemsV2');",
									"",
									"    pm.expect(responseData.data.cart.prices).to.exist;",
									"    pm.expect(responseData.data.cart.prices).to.have.all.keys('discounts', 'subtotal_including_tax', 'subtotal_excluding_tax', 'subtotal_with_discount_excluding_tax', 'grand_total');",
									"    ",
									"    pm.expect(responseData.data.cart.itemsV2).to.exist;",
									"    pm.expect(responseData.data.cart.itemsV2).to.have.property('items').that.is.an('array');",
									"});",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.cart).to.have.property('email').that.is.a('string').and.matches(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
									"});",
									"",
									"pm.test(\"Total quantity is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.cart.total_quantity).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"pm.test(\"Prices contain valid currency values and amounts\", function () {",
									"    const responseData = pm.response.json();",
									"    const items = responseData.data.cart.itemsV2.items;",
									"",
									"    // Ensure items array exists and is not empty",
									"    pm.expect(items, \"Items array is missing or not an array\").to.be.an('array');",
									"    pm.expect(items.length, \"Items array is empty\").to.be.at.least(1, \"At least one item is required\");",
									"",
									"    items.forEach((item, index) => {",
									"        // Log the full prices object for debugging",
									"        console.log(`Item ${index} prices:`, JSON.stringify(item.prices, null, 2));",
									"",
									"        // Check that price object exists and has currency and value",
									"        pm.expect(item.prices, `Item ${index}: Prices object is missing`).to.exist.and.to.be.an('object');",
									"        pm.expect(item.prices.price, `Item ${index}: Price object is missing`).to.exist.and.to.be.an('object');",
									"        pm.expect(item.prices.price.currency, `Item ${index}: Price currency is missing`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        ",
									"        // Validate price.value exists and is a valid number",
									"        pm.expect(item.prices.price.value, `Item ${index}: Price value is missing`).to.exist;",
									"        const priceValue = parseFloat(item.prices.price.value);",
									"        pm.expect(!isNaN(priceValue), `Item ${index}: Price value is not a valid number`).to.be.true;",
									"        pm.expect(priceValue).to.be.at.least(0);",
									"",
									"        // Checking price_including_tax",
									"        pm.expect(item.prices.price_including_tax, `Item ${index}: Price including tax object is missing`).to.exist.and.to.be.an('object');",
									"        // Check if currency exists before validating",
									"        if (item.prices.price_including_tax.hasOwnProperty('currency')) {",
									"            pm.expect(item.prices.price_including_tax.currency, `Item ${index}: Price including tax currency is invalid`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        } else {",
									"            console.log(`Item ${index}: Price including tax currency is optional and not provided`);",
									"        }",
									"        pm.expect(item.prices.price_including_tax.value, `Item ${index}: Price including tax value is missing`).to.exist;",
									"        // Log the value for debugging",
									"        console.log(`Item ${index}: price_including_tax:`, JSON.stringify(item.prices.price_including_tax, null, 2));",
									"        const priceIncludingTax = parseFloat(item.prices.price_including_tax.value);",
									"        pm.expect(!isNaN(priceIncludingTax), `Item ${index}: Price including tax is not a valid number`).to.be.true;",
									"        pm.expect(priceIncludingTax).to.be.at.least(0);",
									"",
									"        // Checking row_total_including_tax",
									"        pm.expect(item.prices.row_total_including_tax, `Item ${index}: Row total including tax object is missing`).to.exist.and.to.be.an('object');",
									"        pm.expect(item.prices.row_total_including_tax.currency, `Item ${index}: Row total including tax currency is missing`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(item.prices.row_total_including_tax.value, `Item ${index}: Row total including tax value is missing`).to.exist;",
									"        const rowTotalIncludingTax = parseFloat(item.prices.row_total_including_tax.value);",
									"        pm.expect(!isNaN(rowTotalIncludingTax), `Item ${index}: Row total including tax is not a valid number`).to.be.true;",
									"        pm.expect(rowTotalIncludingTax).to.be.at.least(0);",
									"",
									"        // Checking row_total",
									"        pm.expect(item.prices.row_total, `Item ${index}: Row total object is missing`).to.exist.and.to.be.an('object');",
									"        pm.expect(item.prices.row_total.currency, `Item ${index}: Row total currency is missing`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(item.prices.row_total.value, `Item ${index}: Row total value is missing`).to.exist;",
									"        const rowTotal = parseFloat(item.prices.row_total.value);",
									"        pm.expect(!isNaN(rowTotal), `Item ${index}: Row total is not a valid number`).to.be.true;",
									"        pm.expect(rowTotal).to.be.at.least(0);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query cart($cartId: String!) {\n\tcart(\n\t\tcart_id: $cartId #refresh_cart: true\n\t) {\n\t\temail\n\t\ttotal_quantity\n\t\tprices {\n\t\t\tdiscounts {\n\t\t\t\tlabel\n\t\t\t\tamount {\n\t\t\t\t\tvalue\n\t\t\t\t\tcurrency\n\t\t\t\t}\n\t\t\t}\n\t\t\tsubtotal_including_tax {\n\t\t\t\tvalue\n\t\t\t}\n\t\t\tsubtotal_excluding_tax {\n\t\t\t\tvalue\n\t\t\t}\n\t\t\tsubtotal_with_discount_excluding_tax {\n\t\t\t\tvalue\n\t\t\t}\n\t\t\tgrand_total {\n\t\t\t\tvalue\n\t\t\t}\n\t\t}\n\t\titemsV2 {\n\t\t\titems {\n\t\t\t\tcost_center\n\t\t\t\tsku_alias\n\n\t\t\t\tquantity\n\t\t\t\tuid\n\t\t\t\tid\n\t\t\t\tproduct {\n\t\t\t\t\tuid\n\t\t\t\t\tname\n\t\t\t\t\tsku\n\t\t\t\t\t#only_x_left_in_stock\n\t\t\t\t\tprice {\n\t\t\t\t\t\tregularPrice {\n\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tminimalPrice {\n\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t... on ConfigurableCartItem {\n\t\t\t\t\tid\n\t\t\t\t\tquantity\n\t\t\t\t\tuid\n\t\t\t\t\tconfigurable_options {\n\t\t\t\t\t\tconfigurable_product_option_uid\n\t\t\t\t\t\tconfigurable_product_option_value_uid\n\t\t\t\t\t\tid\n\t\t\t\t\t\toption_label\n\t\t\t\t\t\tvalue_id\n\t\t\t\t\t\tvalue_label\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprices {\n\t\t\t\t\tprice {\n\t\t\t\t\t\tcurrency\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tprice_including_tax {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\trow_total_including_tax {\n\t\t\t\t\t\tcurrency\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\ttotal_item_discount {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\trow_total {\n\t\t\t\t\t\tcurrency\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tdiscounts {\n\t\t\t\t\t\tlabel\n\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set shipping address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Validate the structure of the cart object in the response\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setShippingAddressesOnCart).to.exist;",
									"    pm.expect(responseData.data.setShippingAddressesOnCart.cart).to.exist.and.to.be.an('object');",
									"    ",
									"    const cart = responseData.data.setShippingAddressesOnCart.cart;",
									"    pm.expect(cart.prices).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.prices.subtotal_excluding_tax).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.prices.subtotal_with_discount_excluding_tax).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.prices.grand_total).to.exist.and.to.be.an('object');",
									"    ",
									"    pm.expect(cart.itemsV2).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.itemsV2.items).to.exist.and.to.be.an('array');",
									"    ",
									"    const items = cart.itemsV2.items;",
									"    items.forEach(item => {",
									"        pm.expect(item).to.be.an('object');",
									"        pm.expect(item.uid).to.exist.and.to.be.a('string');",
									"        pm.expect(item.prices).to.exist.and.to.be.an('object');",
									"        pm.expect(item.product).to.exist.and.to.be.an('object');",
									"        pm.expect(item.product.sku).to.exist.and.to.be.a('string');",
									"    });",
									"",
									"    pm.expect(cart.shipping_addresses).to.exist.and.to.be.an('array').that.is.not.empty;",
									"    const shippingAddresses = cart.shipping_addresses;",
									"    shippingAddresses.forEach(address => {",
									"        pm.expect(address).to.be.an('object');",
									"        pm.expect(address.uid).to.exist.and.to.be.a('string');",
									"        pm.expect(address.firstname).to.exist.and.to.be.a('string').that.is.not.empty;",
									"        pm.expect(address.lastname).to.exist.and.to.be.a('string').that.is.not.empty;",
									"        pm.expect(address.company).to.exist.and.to.be.a('string').that.is.not.empty;",
									"        pm.expect(address.street).to.exist.and.to.be.an('array').that.is.not.empty;",
									"        pm.expect(address.city).to.exist.and.to.be.a('string').that.is.not.empty;",
									"        pm.expect(address.region).to.exist.and.to.be.an('object');",
									"        pm.expect(address.postcode).to.exist.and.to.be.a('string').that.is.not.empty;",
									"        pm.expect(address.telephone).to.exist.and.to.be.a('string').that.is.not.empty;",
									"        pm.expect(address.country).to.exist.and.to.be.an('object');",
									"        pm.expect(address.country).to.have.all.keys('code', 'label');",
									"        pm.expect(address.country.code).to.be.a('string').that.is.not.empty;",
									"",
									"        // Optional: Check if pickup_location_code is either null or exists",
									"        pm.expect(address.pickup_location_code).to.satisfy(value => value === null || typeof value === 'string');",
									"",
									"        // Validate available_shipping_methods if present",
									"        pm.expect(address.available_shipping_methods).to.exist.and.to.be.an('array');",
									"        address.available_shipping_methods.forEach(method => {",
									"            pm.expect(method).to.be.an('object');",
									"            pm.expect(method.amount).to.exist.and.to.be.an('object');",
									"            pm.expect(method.available).to.exist.and.to.be.a('boolean');",
									"            pm.expect(method.carrier_code).to.exist.and.to.be.a('string');",
									"            pm.expect(method.carrier_title).to.exist.and.to.be.a('string');",
									"            pm.expect(method.method_code).to.exist.and.to.be.a('string');",
									"            pm.expect(method.method_title).to.exist.and.to.be.a('string');",
									"            pm.expect(method.price_excl_tax).to.exist.and.to.be.an('object');",
									"            pm.expect(method.price_incl_tax).to.exist.and.to.be.an('object');",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Prices contain the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.setShippingAddressesOnCart.cart.prices).to.exist;",
									"    pm.expect(responseData.data.setShippingAddressesOnCart.cart.prices).to.have.all.keys('subtotal_excluding_tax', 'subtotal_with_discount_excluding_tax', 'grand_total');",
									"});",
									"",
									"pm.test(\"Each item in itemsV2 array has a non-empty uid and valid product SKU\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.setShippingAddressesOnCart.cart.itemsV2.items).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.data.setShippingAddressesOnCart.cart.itemsV2.items.forEach(item => {",
									"        pm.expect(item.uid).to.exist.and.to.not.be.empty;",
									"        pm.expect(item.product.sku).to.exist.and.to.be.a('string').and.to.not.be.empty;",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setShippingAddressesOnCart($cartId: String!) {\n\tsetShippingAddressesOnCart(\n\t\tinput: {\n\t\t\tcart_id: $cartId\n\t\t\tshipping_addresses: {\n\t\t\t\taddress: {\n\t\t\t\t\tfirstname: \"Chandu\"\n\t\t\t\t\tlastname: \"Ch\"\n\t\t\t\t\tcompany: \"Adobe india Pvt. ltd.\"\n\t\t\t\t\tstreet: [\"8450 North Fwy\", \"\"]\n\t\t\t\t\tcity: \"Switzerland\"\n\t\t\t\t\tregion: \"ZH\"\n\t\t\t\t\tpostcode: \"8001\"\n\t\t\t\t\tcountry_code: \"CH\"\n\t\t\t\t\ttelephone: \"1234567890\"\n\t\t\t\t\tsave_in_address_book: false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t) {\n\t\tcart {\n\t\t\tprices {\n\t\t\t\tsubtotal_excluding_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tsubtotal_with_discount_excluding_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tgrand_total {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n\t\t\titemsV2 {\n\t\t\t\titems {\n\t\t\t\t\tuid\n\t\t\t\t\tprices {\n\t\t\t\t\t\tprice {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfixed_product_taxes {\n\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlabel\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprice_including_tax {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t\trow_total {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t\trow_total_including_tax {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttotal_item_discount {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tproduct {\n\t\t\t\t\t\tsku\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tshipping_addresses {\n\t\t\t\tuid\n\t\t\t\tfirstname\n\t\t\t\tlastname\n\t\t\t\tcompany\n\t\t\t\tstreet\n\t\t\t\tcity\n\t\t\t\tregion {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpostcode\n\t\t\t\ttelephone\n\t\t\t\tcountry {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpickup_location_code\n\t\t\t\tavailable_shipping_methods {\n\t\t\t\t\tamount {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tavailable\n\t\t\t\t\tcarrier_code\n\t\t\t\t\tcarrier_title\n\t\t\t\t\tmethod_code\n\t\t\t\t\tmethod_title\n\t\t\t\t\tprice_excl_tax {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tprice_incl_tax {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbilling_address {\n\t\t\t\tuid\n\t\t\t\tfirstname\n\t\t\t\tlastname\n\t\t\t\tcompany\n\t\t\t\tstreet\n\t\t\t\tcity\n\t\t\t\tregion {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpostcode\n\t\t\t\ttelephone\n\t\t\t\tcountry {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set billing address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has a valid Content-Type of application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"The cart object contains required properties\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data, \"Data object is missing\").to.exist;",
									"    pm.expect(responseData.data.setBillingAddressOnCart, \"setBillingAddressOnCart is missing\").to.exist;",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart, \"Cart object is missing\").to.exist;",
									"    ",
									"    const cart = responseData.data.setBillingAddressOnCart.cart;",
									"    pm.expect(cart).to.have.all.keys('itemsV2', 'prices', 'shipping_addresses', 'billing_address');",
									"});",
									"",
									"pm.test(\"Validate that grand_total, subtotal_excluding_tax, and subtotal_including_tax are non-negative numbers\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    ",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart.prices.grand_total.value).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart.prices.subtotal_excluding_tax.value).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart.prices.subtotal_including_tax.value).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"pm.test(\"Shipping addresses and billing address contain required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Validate response structure",
									"    pm.expect(responseData, \"Response data is missing\").to.be.an('object');",
									"    pm.expect(responseData.data, \"Data object is missing\").to.exist;",
									"    pm.expect(responseData.data.setBillingAddressOnCart, \"setBillingAddressOnCart is missing\").to.exist;",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart, \"Cart object is missing\").to.exist;",
									"",
									"    const cart = responseData.data.setBillingAddressOnCart.cart;",
									"    const shippingAddresses = cart.shipping_addresses;",
									"    const billingAddress = cart.billing_address;",
									"",
									"    // Log full response for debugging",
									"    console.log(\"Full cart response:\", JSON.stringify(cart, null, 2));",
									"",
									"    // Validate shipping addresses",
									"    pm.expect(shippingAddresses, \"Shipping addresses are missing or not an array\").to.be.an('array');",
									"    pm.expect(shippingAddresses.length, \"Shipping addresses array is empty\").to.be.at.least(1, \"At least one shipping address is required\");",
									"",
									"    shippingAddresses.forEach((address, index) => {",
									"        // Log the actual address for debugging",
									"        console.log(`Shipping address ${index}:`, JSON.stringify(address, null, 2));",
									"",
									"        // Define required keys",
									"        const requiredKeys = ['uid', 'firstname', 'lastname', 'street', 'city', 'region', 'postcode', 'telephone', 'country'];",
									"",
									"        // Check if address is an object and has required keys",
									"        pm.expect(address, `Shipping address ${index} is not an object`).to.be.an('object');",
									"        const missingKeys = requiredKeys.filter(key => !Object.keys(address).includes(key));",
									"        pm.expect(missingKeys, `Shipping address ${index} is missing required keys: ${missingKeys.join(', ')}`).to.be.empty;",
									"",
									"        // Validate field types and content",
									"        pm.expect(address.uid, `Shipping address ${index} uid is invalid`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(address.firstname, `Shipping address ${index} firstname is invalid`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(address.lastname, `Shipping address ${index} lastname is invalid`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(address.street, `Shipping address ${index} street is invalid`).to.be.an('array').that.is.not.empty;",
									"        pm.expect(address.city, `Shipping address ${index} city is invalid`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(address.region, `Shipping address ${index} region is invalid`).to.be.an('object').that.has.all.keys('code', 'label');",
									"        pm.expect(address.postcode, `Shipping address ${index} postcode is invalid`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(address.telephone, `Shipping address ${index} telephone is invalid`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(address.country, `Shipping address ${index} country is invalid`).to.be.an('object').that.has.all.keys('code', 'label');",
									"    });",
									"",
									"    // Validate billing address",
									"    pm.expect(billingAddress, \"Billing address is missing\").to.exist.and.to.be.an('object');",
									"    console.log(\"Billing address:\", JSON.stringify(billingAddress, null, 2));",
									"",
									"    // Check required keys for billing address",
									"    const requiredKeys = ['uid', 'firstname', 'lastname', 'street', 'city', 'region', 'postcode', 'telephone', 'country'];",
									"    const missingBillingKeys = requiredKeys.filter(key => !Object.keys(billingAddress).includes(key));",
									"    pm.expect(missingBillingKeys, `Billing address is missing required keys: ${missingBillingKeys.join(', ')}`).to.be.empty;",
									"",
									"    // Validate field types and content",
									"    pm.expect(billingAddress.uid, \"Billing address uid is invalid\").to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"    pm.expect(billingAddress.firstname, \"Billing address firstname is invalid\").to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"    pm.expect(billingAddress.lastname, \"Billing address lastname is invalid\").to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"    pm.expect(billingAddress.street, \"Billing address street is invalid\").to.be.an('array').that.is.not.empty;",
									"    pm.expect(billingAddress.city, \"Billing address city is invalid\").to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"    pm.expect(billingAddress.region, \"Billing address region is invalid\").to.be.an('object').that.has.all.keys('code', 'label');",
									"    pm.expect(billingAddress.postcode, \"Billing address postcode is invalid\").to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"    pm.expect(billingAddress.telephone, \"Billing address telephone is invalid\").to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"    pm.expect(billingAddress.country, \"Billing address country is invalid\").to.be.an('object').that.has.all.keys('code', 'label');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setBillingAddressOnCart($cartId: String!){\n\tsetBillingAddressOnCart(\n\t\tinput: {\n\t\t\tcart_id: $cartId\n\t\t\tbilling_address: \n\t\t\t\t{\n\t\t\t\t\tsame_as_shipping: true\n# \t\t\t\t\taddress: {\n# \t\t\t\t\t\tfirstname: \"Astik\"\n# \t\t\t\t\t\tlastname: \"Unagar\"\n# \t\t\t\t\t\tcompany: \"Adobe india Pvt. ltd.\"\n# \t\t\t\t\t\tstreet: [\"9th cross\", \"3rd main, 6th Stage, Brookfield\"]\n# \t\t\t\t\t\tcity: \"Austin\"\n# \t\t\t\t\t\tregion: \"TX\"\n# \t\t\t\t\t\tpostcode: \"75812\"\n# \t\t\t\t\t\tcountry_code: \"US\"\n# \t\t\t\t\t\ttelephone: \"1234567890\"\n# \t\t\t\t\t\tsave_in_address_book: false\n# \t\t\t\t\t}\n\t\t\t\t\t#use_for_shipping: true\n\t\t\t\t}\n\t\t}\n\t) {\n\t\tcart {\n\t\t\titemsV2{\n\t\t\t\titems{\n\t\t\t\t\tcost_center\n\t\t\t\t\tsku_alias\n\t\t\t\t}\n\t\t\t}\n\t\t\tprices {\n\t\t\t\tgrand_total {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tsubtotal_excluding_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tsubtotal_including_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n\t\t\tshipping_addresses {\n\t\t\t\tuid\n\t\t\t\tfirstname\n\t\t\t\tlastname\n\t\t\t\tcompany\n\t\t\t\tstreet\n\t\t\t\tcity\n\t\t\t\tregion {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpostcode\n\t\t\t\ttelephone\n\t\t\t\tcountry {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpickup_location_code\n\t\t\t}\n\t\t\tbilling_address {\n\t\t\t\tuid\n\t\t\t\tfirstname\n\t\t\t\tlastname\n\t\t\t\tcompany\n\t\t\t\tstreet\n\t\t\t\tcity\n\t\t\t\tregion {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpostcode\n\t\t\t\ttelephone\n\t\t\t\tcountry {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set shipping method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields: grand_total and shipping_addresses\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart).to.exist;",
									"",
									"    const cart = responseData.data.setShippingMethodsOnCart.cart;",
									"    pm.expect(cart).to.exist;",
									"    pm.expect(cart.prices).to.exist;",
									"    pm.expect(cart.prices.grand_total).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.shipping_addresses).to.exist.and.to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Grand total value is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.prices.grand_total.value).to.be.a('number').and.to.be.at.least(0, \"Grand total value should be non-negative\");",
									"});",
									"",
									"",
									"pm.test(\"Shipping addresses array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.shipping_addresses).to.exist.and.to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"Selected shipping method has valid carrier_code and method_code as non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.shipping_addresses).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.data.setShippingMethodsOnCart.cart.shipping_addresses.forEach(address => {",
									"        pm.expect(address.selected_shipping_method.carrier_code).to.exist.and.to.be.a('string').that.is.not.empty;",
									"        pm.expect(address.selected_shipping_method.method_code).to.exist.and.to.be.a('string').that.is.not.empty;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setShippingMethodsOnCart(\n\t$cartId: String!\n) {\n  setShippingMethodsOnCart(input: {\n    cart_id: $cartId\n    shipping_methods: [\n\t\t\t{\n\t\t\t\tcarrier_code: \"rsdelivery\"\n\t\t\t\tmethod_code: \"13\"\n\t\t\t}\n    ]\n  }) {\n    cart {\n\t\t\tprices{\n\t\t\t\tgrand_total{\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n      shipping_addresses {\n        selected_shipping_method {\n          carrier_code\n          method_code\n          carrier_title\n          method_title\n        }\n      }\n    }\n  }\n}",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set payment method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response contains the data field\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('data');",
									"});",
									"",
									"",
									"pm.test(\"The selected_payment_method property must be present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setPaymentMethodOnCart).to.exist;",
									"    pm.expect(responseData.data.setPaymentMethodOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setPaymentMethodOnCart.cart.selected_payment_method).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"The payment method code must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.setPaymentMethodOnCart.cart.selected_payment_method.code).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setPaymentMethodOnCart($cartId: String!)\n{\n\tsetPaymentMethodOnCart(\n\t\tinput: {\n\t\t\tcart_id: $cartId\n\t\t\tpayment_method: {\n\t\t\t\tcode: \"checkmo\"\n\t\t\t}\n\t\t}\n\t) {\n\t\tcart {\n\t\t\tselected_payment_method {\n\t\t\t\tcode\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "place order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Order ID is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.placeOrder.orderV2.id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Order ID should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.placeOrder.orderV2.email).to.exist;",
									"    pm.expect(responseData.data.placeOrder.orderV2.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
									"});",
									"",
									"",
									"pm.test(\"Items array is present and contains at least one product item\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.nested.property('data.placeOrder.orderV2.items').that.is.an('array').and.to.have.length.of.at.least(1, \"Items array should contain at least one product item\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation placeOrder(\n\t$cartId: String!\n) {\n  placeOrder(input: {cart_id: $cartId}) {\n    errors{\n        code\n        message\n    }\n    orderV2{\n\t\t\tid\n            number\n\t\t\temail\n\t\t\titems{\n\t\t\t\tproduct_name\n\t\t\t\tproduct{\n\t\t\t\t\tsku\n\t\t\t\t}\n\t\t\t\tstatus\n\t\t\t}\n\t\t}\n  }\n}",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PlaceOrder_B2B User",
			"item": [
				{
					"name": "Get Customer Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.response.json().data.generateCustomerToken.token);",
									"let customerToken = \"Bearer \" +pm.response.json().data.generateCustomerToken.token;",
									" ",
									"pm.environment.set(\"customerToken\", customerToken);",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Token must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.generateCustomerToken).to.exist;",
									"    pm.expect(responseData.data.generateCustomerToken.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"",
									"pm.test(\"The data object must be present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('data').that.is.an('object');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Store",
								"value": "{{store}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\n  generateCustomerToken(\n    email: \"chandu123@mailinator.com\"\n    password: \"test@123456\"\n  ) {\n    token\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Customer Cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.response.json().data.customerCart.id);",
									"let cartId = pm.response.json().data.customerCart.id;",
									"pm.environment.set(\"cartId\", cartId);",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response contains the 'data' field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('data').that.is.an('object');",
									"});",
									"",
									"",
									"pm.test(\"Customer cart 'id' must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.customerCart).to.exist;",
									"    pm.expect(responseData.data.customerCart.id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  customerCart{\n    id\n  }\n}\n",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Cart Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields: cart, itemsV2, and items\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.addProductsToCart).to.exist;",
									"    pm.expect(responseData.data.addProductsToCart.cart).to.exist;",
									"    pm.expect(responseData.data.addProductsToCart.cart.itemsV2).to.exist;",
									"    pm.expect(responseData.data.addProductsToCart.cart.itemsV2.items).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Item uid is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.addProductsToCart.cart.itemsV2.items).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.data.addProductsToCart.cart.itemsV2.items.forEach(function(item) {",
									"        pm.expect(item.uid).to.be.a('string').that.is.not.empty;",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Quantity must be a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.addProductsToCart.cart.itemsV2.items).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.data.addProductsToCart.cart.itemsV2.items.forEach(function(item) {",
									"        pm.expect(item.quantity).to.be.a('number').that.is.at.least(0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Price value is a non-negative number and currency is a valid string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.addProductsToCart.cart.itemsV2.items).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.data.addProductsToCart.cart.itemsV2.items.forEach(item => {",
									"        pm.expect(item.prices.price_including_tax.value).to.be.a('number').that.is.at.least(0, \"Price value should be non-negative\");",
									"        pm.expect(item.prices.price_including_tax.currency).to.be.a('string').that.is.not.empty;",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation addProductsToCart($cartId: String!) {\n\taddProductsToCart(\n\t\tcartId: $cartId\n\t\tcartItems: [\n\t\t\t{\n\t\t\t\tquantity: 2\n\t\t\t\tsku: \"414193\"\n\t\t\t}\n\t\t]\n\t) {\n\t\tcart {\n\t\t\titemsV2 {\n\t\t\t\titems {\n\t\t\t\t\tuid\n\t\t\t\t\tquantity\n\t\t\t\t\tprices{\n\t\t\t\t\t\tprice_including_tax{\n\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tuser_errors {\n\t\t\tcode\n\t\t\tmessage\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Cart Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has required fields in the cart object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.cart).to.exist;",
									"    pm.expect(responseData.data.cart).to.have.all.keys('email', 'total_quantity', 'prices', 'itemsV2');",
									"",
									"    pm.expect(responseData.data.cart.prices).to.exist;",
									"    pm.expect(responseData.data.cart.prices).to.have.all.keys('discounts', 'subtotal_including_tax', 'subtotal_excluding_tax', 'subtotal_with_discount_excluding_tax', 'grand_total');",
									"    ",
									"    pm.expect(responseData.data.cart.itemsV2).to.exist;",
									"    pm.expect(responseData.data.cart.itemsV2).to.have.property('items').that.is.an('array');",
									"});",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.cart).to.have.property('email').that.is.a('string').and.matches(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
									"});",
									"",
									"pm.test(\"Total quantity is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.cart.total_quantity).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"pm.test(\"Prices contain valid currency values and amounts\", function () {",
									"    const responseData = pm.response.json();",
									"    const items = responseData.data.cart.itemsV2.items;",
									"",
									"    // Ensure items array exists and is not empty",
									"    pm.expect(items, \"Items array is missing or not an array\").to.be.an('array');",
									"    pm.expect(items.length, \"Items array is empty\").to.be.at.least(1, \"At least one item is required\");",
									"",
									"    items.forEach((item, index) => {",
									"        // Log the full prices object for debugging",
									"        console.log(`Item ${index} prices:`, JSON.stringify(item.prices, null, 2));",
									"",
									"        // Check that price object exists and has currency and value",
									"        pm.expect(item.prices, `Item ${index}: Prices object is missing`).to.exist.and.to.be.an('object');",
									"        pm.expect(item.prices.price, `Item ${index}: Price object is missing`).to.exist.and.to.be.an('object');",
									"        pm.expect(item.prices.price.currency, `Item ${index}: Price currency is missing`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        ",
									"        // Validate price.value exists and is a valid number",
									"        pm.expect(item.prices.price.value, `Item ${index}: Price value is missing`).to.exist;",
									"        const priceValue = parseFloat(item.prices.price.value);",
									"        pm.expect(!isNaN(priceValue), `Item ${index}: Price value is not a valid number`).to.be.true;",
									"        pm.expect(priceValue).to.be.at.least(0);",
									"",
									"        // Checking price_including_tax",
									"        pm.expect(item.prices.price_including_tax, `Item ${index}: Price including tax object is missing`).to.exist.and.to.be.an('object');",
									"        // Check if currency exists before validating",
									"        if (item.prices.price_including_tax.hasOwnProperty('currency')) {",
									"            pm.expect(item.prices.price_including_tax.currency, `Item ${index}: Price including tax currency is invalid`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        } else {",
									"            console.log(`Item ${index}: Price including tax currency is optional and not provided`);",
									"        }",
									"        pm.expect(item.prices.price_including_tax.value, `Item ${index}: Price including tax value is missing`).to.exist;",
									"        // Log the value for debugging",
									"        console.log(`Item ${index}: price_including_tax:`, JSON.stringify(item.prices.price_including_tax, null, 2));",
									"        const priceIncludingTax = parseFloat(item.prices.price_including_tax.value);",
									"        pm.expect(!isNaN(priceIncludingTax), `Item ${index}: Price including tax is not a valid number`).to.be.true;",
									"        pm.expect(priceIncludingTax).to.be.at.least(0);",
									"",
									"        // Checking row_total_including_tax",
									"        pm.expect(item.prices.row_total_including_tax, `Item ${index}: Row total including tax object is missing`).to.exist.and.to.be.an('object');",
									"        pm.expect(item.prices.row_total_including_tax.currency, `Item ${index}: Row total including tax currency is missing`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(item.prices.row_total_including_tax.value, `Item ${index}: Row total including tax value is missing`).to.exist;",
									"        const rowTotalIncludingTax = parseFloat(item.prices.row_total_including_tax.value);",
									"        pm.expect(!isNaN(rowTotalIncludingTax), `Item ${index}: Row total including tax is not a valid number`).to.be.true;",
									"        pm.expect(rowTotalIncludingTax).to.be.at.least(0);",
									"",
									"        // Checking row_total",
									"        pm.expect(item.prices.row_total, `Item ${index}: Row total object is missing`).to.exist.and.to.be.an('object');",
									"        pm.expect(item.prices.row_total.currency, `Item ${index}: Row total currency is missing`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(item.prices.row_total.value, `Item ${index}: Row total value is missing`).to.exist;",
									"        const rowTotal = parseFloat(item.prices.row_total.value);",
									"        pm.expect(!isNaN(rowTotal), `Item ${index}: Row total is not a valid number`).to.be.true;",
									"        pm.expect(rowTotal).to.be.at.least(0);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query cart($cartId: String!) {\n\tcart(\n\t\tcart_id: $cartId #refresh_cart: true\n\t) {\n\t\temail\n\t\ttotal_quantity\n\t\tprices {\n\t\t\tdiscounts {\n\t\t\t\tlabel\n\t\t\t\tamount {\n\t\t\t\t\tvalue\n\t\t\t\t\tcurrency\n\t\t\t\t}\n\t\t\t}\n\t\t\tsubtotal_including_tax {\n\t\t\t\tvalue\n\t\t\t}\n\t\t\tsubtotal_excluding_tax {\n\t\t\t\tvalue\n\t\t\t}\n\t\t\tsubtotal_with_discount_excluding_tax {\n\t\t\t\tvalue\n\t\t\t}\n\t\t\tgrand_total {\n\t\t\t\tvalue\n\t\t\t}\n\t\t}\n\t\titemsV2 {\n\t\t\titems {\n\t\t\t\tcost_center\n\t\t\t\tsku_alias\n\n\t\t\t\tquantity\n\t\t\t\tuid\n\t\t\t\tid\n\t\t\t\tproduct {\n\t\t\t\t\tuid\n\t\t\t\t\tname\n\t\t\t\t\tsku\n\t\t\t\t\t#only_x_left_in_stock\n\t\t\t\t\tprice {\n\t\t\t\t\t\tregularPrice {\n\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tminimalPrice {\n\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t... on ConfigurableCartItem {\n\t\t\t\t\tid\n\t\t\t\t\tquantity\n\t\t\t\t\tuid\n\t\t\t\t\tconfigurable_options {\n\t\t\t\t\t\tconfigurable_product_option_uid\n\t\t\t\t\t\tconfigurable_product_option_value_uid\n\t\t\t\t\t\tid\n\t\t\t\t\t\toption_label\n\t\t\t\t\t\tvalue_id\n\t\t\t\t\t\tvalue_label\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprices {\n\t\t\t\t\tprice {\n\t\t\t\t\t\tcurrency\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tprice_including_tax {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\trow_total_including_tax {\n\t\t\t\t\t\tcurrency\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\ttotal_item_discount {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\trow_total {\n\t\t\t\t\t\tcurrency\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tdiscounts {\n\t\t\t\t\t\tlabel\n\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set shipping address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Validate the structure of the cart object in the response\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setShippingAddressesOnCart).to.exist;",
									"    pm.expect(responseData.data.setShippingAddressesOnCart.cart).to.exist.and.to.be.an('object');",
									"    ",
									"    const cart = responseData.data.setShippingAddressesOnCart.cart;",
									"    pm.expect(cart.prices).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.prices.subtotal_excluding_tax).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.prices.subtotal_with_discount_excluding_tax).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.prices.grand_total).to.exist.and.to.be.an('object');",
									"    ",
									"    pm.expect(cart.itemsV2).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.itemsV2.items).to.exist.and.to.be.an('array');",
									"    ",
									"    const items = cart.itemsV2.items;",
									"    items.forEach(item => {",
									"        pm.expect(item).to.be.an('object');",
									"        pm.expect(item.uid).to.exist.and.to.be.a('string');",
									"        pm.expect(item.prices).to.exist.and.to.be.an('object');",
									"        pm.expect(item.product).to.exist.and.to.be.an('object');",
									"        pm.expect(item.product.sku).to.exist.and.to.be.a('string');",
									"    });",
									"",
									"    pm.expect(cart.shipping_addresses).to.exist.and.to.be.an('array').that.is.not.empty;",
									"    const shippingAddresses = cart.shipping_addresses;",
									"    shippingAddresses.forEach(address => {",
									"        pm.expect(address).to.be.an('object');",
									"        pm.expect(address.uid).to.exist.and.to.be.a('string');",
									"        pm.expect(address.firstname).to.exist.and.to.be.a('string').that.is.not.empty;",
									"        pm.expect(address.lastname).to.exist.and.to.be.a('string').that.is.not.empty;",
									"        pm.expect(address.company).to.exist.and.to.be.a('string').that.is.not.empty;",
									"        pm.expect(address.street).to.exist.and.to.be.an('array').that.is.not.empty;",
									"        pm.expect(address.city).to.exist.and.to.be.a('string').that.is.not.empty;",
									"        pm.expect(address.region).to.exist.and.to.be.an('object');",
									"        pm.expect(address.postcode).to.exist.and.to.be.a('string').that.is.not.empty;",
									"        pm.expect(address.telephone).to.exist.and.to.be.a('string').that.is.not.empty;",
									"        pm.expect(address.country).to.exist.and.to.be.an('object');",
									"        pm.expect(address.country).to.have.all.keys('code', 'label');",
									"        pm.expect(address.country.code).to.be.a('string').that.is.not.empty;",
									"",
									"        // Optional: Check if pickup_location_code is either null or exists",
									"        pm.expect(address.pickup_location_code).to.satisfy(value => value === null || typeof value === 'string');",
									"",
									"        // Validate available_shipping_methods if present",
									"        pm.expect(address.available_shipping_methods).to.exist.and.to.be.an('array');",
									"        address.available_shipping_methods.forEach(method => {",
									"            pm.expect(method).to.be.an('object');",
									"            pm.expect(method.amount).to.exist.and.to.be.an('object');",
									"            pm.expect(method.available).to.exist.and.to.be.a('boolean');",
									"            pm.expect(method.carrier_code).to.exist.and.to.be.a('string');",
									"            pm.expect(method.carrier_title).to.exist.and.to.be.a('string');",
									"            pm.expect(method.method_code).to.exist.and.to.be.a('string');",
									"            pm.expect(method.method_title).to.exist.and.to.be.a('string');",
									"            pm.expect(method.price_excl_tax).to.exist.and.to.be.an('object');",
									"            pm.expect(method.price_incl_tax).to.exist.and.to.be.an('object');",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Prices contain the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.setShippingAddressesOnCart.cart.prices).to.exist;",
									"    pm.expect(responseData.data.setShippingAddressesOnCart.cart.prices).to.have.all.keys('subtotal_excluding_tax', 'subtotal_with_discount_excluding_tax', 'grand_total');",
									"});",
									"",
									"pm.test(\"Each item in itemsV2 array has a non-empty uid and valid product SKU\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.setShippingAddressesOnCart.cart.itemsV2.items).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.data.setShippingAddressesOnCart.cart.itemsV2.items.forEach(item => {",
									"        pm.expect(item.uid).to.exist.and.to.not.be.empty;",
									"        pm.expect(item.product.sku).to.exist.and.to.be.a('string').and.to.not.be.empty;",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setShippingAddressesOnCart($cartId: String!) {\n\tsetShippingAddressesOnCart(\n\t\tinput: {\n\t\t\tcart_id: $cartId\n\t\t\tshipping_addresses: {\n\t\t\t\taddress: {\n\t\t\t\t\tfirstname: \"Chandu\"\n\t\t\t\t\tlastname: \"Ch\"\n\t\t\t\t\tcompany: \"Adobe india Pvt. ltd.\"\n\t\t\t\t\tstreet: [\"8450 North Fwy\", \"\"]\n\t\t\t\t\tcity: \"Switzerland\"\n\t\t\t\t\tregion: \"ZH\"\n\t\t\t\t\tpostcode: \"8001\"\n\t\t\t\t\tcountry_code: \"CH\"\n\t\t\t\t\ttelephone: \"1234567890\"\n\t\t\t\t\tsave_in_address_book: false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t) {\n\t\tcart {\n\t\t\tprices {\n\t\t\t\tsubtotal_excluding_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tsubtotal_with_discount_excluding_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tgrand_total {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n\t\t\titemsV2 {\n\t\t\t\titems {\n\t\t\t\t\tuid\n\t\t\t\t\tprices {\n\t\t\t\t\t\tprice {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfixed_product_taxes {\n\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlabel\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprice_including_tax {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t\trow_total {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t\trow_total_including_tax {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttotal_item_discount {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tproduct {\n\t\t\t\t\t\tsku\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tshipping_addresses {\n\t\t\t\tuid\n\t\t\t\tfirstname\n\t\t\t\tlastname\n\t\t\t\tcompany\n\t\t\t\tstreet\n\t\t\t\tcity\n\t\t\t\tregion {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpostcode\n\t\t\t\ttelephone\n\t\t\t\tcountry {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpickup_location_code\n\t\t\t\tavailable_shipping_methods {\n\t\t\t\t\tamount {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tavailable\n\t\t\t\t\tcarrier_code\n\t\t\t\t\tcarrier_title\n\t\t\t\t\tmethod_code\n\t\t\t\t\tmethod_title\n\t\t\t\t\tprice_excl_tax {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tprice_incl_tax {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbilling_address {\n\t\t\t\tuid\n\t\t\t\tfirstname\n\t\t\t\tlastname\n\t\t\t\tcompany\n\t\t\t\tstreet\n\t\t\t\tcity\n\t\t\t\tregion {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpostcode\n\t\t\t\ttelephone\n\t\t\t\tcountry {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set billing address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has a valid Content-Type of application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"The cart object contains required properties\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data, \"Data object is missing\").to.exist;",
									"    pm.expect(responseData.data.setBillingAddressOnCart, \"setBillingAddressOnCart is missing\").to.exist;",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart, \"Cart object is missing\").to.exist;",
									"    ",
									"    const cart = responseData.data.setBillingAddressOnCart.cart;",
									"    pm.expect(cart).to.have.all.keys('itemsV2', 'prices', 'shipping_addresses', 'billing_address');",
									"});",
									"",
									"pm.test(\"Validate that grand_total, subtotal_excluding_tax, and subtotal_including_tax are non-negative numbers\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    ",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart.prices.grand_total.value).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart.prices.subtotal_excluding_tax.value).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart.prices.subtotal_including_tax.value).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"pm.test(\"Shipping addresses and billing address contain required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Validate response structure",
									"    pm.expect(responseData, \"Response data is missing\").to.be.an('object');",
									"    pm.expect(responseData.data, \"Data object is missing\").to.exist;",
									"    pm.expect(responseData.data.setBillingAddressOnCart, \"setBillingAddressOnCart is missing\").to.exist;",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart, \"Cart object is missing\").to.exist;",
									"",
									"    const cart = responseData.data.setBillingAddressOnCart.cart;",
									"    const shippingAddresses = cart.shipping_addresses;",
									"    const billingAddress = cart.billing_address;",
									"",
									"    // Log full response for debugging",
									"    console.log(\"Full cart response:\", JSON.stringify(cart, null, 2));",
									"",
									"    // Validate shipping addresses",
									"    pm.expect(shippingAddresses, \"Shipping addresses are missing or not an array\").to.be.an('array');",
									"    pm.expect(shippingAddresses.length, \"Shipping addresses array is empty\").to.be.at.least(1, \"At least one shipping address is required\");",
									"",
									"    shippingAddresses.forEach((address, index) => {",
									"        // Log the actual address for debugging",
									"        console.log(`Shipping address ${index}:`, JSON.stringify(address, null, 2));",
									"",
									"        // Define required keys",
									"        const requiredKeys = ['uid', 'firstname', 'lastname', 'street', 'city', 'region', 'postcode', 'telephone', 'country'];",
									"",
									"        // Check if address is an object and has required keys",
									"        pm.expect(address, `Shipping address ${index} is not an object`).to.be.an('object');",
									"        const missingKeys = requiredKeys.filter(key => !Object.keys(address).includes(key));",
									"        pm.expect(missingKeys, `Shipping address ${index} is missing required keys: ${missingKeys.join(', ')}`).to.be.empty;",
									"",
									"        // Validate field types and content",
									"        pm.expect(address.uid, `Shipping address ${index} uid is invalid`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(address.firstname, `Shipping address ${index} firstname is invalid`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(address.lastname, `Shipping address ${index} lastname is invalid`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(address.street, `Shipping address ${index} street is invalid`).to.be.an('array').that.is.not.empty;",
									"        pm.expect(address.city, `Shipping address ${index} city is invalid`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(address.region, `Shipping address ${index} region is invalid`).to.be.an('object').that.has.all.keys('code', 'label');",
									"        pm.expect(address.postcode, `Shipping address ${index} postcode is invalid`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(address.telephone, `Shipping address ${index} telephone is invalid`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(address.country, `Shipping address ${index} country is invalid`).to.be.an('object').that.has.all.keys('code', 'label');",
									"    });",
									"",
									"    // Validate billing address",
									"    pm.expect(billingAddress, \"Billing address is missing\").to.exist.and.to.be.an('object');",
									"    console.log(\"Billing address:\", JSON.stringify(billingAddress, null, 2));",
									"",
									"    // Check required keys for billing address",
									"    const requiredKeys = ['uid', 'firstname', 'lastname', 'street', 'city', 'region', 'postcode', 'telephone', 'country'];",
									"    const missingBillingKeys = requiredKeys.filter(key => !Object.keys(billingAddress).includes(key));",
									"    pm.expect(missingBillingKeys, `Billing address is missing required keys: ${missingBillingKeys.join(', ')}`).to.be.empty;",
									"",
									"    // Validate field types and content",
									"    pm.expect(billingAddress.uid, \"Billing address uid is invalid\").to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"    pm.expect(billingAddress.firstname, \"Billing address firstname is invalid\").to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"    pm.expect(billingAddress.lastname, \"Billing address lastname is invalid\").to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"    pm.expect(billingAddress.street, \"Billing address street is invalid\").to.be.an('array').that.is.not.empty;",
									"    pm.expect(billingAddress.city, \"Billing address city is invalid\").to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"    pm.expect(billingAddress.region, \"Billing address region is invalid\").to.be.an('object').that.has.all.keys('code', 'label');",
									"    pm.expect(billingAddress.postcode, \"Billing address postcode is invalid\").to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"    pm.expect(billingAddress.telephone, \"Billing address telephone is invalid\").to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"    pm.expect(billingAddress.country, \"Billing address country is invalid\").to.be.an('object').that.has.all.keys('code', 'label');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setBillingAddressOnCart($cartId: String!){\n\tsetBillingAddressOnCart(\n\t\tinput: {\n\t\t\tcart_id: $cartId\n\t\t\tbilling_address: \n\t\t\t\t{\n\t\t\t\t\tsame_as_shipping: true\n# \t\t\t\t\taddress: {\n# \t\t\t\t\t\tfirstname: \"Astik\"\n# \t\t\t\t\t\tlastname: \"Unagar\"\n# \t\t\t\t\t\tcompany: \"Adobe india Pvt. ltd.\"\n# \t\t\t\t\t\tstreet: [\"9th cross\", \"3rd main, 6th Stage, Brookfield\"]\n# \t\t\t\t\t\tcity: \"Austin\"\n# \t\t\t\t\t\tregion: \"TX\"\n# \t\t\t\t\t\tpostcode: \"75812\"\n# \t\t\t\t\t\tcountry_code: \"US\"\n# \t\t\t\t\t\ttelephone: \"1234567890\"\n# \t\t\t\t\t\tsave_in_address_book: false\n# \t\t\t\t\t}\n\t\t\t\t\t#use_for_shipping: true\n\t\t\t\t}\n\t\t}\n\t) {\n\t\tcart {\n\t\t\titemsV2{\n\t\t\t\titems{\n\t\t\t\t\tcost_center\n\t\t\t\t\tsku_alias\n\t\t\t\t}\n\t\t\t}\n\t\t\tprices {\n\t\t\t\tgrand_total {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tsubtotal_excluding_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tsubtotal_including_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n\t\t\tshipping_addresses {\n\t\t\t\tuid\n\t\t\t\tfirstname\n\t\t\t\tlastname\n\t\t\t\tcompany\n\t\t\t\tstreet\n\t\t\t\tcity\n\t\t\t\tregion {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpostcode\n\t\t\t\ttelephone\n\t\t\t\tcountry {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpickup_location_code\n\t\t\t}\n\t\t\tbilling_address {\n\t\t\t\tuid\n\t\t\t\tfirstname\n\t\t\t\tlastname\n\t\t\t\tcompany\n\t\t\t\tstreet\n\t\t\t\tcity\n\t\t\t\tregion {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpostcode\n\t\t\t\ttelephone\n\t\t\t\tcountry {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set shipping method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields: grand_total and shipping_addresses\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart).to.exist;",
									"",
									"    const cart = responseData.data.setShippingMethodsOnCart.cart;",
									"    pm.expect(cart).to.exist;",
									"    pm.expect(cart.prices).to.exist;",
									"    pm.expect(cart.prices.grand_total).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.shipping_addresses).to.exist.and.to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Grand total value is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.prices.grand_total.value).to.be.a('number').and.to.be.at.least(0, \"Grand total value should be non-negative\");",
									"});",
									"",
									"",
									"pm.test(\"Shipping addresses array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.shipping_addresses).to.exist.and.to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"Selected shipping method has valid carrier_code and method_code as non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.shipping_addresses).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.data.setShippingMethodsOnCart.cart.shipping_addresses.forEach(address => {",
									"        pm.expect(address.selected_shipping_method.carrier_code).to.exist.and.to.be.a('string').that.is.not.empty;",
									"        pm.expect(address.selected_shipping_method.method_code).to.exist.and.to.be.a('string').that.is.not.empty;",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setShippingMethodsOnCart(\n\t$cartId: String!\n) {\n  setShippingMethodsOnCart(input: {\n    cart_id: $cartId\n    shipping_methods: [\n\t\t\t{\n\t\t\t\tcarrier_code: \"rsdelivery\"\n\t\t\t\tmethod_code: \"13\"\n\t\t\t}\n    ]\n  }) {\n    cart {\n\t\t\tprices{\n\t\t\t\tgrand_total{\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n      shipping_addresses {\n        selected_shipping_method {\n          carrier_code\n          method_code\n          carrier_title\n          method_title\n        }\n      }\n    }\n  }\n}",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set payment method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response contains the data field\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('data');",
									"});",
									"",
									"",
									"pm.test(\"The selected_payment_method property must be present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setPaymentMethodOnCart).to.exist;",
									"    pm.expect(responseData.data.setPaymentMethodOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setPaymentMethodOnCart.cart.selected_payment_method).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"The payment method code must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.setPaymentMethodOnCart.cart.selected_payment_method.code).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setPaymentMethodOnCart($cartId: String!)\n{\n\tsetPaymentMethodOnCart(\n\t\tinput: {\n\t\t\tcart_id: $cartId\n\t\t\tpayment_method: {\n\t\t\t\tcode: \"checkmo\"\n\t\t\t}\n\t\t}\n\t) {\n\t\tcart {\n\t\t\tselected_payment_method {\n\t\t\t\tcode\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "place order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Order ID is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.placeOrder.orderV2.id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Order ID should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.placeOrder.orderV2.email).to.exist;",
									"    pm.expect(responseData.data.placeOrder.orderV2.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
									"});",
									"",
									"",
									"pm.test(\"Items array is present and contains at least one product item\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.nested.property('data.placeOrder.orderV2.items').that.is.an('array').and.to.have.length.of.at.least(1, \"Items array should contain at least one product item\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation placeOrder(\n\t$cartId: String!\n) {\n  placeOrder(input: {cart_id: $cartId}) {\n    errors{\n        code\n        message\n    }\n    orderV2{\n\t\t\tid\n            number\n\t\t\temail\n\t\t\titems{\n\t\t\t\tproduct_name\n\t\t\t\tproduct{\n\t\t\t\t\tsku\n\t\t\t\t}\n\t\t\t\tstatus\n\t\t\t}\n\t\t}\n  }\n}",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PlaceOrder_Guest User",
			"item": [
				{
					"name": "create guest cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json(); ",
									"pm.environment.set(\"cartId\", responseJson.data.createGuestCart.cart.id);",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.createGuestCart).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Cart ID must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.createGuestCart).to.exist;",
									"    pm.expect(responseData.data.createGuestCart.cart).to.exist;",
									"    pm.expect(responseData.data.createGuestCart.cart.id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Cart ID should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createGuestCart($input: CreateGuestCartInput) {\n  createGuestCart(input: $input) {\n    cart {\n      id\n    }\n  }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set guest email on cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the structure of the 'setGuestEmailOnCart' object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.data.setGuestEmailOnCart).to.exist.and.to.be.an('object');",
									"    ",
									"    const cart = responseData.data.setGuestEmailOnCart.cart;",
									"    pm.expect(cart).to.exist.and.to.be.an('object');",
									"    ",
									"    pm.expect(cart.email).to.exist.and.to.be.a('string');",
									"    pm.expect(cart.id).to.exist.and.to.be.a('string');",
									"    pm.expect(cart.is_virtual).to.exist.and.to.be.a('boolean');",
									"    pm.expect(cart.total_quantity).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    ",
									"    const email = responseData.data.setGuestEmailOnCart.cart.email;",
									"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
									"    ",
									"    pm.expect(email).to.match(emailRegex, \"Email format is invalid\");",
									"});",
									"",
									"",
									"pm.test(\"Cart ID must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setGuestEmailOnCart).to.exist;",
									"    pm.expect(responseData.data.setGuestEmailOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setGuestEmailOnCart.cart.id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Cart ID should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Total quantity is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setGuestEmailOnCart).to.exist;",
									"    pm.expect(responseData.data.setGuestEmailOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setGuestEmailOnCart.cart.total_quantity).to.be.a('number').and.to.be.at.least(0, \"Total quantity should be a non-negative integer\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setGuestEmailOnCart ($cartId: String!){\nsetGuestEmailOnCart(\n        input: { cart_id: $cartId, email: \"cchatla@adobe.com\" }\n    ) {\n        cart {\n            email\n           \n            id\n            is_virtual\n            \n            total_quantity\n        }\n    }\n}",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Cart Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Response contains required fields in the addProductsToCart object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.addProductsToCart).to.exist;",
									"    pm.expect(responseData.data.addProductsToCart.cart).to.exist;",
									"    pm.expect(responseData.data.addProductsToCart.cart.itemsV2).to.exist;",
									"    pm.expect(responseData.data.addProductsToCart.cart.itemsV2.items).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.data.addProductsToCart.cart.itemsV2.items.forEach(item => {",
									"        pm.expect(item).to.have.property('uid').that.is.a('string');",
									"        pm.expect(item).to.have.property('quantity').that.is.a('number');",
									"        pm.expect(item).to.have.property('prices').that.is.an('object');",
									"        pm.expect(item.prices).to.have.property('price_including_tax').that.is.an('object');",
									"        pm.expect(item.prices.price_including_tax).to.have.property('currency').that.is.a('string');",
									"        pm.expect(item.prices.price_including_tax).to.have.property('value').that.is.a('number');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"User errors should be an empty array\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.addProductsToCart.user_errors).to.be.an('array').that.is.empty;",
									"});",
									"",
									"",
									"pm.test(\"The 'uid' must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.addProductsToCart.cart.itemsV2.items).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.data.addProductsToCart.cart.itemsV2.items.forEach(item => {",
									"        pm.expect(item.uid).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"UID should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Quantity is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.addProductsToCart.cart.itemsV2.items).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.data.addProductsToCart.cart.itemsV2.items.forEach(item => {",
									"        pm.expect(item.quantity).to.be.a('number').and.to.be.at.least(0);",
									"        pm.expect(Number.isInteger(item.quantity)).to.be.true; // Checking if the quantity is an integer",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation addProductsToCart($cartId: String!) {\n\taddProductsToCart(\n\t\tcartId: $cartId\n\t\tcartItems: [\n\t\t\t{\n\t\t\t\tquantity: 8000\n\t\t\t\tsku: \"8029043\"\n\t\t\t}\n\t\t]\n\t) {\n\t\tcart {\n\t\t\titemsV2 {\n\t\t\t\titems {\n\t\t\t\t\tuid\n\t\t\t\t\tquantity\n\t\t\t\t\tprices{\n\t\t\t\t\t\tprice_including_tax{\n\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tuser_errors {\n\t\t\tcode\n\t\t\tmessage\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Cart Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains required fields: email, total_quantity, and prices\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.cart).to.exist;",
									"",
									"    // Check if the cart has the required properties, and use to.have.property for each",
									"    pm.expect(responseData.data.cart).to.have.property('email');",
									"    pm.expect(responseData.data.cart).to.have.property('total_quantity');",
									"    pm.expect(responseData.data.cart).to.have.property('prices');",
									"});",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.cart).to.have.property('email');",
									"    pm.expect(responseData.data.cart.email).to.match(/^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/, \"Email format is invalid\");",
									"});",
									"",
									"pm.test(\"Total quantity is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.cart.total_quantity).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"pm.test(\"Prices object contains valid currency and value formats\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.cart.prices).to.exist.and.to.be.an('object');",
									"    ",
									"    const prices = responseData.data.cart.prices;",
									"",
									"    // Check if the discount property exists and if it is null",
									"    if (prices.hasOwnProperty('discount')) {",
									"        pm.expect(prices.discount).to.be.null; // Assuming discounts can be null",
									"    }",
									"",
									"    // Check subtotal_including_tax",
									"    pm.expect(prices.subtotal_including_tax).to.exist.and.to.be.an('object');",
									"    pm.expect(prices.subtotal_including_tax.value).to.be.a('number');",
									"    pm.expect(prices.subtotal_including_tax.value).to.be.at.least(0);",
									"",
									"    // Check subtotal_excluding_tax",
									"    pm.expect(prices.subtotal_excluding_tax).to.exist.and.to.be.an('object');",
									"    pm.expect(prices.subtotal_excluding_tax.value).to.be.a('number');",
									"    pm.expect(prices.subtotal_excluding_tax.value).to.be.at.least(0);",
									"",
									"    // Check subtotal_with_discount_excluding_tax",
									"    pm.expect(prices.subtotal_with_discount_excluding_tax).to.exist.and.to.be.an('object');",
									"    pm.expect(prices.subtotal_with_discount_excluding_tax.value).to.be.a('number');",
									"    pm.expect(prices.subtotal_with_discount_excluding_tax.value).to.be.at.least(0);",
									"",
									"    // Check grand_total",
									"    pm.expect(prices.grand_total).to.exist.and.to.be.an('object');",
									"    pm.expect(prices.grand_total.value).to.be.a('number');",
									"    pm.expect(prices.grand_total.value).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query cart($cartId: String!) {\n\tcart(\n\t\tcart_id: $cartId #refresh_cart: true\n\t) {\n\t\temail\n\t\ttotal_quantity\n\t\tprices {\n\t\t\tdiscounts {\n\t\t\t\tlabel\n\t\t\t\tamount {\n\t\t\t\t\tvalue\n\t\t\t\t\tcurrency\n\t\t\t\t}\n\t\t\t}\n\t\t\tsubtotal_including_tax {\n\t\t\t\tvalue\n\t\t\t}\n\t\t\tsubtotal_excluding_tax {\n\t\t\t\tvalue\n\t\t\t}\n\t\t\tsubtotal_with_discount_excluding_tax {\n\t\t\t\tvalue\n\t\t\t}\n\t\t\tgrand_total {\n\t\t\t\tvalue\n\t\t\t}\n\t\t}\n\t\titemsV2 {\n\t\t\titems {\n\t\t\t\tcost_center\n\t\t\t\tsku_alias\n\n\t\t\t\tquantity\n\t\t\t\tuid\n\t\t\t\tid\n\t\t\t\tproduct {\n\t\t\t\t\tuid\n\t\t\t\t\tname\n\t\t\t\t\tsku\n\t\t\t\t\t#only_x_left_in_stock\n\t\t\t\t\tprice {\n\t\t\t\t\t\tregularPrice {\n\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tminimalPrice {\n\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t... on ConfigurableCartItem {\n\t\t\t\t\tid\n\t\t\t\t\tquantity\n\t\t\t\t\tuid\n\t\t\t\t\tconfigurable_options {\n\t\t\t\t\t\tconfigurable_product_option_uid\n\t\t\t\t\t\tconfigurable_product_option_value_uid\n\t\t\t\t\t\tid\n\t\t\t\t\t\toption_label\n\t\t\t\t\t\tvalue_id\n\t\t\t\t\t\tvalue_label\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprices {\n\t\t\t\t\tprice {\n\t\t\t\t\t\tcurrency\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tprice_including_tax {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\trow_total_including_tax {\n\t\t\t\t\t\tcurrency\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\ttotal_item_discount {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\trow_total {\n\t\t\t\t\t\tcurrency\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tdiscounts {\n\t\t\t\t\t\tlabel\n\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set shipping address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Validate the structure of the cart object in the response\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.data.setShippingAddressesOnCart).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.data.setShippingAddressesOnCart.cart).to.exist.and.to.be.an('object');",
									"",
									"    const cart = responseData.data.setShippingAddressesOnCart.cart;",
									"",
									"    pm.expect(cart.prices).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.prices.subtotal_excluding_tax).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.prices.subtotal_with_discount_excluding_tax).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.prices.grand_total).to.exist.and.to.be.an('object');",
									"",
									"    pm.expect(cart.itemsV2).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.itemsV2.items).to.exist.and.to.be.an('array');",
									"",
									"    // Ensure shipping_addresses exists and is an array",
									"    pm.expect(cart.shipping_addresses).to.exist.and.to.be.an('array').that.is.not.null;",
									"",
									"    if (cart.shipping_addresses && cart.shipping_addresses.length > 0) {",
									"        // Loop through each address and validate fields",
									"        cart.shipping_addresses.forEach(address => {",
									"            pm.expect(address).to.be.an('object');",
									"            pm.expect(address.uid).to.exist.and.to.be.a('string');",
									"            pm.expect(address.firstname).to.exist.and.to.be.a('string');",
									"            pm.expect(address.lastname).to.exist.and.to.be.a('string');",
									"            pm.expect(address.company).to.exist.and.to.be.a('string');",
									"            pm.expect(address.street).to.exist.and.to.be.an('array');",
									"            pm.expect(address.city).to.exist.and.to.be.a('string');",
									"            pm.expect(address.region).to.exist.and.to.be.an('object');",
									"            pm.expect(address.postcode).to.exist.and.to.be.a('string');",
									"            pm.expect(address.telephone).to.exist.and.to.be.a('string');",
									"            pm.expect(address.country).to.exist.and.to.be.an('object');",
									"            pm.expect(address.available_shipping_methods).to.exist.and.to.be.an('array');",
									"        });",
									"    } else {",
									"        pm.expect.fail(\"shipping_addresses is empty or missing\");",
									"    }",
									"});",
									"",
									"pm.test(\"Subtotal values must be non-negative numbers\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.setShippingAddressesOnCart.cart.prices.subtotal_excluding_tax.value).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(responseData.data.setShippingAddressesOnCart.cart.prices.subtotal_with_discount_excluding_tax.value).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(responseData.data.setShippingAddressesOnCart.cart.prices.grand_total.value).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"pm.test(\"The itemsV2 array must contain at least one item and validate its structure\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setShippingAddressesOnCart).to.exist;",
									"    pm.expect(responseData.data.setShippingAddressesOnCart.cart.itemsV2).to.exist;",
									"    pm.expect(responseData.data.setShippingAddressesOnCart.cart.itemsV2.items).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.data.setShippingAddressesOnCart.cart.itemsV2.items.forEach(item => {",
									"        pm.expect(item).to.have.property('uid').that.is.a('string');",
									"        pm.expect(item).to.have.property('prices').that.is.an('object');",
									"        pm.expect(item.prices).to.have.property('price').that.is.an('object');",
									"        pm.expect(item.prices).to.have.property('fixed_product_taxes').that.is.an('array');",
									"        pm.expect(item.prices).to.have.property('row_total').that.is.an('object');",
									"        pm.expect(item).to.have.property('product').that.is.an('object');",
									"        pm.expect(item.product).to.have.property('sku').that.is.a('string');",
									"    });",
									"});",
									"",
									"pm.test(\"Shipping addresses contain valid address fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    const shippingAddresses = responseData.data.setShippingAddressesOnCart.cart.shipping_addresses;",
									"",
									"    // Ensure shipping_addresses exists and is an array",
									"    pm.expect(shippingAddresses).to.be.an('array').that.is.not.empty;",
									"",
									"    // Loop through each address and validate required fields",
									"    shippingAddresses.forEach(function(address) {",
									"        pm.expect(address).to.have.property('firstname').that.is.a('string').and.is.not.empty;",
									"        pm.expect(address).to.have.property('lastname').that.is.a('string').and.is.not.empty;",
									"        pm.expect(address).to.have.property('city').that.is.a('string').and.is.not.empty;",
									"        pm.expect(address).to.have.property('region').that.is.an('object');",
									"        pm.expect(address).to.have.property('postcode').that.is.a('string').and.is.not.empty;",
									"        pm.expect(address).to.have.property('telephone').that.is.a('string').and.is.not.empty;",
									"        pm.expect(address).to.have.property('street').that.is.an('array').and.is.not.empty;",
									"        pm.expect(address).to.have.property('country').that.is.an('object');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setShippingAddressesOnCart($cartId: String!) {\n\tsetShippingAddressesOnCart(\n\t\tinput: {\n\t\t\tcart_id: $cartId\n\t\t\tshipping_addresses: {\n\t\t\t\taddress: {\n\t\t\t\t\tfirstname: \"Chandu\"\n\t\t\t\t\tlastname: \"Ch\"\n\t\t\t\t\tcompany: \"Adobe india Pvt. ltd.\"\n\t\t\t\t\tstreet: [\"8450 North Fwy\", \"\"]\n\t\t\t\t\tcity: \"Switzerland\"\n\t\t\t\t\tregion: \"ZH\"\n\t\t\t\t\tpostcode: \"8001\"\n\t\t\t\t\tcountry_code: \"CH\"\n\t\t\t\t\ttelephone: \"1234567890\"\n\t\t\t\t\tsave_in_address_book: false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t) {\n\t\tcart {\n\t\t\tprices {\n\t\t\t\tsubtotal_excluding_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tsubtotal_with_discount_excluding_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tgrand_total {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n\t\t\titemsV2 {\n\t\t\t\titems {\n\t\t\t\t\tuid\n\t\t\t\t\tprices {\n\t\t\t\t\t\tprice {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfixed_product_taxes {\n\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlabel\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprice_including_tax {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t\trow_total {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t\trow_total_including_tax {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttotal_item_discount {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tproduct {\n\t\t\t\t\t\tsku\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tshipping_addresses {\n\t\t\t\tuid\n\t\t\t\tfirstname\n\t\t\t\tlastname\n\t\t\t\tcompany\n\t\t\t\tstreet\n\t\t\t\tcity\n\t\t\t\tregion {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpostcode\n\t\t\t\ttelephone\n\t\t\t\tcountry {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpickup_location_code\n\t\t\t\tavailable_shipping_methods {\n\t\t\t\t\tamount {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tavailable\n\t\t\t\t\tcarrier_code\n\t\t\t\t\tcarrier_title\n\t\t\t\t\tmethod_code\n\t\t\t\t\tmethod_title\n\t\t\t\t\tprice_excl_tax {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tprice_incl_tax {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbilling_address {\n\t\t\t\tuid\n\t\t\t\tfirstname\n\t\t\t\tlastname\n\t\t\t\tcompany\n\t\t\t\tstreet\n\t\t\t\tcity\n\t\t\t\tregion {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpostcode\n\t\t\t\ttelephone\n\t\t\t\tcountry {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set billing address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Response contains the 'data' field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('data');",
									"});",
									"",
									"",
									"pm.test(\"Validate the structure of the cart object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.data.setBillingAddressOnCart).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart).to.exist.and.to.be.an('object');",
									"    ",
									"    const cart = responseData.data.setBillingAddressOnCart.cart;",
									"    ",
									"    pm.expect(cart.itemsV2).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.itemsV2.items).to.exist.and.to.be.an('array').that.is.not.empty;",
									"",
									"    cart.itemsV2.items.forEach(item => {",
									"        pm.expect(item).to.be.an('object');",
									"        pm.expect(item.cost_center).to.exist.and.to.be.a('string');",
									"        pm.expect(item.sku_alias).to.exist.and.to.be.a('string');",
									"    });",
									"",
									"    pm.expect(cart.prices).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.prices.grand_total).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.prices.subtotal_excluding_tax).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.prices.subtotal_including_tax).to.exist.and.to.be.an('object');",
									"",
									"    pm.expect(cart.shipping_addresses).to.exist.and.to.be.an('array').that.is.not.empty;",
									"    cart.shipping_addresses.forEach(address => {",
									"        pm.expect(address).to.be.an('object');",
									"        pm.expect(address.uid).to.exist.and.to.be.a('string');",
									"        pm.expect(address.firstname).to.exist.and.to.be.a('string');",
									"        pm.expect(address.lastname).to.exist.and.to.be.a('string');",
									"        pm.expect(address.company).to.exist.and.to.be.a('string');",
									"        pm.expect(address.street).to.exist.and.to.be.an('array').that.is.not.empty;",
									"        pm.expect(address.city).to.exist.and.to.be.a('string');",
									"        pm.expect(address.region).to.exist.and.to.be.an('object');",
									"        pm.expect(address.postcode).to.exist.and.to.be.a('string');",
									"        pm.expect(address.telephone).to.exist.and.to.be.a('string');",
									"        pm.expect(address.country).to.exist.and.to.be.an('object');",
									"    });",
									"",
									"    pm.expect(cart.billing_address).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.billing_address.uid).to.exist.and.to.be.a('string');",
									"    pm.expect(cart.billing_address.firstname).to.exist.and.to.be.a('string');",
									"    pm.expect(cart.billing_address.lastname).to.exist.and.to.be.a('string');",
									"    pm.expect(cart.billing_address.company).to.exist.and.to.be.a('string');",
									"    pm.expect(cart.billing_address.street).to.exist.and.to.be.an('array').that.is.not.empty;",
									"    pm.expect(cart.billing_address.city).to.exist.and.to.be.a('string');",
									"    pm.expect(cart.billing_address.region).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.billing_address.postcode).to.exist.and.to.be.a('string');",
									"    pm.expect(cart.billing_address.telephone).to.exist.and.to.be.a('string');",
									"    pm.expect(cart.billing_address.country).to.exist.and.to.be.an('object');",
									"});",
									"",
									"",
									"pm.test(\"Validate that grand_total, subtotal_excluding_tax, and subtotal_including_tax are non-negative values\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart.prices.grand_total.value).to.be.at.least(0, \"grand_total should be a non-negative value\");",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart.prices.subtotal_excluding_tax.value).to.be.at.least(0, \"subtotal_excluding_tax should be a non-negative value\");",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart.prices.subtotal_including_tax.value).to.be.at.least(0, \"subtotal_including_tax should be a non-negative value\");",
									"});",
									"",
									"",
									"pm.test(\"Shipping addresses contain at least one address with required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setBillingAddressOnCart).to.exist;",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart.shipping_addresses).to.be.an('array').that.is.not.empty;",
									"",
									"    const shippingAddresses = responseData.data.setBillingAddressOnCart.cart.shipping_addresses;",
									"    let hasRequiredFields = false;",
									"",
									"    shippingAddresses.forEach(address => {",
									"        if (address.firstname && address.lastname && address.street.length > 0 && address.city && address.region && address.postcode && address.telephone && address.country) {",
									"            hasRequiredFields = true;",
									"        }",
									"    });",
									"",
									"    pm.expect(hasRequiredFields).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setBillingAddressOnCart($cartId: String!){\n\tsetBillingAddressOnCart(\n\t\tinput: {\n\t\t\tcart_id: $cartId\n\t\t\tbilling_address: \n\t\t\t\t{\n\t\t\t\t\tsame_as_shipping: true\n# \t\t\t\t\taddress: {\n# \t\t\t\t\t\tfirstname: \"Astik\"\n# \t\t\t\t\t\tlastname: \"Unagar\"\n# \t\t\t\t\t\tcompany: \"Adobe india Pvt. ltd.\"\n# \t\t\t\t\t\tstreet: [\"9th cross\", \"3rd main, 6th Stage, Brookfield\"]\n# \t\t\t\t\t\tcity: \"Austin\"\n# \t\t\t\t\t\tregion: \"TX\"\n# \t\t\t\t\t\tpostcode: \"75812\"\n# \t\t\t\t\t\tcountry_code: \"US\"\n# \t\t\t\t\t\ttelephone: \"1234567890\"\n# \t\t\t\t\t\tsave_in_address_book: false\n# \t\t\t\t\t}\n\t\t\t\t\t#use_for_shipping: true\n\t\t\t\t}\n\t\t}\n\t) {\n\t\tcart {\n\t\t\titemsV2{\n\t\t\t\titems{\n\t\t\t\t\tcost_center\n\t\t\t\t\tsku_alias\n\t\t\t\t}\n\t\t\t}\n\t\t\tprices {\n\t\t\t\tgrand_total {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tsubtotal_excluding_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tsubtotal_including_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n\t\t\tshipping_addresses {\n\t\t\t\tuid\n\t\t\t\tfirstname\n\t\t\t\tlastname\n\t\t\t\tcompany\n\t\t\t\tstreet\n\t\t\t\tcity\n\t\t\t\tregion {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpostcode\n\t\t\t\ttelephone\n\t\t\t\tcountry {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpickup_location_code\n\t\t\t}\n\t\t\tbilling_address {\n\t\t\t\tuid\n\t\t\t\tfirstname\n\t\t\t\tlastname\n\t\t\t\tcompany\n\t\t\t\tstreet\n\t\t\t\tcity\n\t\t\t\tregion {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpostcode\n\t\t\t\ttelephone\n\t\t\t\tcountry {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set shipping method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Response contains required fields: grand_total and shipping_addresses\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.prices).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.prices.grand_total).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.shipping_addresses).to.exist.and.to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"Grand total is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.prices).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.prices.grand_total).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.prices.grand_total.value).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Shipping addresses array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.have.property('setShippingMethodsOnCart');",
									"    pm.expect(responseData.data.setShippingMethodsOnCart).to.have.property('cart');",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart).to.have.property('shipping_addresses').that.is.an('array').and.to.have.lengthOf.at.least(1, \"Shipping addresses array should contain at least one element\");",
									"});",
									"",
									"",
									"pm.test(\"Selected shipping method contains valid carrier and method codes\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.shipping_addresses).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.data.setShippingMethodsOnCart.cart.shipping_addresses.forEach(shippingAddress => {",
									"        pm.expect(shippingAddress.selected_shipping_method).to.exist;",
									"        pm.expect(shippingAddress.selected_shipping_method.carrier_code).to.be.a('string').that.is.not.empty;",
									"        pm.expect(shippingAddress.selected_shipping_method.method_code).to.be.a('string').that.is.not.empty;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setShippingMethodsOnCart(\n\t$cartId: String!\n) {\n  setShippingMethodsOnCart(input: {\n    cart_id: $cartId\n    shipping_methods: [\n\t\t\t{\n\t\t\t\tcarrier_code: \"rsdelivery\"\n\t\t\t\tmethod_code: \"13\"\n\t\t\t}\n    ]\n  }) {\n    cart {\n\t\t\tprices{\n\t\t\t\tgrand_total{\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n      shipping_addresses {\n        selected_shipping_method {\n          carrier_code\n          method_code\n          carrier_title\n          method_title\n        }\n      }\n    }\n  }\n}",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set payment method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response contains the 'data' field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('data');",
									"});",
									"",
									"",
									"pm.test(\"The selected_payment_method should be present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setPaymentMethodOnCart).to.exist;",
									"    pm.expect(responseData.data.setPaymentMethodOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setPaymentMethodOnCart.cart.selected_payment_method).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"The payment method code must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.setPaymentMethodOnCart.cart.selected_payment_method.code).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setPaymentMethodOnCart($cartId: String!)\n{\n\tsetPaymentMethodOnCart(\n\t\tinput: {\n\t\t\tcart_id: $cartId\n\t\t\tpayment_method: {\n\t\t\t\tcode: \"checkmo\"\n\t\t\t}\n\t\t}\n\t) {\n\t\tcart {\n\t\t\tselected_payment_method {\n\t\t\t\tcode\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "place order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the structure of the orderV2 object\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.data.placeOrder).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.data.placeOrder.orderV2).to.exist.and.to.be.an('object');",
									"",
									"    const orderV2 = responseData.data.placeOrder.orderV2;",
									"",
									"    pm.expect(orderV2).to.have.all.keys('id', 'number', 'email', 'items');",
									"    pm.expect(orderV2.id).to.exist.and.to.be.a('string');",
									"    pm.expect(orderV2.number).to.exist.and.to.be.a('string');",
									"    pm.expect(orderV2.email).to.exist.and.to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"    ",
									"    pm.expect(orderV2.items).to.be.an('array');",
									"    orderV2.items.forEach(item => {",
									"        pm.expect(item).to.have.all.keys('product_name', 'product', 'status');",
									"        pm.expect(item.product_name).to.exist.and.to.be.a('string');",
									"        pm.expect(item.product).to.exist.and.to.be.an('object');",
									"        pm.expect(item.product).to.have.property('sku').that.is.a('string');",
									"        pm.expect(item.status).to.exist.and.to.be.a('string');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.placeOrder.orderV2.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
									"});",
									"",
									"",
									"pm.test(\"Items array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.have.property('placeOrder');",
									"    pm.expect(responseData.data.placeOrder).to.have.property('orderV2');",
									"    pm.expect(responseData.data.placeOrder.orderV2).to.have.property('items').that.is.an('array').with.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"Each item in the items array has a non-empty product_name and a valid SKU\", function () {",
									"    const responseData = pm.response.json();",
									"    const items = responseData.data.placeOrder.orderV2.items;",
									"",
									"    pm.expect(items).to.be.an('array').that.is.not.empty;",
									"",
									"    items.forEach(item => {",
									"        pm.expect(item.product_name).to.exist.and.to.have.lengthOf.at.least(1, \"Product name should not be empty\");",
									"        pm.expect(item.product.sku).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"SKU should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation placeOrder(\n\t$cartId: String!\n) {\n  placeOrder(input: {cart_id: $cartId}) {\n    errors{\n        code\n        message\n    }\n    orderV2{\n\t\t\tid\n            number\n\t\t\temail\n\t\t\titems{\n\t\t\t\tproduct_name\n\t\t\t\tproduct{\n\t\t\t\t\tsku\n\t\t\t\t}\n\t\t\t\tstatus\n\t\t\t}\n\t\t}\n  }\n}",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PunchoutUser_Scenarios",
			"item": [
				{
					"name": "Authorize Punchout User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.response.json().customer_token);\r",
									"let customerToken = \"Bearer \" +pm.response.json().customer_token;\r",
									" \r",
									"pm.environment.set(\"customerToken\", customerToken);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth1",
							"oauth1": [
								{
									"key": "tokenSecret",
									"value": "{{token_secret}}",
									"type": "string"
								},
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "consumerSecret",
									"value": "{{consumer_secret}}",
									"type": "string"
								},
								{
									"key": "consumerKey",
									"value": "{{consumer_key}}",
									"type": "string"
								},
								{
									"key": "addParamsToHeader",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "signatureMethod",
									"value": "HMAC-SHA256",
									"type": "string"
								},
								{
									"key": "version",
									"value": "1.0",
									"type": "string"
								},
								{
									"key": "addEmptyParamsToSign",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "includeBodyHash",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\":\"chandu\",\n    \"lastName\":\"ch\",\n    \"email\":\"chandu.chatla@rsgroup.com\",\n    \"companyId\": 12\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://st1.emea.ac.ecommerce.rsgroup.com/rest/en_ch/V1/punchout-user-auth",
							"protocol": "https",
							"host": [
								"st1",
								"emea",
								"ac",
								"ecommerce",
								"rsgroup",
								"com"
							],
							"path": [
								"rest",
								"en_ch",
								"V1",
								"punchout-user-auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Customer Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.response.json().data.customerCart.id);\r",
									"let cartId = pm.response.json().data.customerCart.id;\r",
									"pm.environment.set(\"cartId\", cartId);\r",
									" \r",
									"//pm.environment.set(\"customerToken\", customerToken);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  customerCart{\n    id\n  }\n}\n",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Cart Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation addProductsToCart($cartId: String!) {\n\taddProductsToCart(\n\t\tcartId: $cartId\n\t\tcartItems: [\n\t\t\t{\n\t\t\t\tquantity: 1\n\t\t\t\tsku: \"3950295\"\n\t\t\t}\n\t\t]\n\t) {\n\t\tcart {\n\t\t\titemsV2 {\n\t\t\t\titems {\n\t\t\t\t\tuid\n\t\t\t\t\tquantity\n\t\t\t\t\tprices{\n\t\t\t\t\t\tprice_including_tax{\n\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tuser_errors {\n\t\t\tcode\n\t\t\tmessage\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Cart Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query cart($cartId: String!) {\n\tcart(\n\t\tcart_id: $cartId #refresh_cart: true\n\t) {\n\t\temail\n\t\ttotal_quantity\n\t\tprices {\n\t\t\tdiscounts {\n\t\t\t\tlabel\n\t\t\t\tamount {\n\t\t\t\t\tvalue\n\t\t\t\t\tcurrency\n\t\t\t\t}\n\t\t\t}\n\t\t\tsubtotal_including_tax {\n\t\t\t\tvalue\n\t\t\t}\n\t\t\tsubtotal_excluding_tax {\n\t\t\t\tvalue\n\t\t\t}\n\t\t\tsubtotal_with_discount_excluding_tax {\n\t\t\t\tvalue\n\t\t\t}\n\t\t\tgrand_total {\n\t\t\t\tvalue\n\t\t\t}\n\t\t}\n\t\titemsV2 {\n\t\t\titems {\n\t\t\t\tcost_center\n\t\t\t\tsku_alias\n\n\t\t\t\tquantity\n\t\t\t\tuid\n\t\t\t\tid\n\t\t\t\tproduct {\n\t\t\t\t\tuid\n\t\t\t\t\tname\n\t\t\t\t\tsku\n\t\t\t\t\t#only_x_left_in_stock\n\t\t\t\t\tprice {\n\t\t\t\t\t\tregularPrice {\n\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tminimalPrice {\n\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t... on ConfigurableCartItem {\n\t\t\t\t\tid\n\t\t\t\t\tquantity\n\t\t\t\t\tuid\n\t\t\t\t\tconfigurable_options {\n\t\t\t\t\t\tconfigurable_product_option_uid\n\t\t\t\t\t\tconfigurable_product_option_value_uid\n\t\t\t\t\t\tid\n\t\t\t\t\t\toption_label\n\t\t\t\t\t\tvalue_id\n\t\t\t\t\t\tvalue_label\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprices {\n\t\t\t\t\tprice {\n\t\t\t\t\t\tcurrency\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tprice_including_tax {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\trow_total_including_tax {\n\t\t\t\t\t\tcurrency\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\ttotal_item_discount {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\trow_total {\n\t\t\t\t\t\tcurrency\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tdiscounts {\n\t\t\t\t\t\tlabel\n\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalidate Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - message and success\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.an('object');",
									"    pm.expect(responseData.data.invalidateCart).to.be.an('object');",
									"    pm.expect(responseData.data.invalidateCart).to.have.all.keys('message', 'success');",
									"});",
									"",
									"",
									"pm.test(\"Success field is a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.invalidateCart.success).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"The message must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.invalidateCart).to.exist;",
									"    pm.expect(responseData.data.invalidateCart.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation ($cartId: String!) {\n\tinvalidateCart(\n\t\tcart_id: $cartId\n\t) {\n\t\t\tmessage\n\t\tsuccess\n\t}\n}",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Individual Test Cases",
			"item": [
				{
					"name": "Create Company",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the correct Content-Type header\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Errors array should be present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.errors).to.exist.and.to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"The 'message' field in the 'errors' array must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.errors).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.errors.forEach(error => {",
									"        pm.expect(error.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"The createCompany field should be null\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.have.property('createCompany').that.is.null;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\n  createCompany(input: {\n    company_name: \"TestCo\"\n    company_email: \"testcompanyb2b1@mailinator.com\"\n    company_admin: {\n      email: \"testcompanyb2b1@mailinator.com\"\n      firstname: \"Jhon\"\n      lastname:\"Doe\"\n    }\n    legal_name: \"TestCo Inc.\"\n    legal_address: {\n      street: [\n        \"Test Street\"\n      ]\n      city: \"Zurich\"\n      region: {\n        region_code: \"ZH\"\n      }\n      postcode: \"8001\"\n      country_id: CH\n      telephone: \"555 867-5309\"\n    }\n  }){\n    company {\n      id\n      name\n      company_admin {\n        email\n        firstname\n        lastname\n      }\n      legal_address {\n        street\n        city\n        region {\n          region_code\n          region_id\n        }\n        postcode\n        telephone\n      }\n    }\n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Customer Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.response.json().data.generateCustomerToken.token);",
									"let customerToken = \"Bearer \" +pm.response.json().data.generateCustomerToken.token;",
									" ",
									"pm.environment.set(\"customerToken\", customerToken);",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Token must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.generateCustomerToken).to.exist;",
									"    pm.expect(responseData.data.generateCustomerToken.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"",
									"pm.test(\"The data object must be present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('data').that.is.an('object');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Store",
								"value": "{{store}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\n  generateCustomerToken(\n    email: \"chandu123@mailinator.com\"\n    password: \"test@123456\"\n  ) {\n    token\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get Customer details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains 'data' and 'customer' fields\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('data').that.is.an('object');",
									"    pm.expect(responseData.data).to.have.property('customer').that.is.an('object');",
									"});",
									"",
									"pm.test(\"Customer object contains required fields with type checks\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"",
									"    const requiredFields = [",
									"        'id',",
									"        'firstname',",
									"        'lastname',",
									"        'email',",
									"        'status',",
									"        'gender',",
									"        'created_at',",
									"        'role',",
									"        'store_credit',",
									"        'wishlist',",
									"        'orders'",
									"    ];",
									"",
									"    requiredFields.forEach(field => {",
									"        pm.expect(customer, `Customer object is missing required field: ${field}`).to.have.property(field);",
									"    });",
									"",
									"    // Type checks for fields with data",
									"    pm.expect(customer.id).to.be.a('string');",
									"    pm.expect(customer.firstname).to.be.a('string');",
									"    pm.expect(customer.lastname).to.be.a('string');",
									"    pm.expect(customer.email).to.be.a('string');",
									"    pm.expect(customer.status).to.be.a('string');",
									"    pm.expect(customer.gender).to.be.a('number');",
									"    pm.expect(customer.created_at).to.be.a('string');",
									"});",
									"",
									"pm.test(\"Email format is valid\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
									"    pm.expect(customer.email).to.match(emailRegex, \"Email format is invalid\");",
									"});",
									"",
									"pm.test(\"Gender field is valid\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    pm.expect(customer.gender).to.be.oneOf([0, 1], \"Gender should be either 0 (Male) or 1 (Female)\");",
									"});",
									"",
									"pm.test(\"Orders object contains total_count field with type check\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    pm.expect(customer.orders).to.be.an('object');",
									"    pm.expect(customer.orders).to.have.property('total_count').that.is.a('number');",
									"});",
									"",
									"pm.test(\"Role object contains valid fields with type checks\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    pm.expect(customer.role).to.be.an('object');",
									"    pm.expect(customer.role).to.have.property('id').that.is.a('string');",
									"    pm.expect(customer.role).to.have.property('name').that.is.a('string');",
									"    pm.expect(customer.role).to.have.property('users_count').that.is.a('number');",
									"});",
									"",
									"pm.test(\"Store credit contains enabled field with type check\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    pm.expect(customer.store_credit).to.be.an('object');",
									"    pm.expect(customer.store_credit).to.have.property('enabled').that.is.a('boolean');",
									"});",
									"",
									"pm.test(\"Wishlist object contains valid fields with type checks\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    pm.expect(customer.wishlist).to.be.an('object');",
									"    pm.expect(customer.wishlist).to.have.property('id').that.is.a('string');",
									"    pm.expect(customer.wishlist).to.have.property('items_count').that.is.a('number');",
									"    pm.expect(customer.wishlist).to.have.property('sharing_code').that.is.a('string');",
									"    pm.expect(customer.wishlist).to.have.property('updated_at').that.is.a('string');",
									"});",
									"",
									"pm.test(\"Confirmation status is valid\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    const validStatuses = [\"ACCOUNT_CONFIRMATION_NOT_REQUIRED\", \"ACCOUNT_CONFIRMATION_PENDING\", \"ACCOUNT_CONFIRMATION_CONFIRMED\"];",
									"    pm.expect(customer.confirmation_status).to.be.oneOf(validStatuses, \"Invalid confirmation status\");",
									"});",
									"",
									"pm.test(\"Addresses array is valid\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    pm.expect(customer.addresses).to.be.an('array');",
									"    pm.expect(customer.addresses).to.have.lengthOf(0, \"Addresses array should be empty\");",
									"});",
									"",
									"pm.test(\"Created at field is in valid date format\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    const dateFormat = /^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/;",
									"    pm.expect(customer.created_at).to.match(dateFormat, \"Invalid created_at date format\");",
									"});",
									"",
									"pm.test(\"Customer status is valid\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    const validStatuses = [\"ACTIVE\", \"INACTIVE\"];",
									"    pm.expect(customer.status).to.be.oneOf(validStatuses, \"Invalid customer status\");",
									"});",
									"",
									"pm.test(\"Custom attributes are either empty or valid\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    pm.expect(customer.custom_attributes).to.be.an('array');",
									"    pm.expect(customer.custom_attributes).to.have.lengthOf(0, \"Custom attributes array should be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "\n{\n  customer {\n    addresses {\n      city\n      company\n      country_code\n      country_id\n     \n      customer_id\n      default_billing\n      default_shipping\n      \n      fax\n      firstname\n      id\n      lastname\n      middlename\n      postcode\n      prefix\n     \n      region_id\n      street\n      suffix\n      telephone\n      vat_id\n    }\n    allow_remote_shopping_assistance\n    \n    compare_list {\n      \n      item_count\n     \n      uid\n    }\n    confirmation_status\n    created_at\n    custom_attributes(attributeCodes: [\"_____\"]) {\n      code\n    }\n    date_of_birth\n    default_billing\n    default_shipping\n    dob\n    email\n    firstname\n    gender\n    gift_registries {\n      created_at\n   \n      event_name\n    \n      message\n      owner_name\n      privacy_settings\n    \n      \n      status\n    \n      uid\n    }\n    \n    group_id\n    id\n    is_subscribed\n    job_title\n    lastname\n    middlename\n    orders(\n      filter: {}\n      currentPage: 1\n      pageSize: 20\n      sort: { sort_direction: ASC, sort_field: NUMBER }\n      scope: GLOBAL\n    ) {\n      \n      total_count\n    }\n    prefix\n    purchase_orders_enabled\n   \n    role {\n      id\n      name\n      \n      users_count\n    }\n    status\n    store_credit {\n    \n      enabled\n    }\n    structure_id\n    suffix\n    taxvat\n    team {\n      description\n      id\n      name\n      structure_id\n    }\n    telephone\n    wishlist {\n      id\n    \n      items_count\n      \n      sharing_code\n      updated_at\n    }\n  \n}\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Store front (PDP)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response contains the data field\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('data');",
									"});",
									"",
									"pm.test(\"Products array is present and contains at least one product object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.have.property('products').that.is.an('array').that.is.not.empty;",
									"",
									"    responseData.data.products.forEach(product => {",
									"        pm.expect(product).to.be.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Each product object has the required fields with type checks\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    responseData.data.products.forEach(product => {",
									"        const requiredKeys = [",
									"            'id',",
									"            'sku',",
									"            'name',",
									"            'description',",
									"            'shortDescription',",
									"            'addToCartAllowed',",
									"            'url',",
									"            'price',",
									"            'attributes'",
									"        ];",
									"",
									"        // Check required fields exist",
									"        requiredKeys.forEach(key => {",
									"            pm.expect(product, `Product is missing required field: ${key}`).to.have.property(key);",
									"        });",
									"",
									"        // Type checks for fields with data",
									"        pm.expect(product.id).to.be.a('string').and.to.not.be.empty;",
									"        pm.expect(product.sku).to.be.a('string').and.to.not.be.empty;",
									"        pm.expect(product.name).to.be.a('string').and.to.not.be.empty;",
									"        pm.expect(product.description).to.be.a('string');  // can be empty string",
									"        pm.expect(product.shortDescription).to.be.a('string').and.to.not.be.empty;",
									"        pm.expect(product.addToCartAllowed).to.be.a('boolean');",
									"        pm.expect(product.url).to.be.a('string');  // can be empty string",
									"        pm.expect(product.attributes).to.be.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Price contains valid amount and currency values\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    responseData.data.products.forEach(product => {",
									"        pm.expect(product).to.have.property('price').that.is.an('object');",
									"",
									"        // Validate 'final' price",
									"        pm.expect(product.price).to.have.property('final').that.is.an('object');",
									"        pm.expect(product.price.final).to.have.property('amount').that.is.an('object');",
									"        pm.expect(product.price.final.amount).to.have.property('value').that.is.a('number').and.to.be.at.least(0);",
									"        pm.expect(product.price.final.amount).to.have.property('currency').that.is.a('string').and.to.not.be.empty;",
									"",
									"        // Validate 'regular' price",
									"        pm.expect(product.price).to.have.property('regular').that.is.an('object');",
									"        pm.expect(product.price.regular).to.have.property('amount').that.is.an('object');",
									"        pm.expect(product.price.regular.amount).to.have.property('value').that.is.a('number').and.to.be.at.least(0);",
									"        pm.expect(product.price.regular.amount).to.have.property('currency').that.is.a('string').and.to.not.be.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Attributes array contains valid attribute objects\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    responseData.data.products.forEach(product => {",
									"        pm.expect(product).to.have.property('attributes').that.is.an('array');",
									"",
									"        product.attributes.forEach(attr => {",
									"            pm.expect(attr).to.have.property('name').that.is.a('string').and.to.not.be.empty;",
									"            pm.expect(attr).to.have.property('label').that.is.a('string').and.to.not.be.empty;",
									"            pm.expect(attr).to.have.property('value');",
									"",
									"            // Value can be string, number, or even array depending on API design",
									"            pm.expect(",
									"                ['string', 'number', 'object', 'boolean'].includes(typeof attr.value),",
									"                `Unexpected type for attribute value: ${typeof attr.value}`",
									"            ).to.be.true;",
									"        });",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "AC-Source-Locale",
								"value": "en_ch",
								"type": "text"
							},
							{
								"key": "AC-Price-Book-ID",
								"value": "ch",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\n    products(skus: [\"8029043\"]) {\n        id\n        sku\n        name\n        description\n        shortDescription\n        addToCartAllowed\n        url\n        images(roles: []) {\n            url\n            label\n            roles\n        }\n        attributes(roles: []) {\n            name\n            label\n            value\n        }\n        inputOptions {\n            id\n            title\n            required\n            type\n            markupAmount\n            suffix\n            sortOrder\n            range {\n                from\n                to\n            }\n            imageSize {\n                width\n                height\n            }\n            fileExtensions\n        }\n        ... on SimpleProductView {\n            price {\n                final {\n                    amount {\n                        value\n                        currency\n                    }\n                }\n                regular {\n                    amount {\n                        value\n                        currency\n                    }\n                }\n                roles\n            }\n        }\n        links {\n            product {\n                sku\n\n            }\n            linkTypes\n        }\n    }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "https://na1-sandbox.api.commerce.adobe.com/Cxtg3yznDvBje4VM3oQf1R/graphql",
							"protocol": "https",
							"host": [
								"na1-sandbox",
								"api",
								"commerce",
								"adobe",
								"com"
							],
							"path": [
								"Cxtg3yznDvBje4VM3oQf1R",
								"graphql"
							]
						},
						"description": "### POST Request to [https://na1-sandbox.api.commerce.adobe.com/EfvDrU6urKCXXAKFyr8s7i/graphql](https://na1-sandbox.api.commerce.adobe.com/EfvDrU6urKCXXAKFyr8s7i/graphql)\n\n#### Description\n\nThis endpoint allows the user to make a POST request to retrieve product information.\n\n#### Response\n\nThe response for this request is in the form of a JSON schema:\n\n``` json\n{\n  \"data\": {\n    \"products\": [\n      {\n        \"id\": \"\",\n        \"sku\": \"\",\n        \"name\": \"\",\n        \"description\": \"\",\n        \"shortDescription\": \"\",\n        \"addToCartAllowed\": true,\n        \"url\": \"\",\n        \"images\": [],\n        \"attributes\": [\n          {\n            \"name\": \"\",\n            \"label\": \"\",\n            \"value\": \"\",\n            \"roles\": [\"\"]\n          }\n        ],\n        \"inputOptions\": [],\n        \"price\": null,\n        \"links\": []\n      }\n    ]\n  },\n  \"errors\": [\n    {\n      \"message\": \"\",\n      \"locations\": [\n        {\n          \"line\": 0,\n          \"column\": 0\n        }\n      ],\n      \"path\": [\"\"],\n      \"extensions\": {\n        \"classification\": \"\",\n        \"service\": \"\"\n      }\n    }\n  ]\n}\n\n ```\n\nThis JSON schema represents the structure of the response data, including product details and error information."
					},
					"response": [
						{
							"name": "Store front (PDP)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "AC-Channel-ID",
										"value": "96b7e5ab-88e3-4431-9320-419b23dfed5b",
										"type": "text"
									},
									{
										"key": "AC-Environment-ID",
										"value": "EfvDrU6urKCXXAKFyr8s7i",
										"type": "text"
									},
									{
										"key": "AC-Scope-Locale",
										"value": "de_ch",
										"type": "text"
									},
									{
										"key": "X-Api-Key",
										"value": "af088f803f4849dc9a4891c316add79b",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    products(skus: [\"414193\"]) {\n        id\n        sku\n        name\n        description\n        shortDescription\n        addToCartAllowed\n        url\n        images(roles: []) {\n            url\n            label\n            roles\n        }\n        attributes(roles: []) {\n            name\n            label\n            value\n            roles\n        }\n        inputOptions {\n            id\n            title\n            required\n            type\n            markupAmount\n            suffix\n            sortOrder\n            range {\n                from\n                to\n            }\n            imageSize {\n                width\n                height\n            }\n            fileExtensions\n        }\n        ... on SimpleProductView {\n            price {\n                final {\n                    amount {\n                        value\n                        currency\n                    }\n                }\n                regular {\n                    amount {\n                        value\n                        currency\n                    }\n                }\n                roles\n            }\n        }\n        links {\n            product {\n                sku\n\n            }\n            linkTypes\n        }\n    }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "https://na1-sandbox.api.commerce.adobe.com/EfvDrU6urKCXXAKFyr8s7i/graphql",
									"protocol": "https",
									"host": [
										"na1-sandbox",
										"api",
										"commerce",
										"adobe",
										"com"
									],
									"path": [
										"EfvDrU6urKCXXAKFyr8s7i",
										"graphql"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 15 May 2025 07:19:12 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "vary",
									"value": "accept-encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "cf-cache-status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "9400dd9f4c147f82-IAD"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": {\n        \"products\": [\n            {\n                \"id\": \"NDE0MTkzAGRlX2NoAEVmdkRyVTZ1cktDWFhBS0Z5cjhzN2kAU1RPUkVfQ09ERQBXRUJTSVRFX0NPREU\",\n                \"sku\": \"414193\",\n                \"name\": \"Fluke calibration 8808A, Tisch Digital Multimeter 750V ac / 10A ac, 100MΩ\",\n                \"description\": \"[{\\\"name\\\":null,\\\"type\\\":\\\"Heading\\\",\\\"value\\\":[\\\"Fluke 8808A Multimeter , 5.5 digit\\\"]},{\\\"name\\\":null,\\\"type\\\":\\\"Paragraph\\\",\\\"value\\\":[\\\"The Fluke 8808A delivers a wide variety of measurement functions, including volts, ohms, and amps, plus frequency - with a basic V dc accuracy of 0.015 %\\\"]},{\\\"name\\\":null,\\\"type\\\":\\\"List\\\",\\\"value\\\":[\\\"Six dedicated instrument setup keys to instantly select saved test configurations. Ideal for making routine measurements.<BR\\\\/>Large and clear Pass and Fail indication based on user defined limits<BR\\\\/>Extreme ease of use through soft key menu access, ideal for unskilled operators<BR\\\\/>5.5 digit resolution with 0.015% basic dc V accuracy,<BR\\\\/>Dual display to measure different signal characteristics such as Volts and Current simultaneously<BR\\\\/>Dedicated current ranges to measure dc leakage current (i-Leakage mode)<BR\\\\/>Math Functions: dBm, dB, Min, Max<BR\\\\/>Patented split terminal jacks for 2x4 Ohms function for precise 4-wire low ohms measurements.<BR\\\\/>RS-232 Interface <BR\\\\/>Programming Languages\\\\/Modes: Simplified ASCI, Fluke 45<BR\\\\/>Safety Rating EN61010-1 CAT I 1000 V, CAT II 600 V\\\"]}]\",\n                \"shortDescription\": \"Fluke 8808A multimeter 5.5 digit, 240V\",\n                \"addToCartAllowed\": true,\n                \"url\": \"\",\n                \"images\": [],\n                \"attributes\": [\n                    {\n                        \"name\": \"base_image\",\n                        \"label\": \"Base image\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_manufacturer\",\n                        \"label\": \"RS Manufacturer\",\n                        \"value\": \"Fluke\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_weight\",\n                        \"label\": \"RS WEIGHT\",\n                        \"value\": \"4.280 KGM\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_distrelec_sku\",\n                        \"label\": \"RS distrelec sku\",\n                        \"value\": \"17610300\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_article_slug\",\n                        \"label\": \"RS article slug\",\n                        \"value\": \"/multimeters/0414193\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_article_type\",\n                        \"label\": \"RS article type\",\n                        \"value\": \"STANDARD_PACK\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_manufacturer_part_number_primary\",\n                        \"label\": \"RS manufacturer part number primary\",\n                        \"value\": \"Fluke 8808A\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_manufacturer_part_number_alternative\",\n                        \"label\": \"RS manufacturer part number alternative\",\n                        \"value\": \"Fluke 8808A\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_manufacturer_part_number_commercially_sensitive\",\n                        \"label\": \"RS manufacturer part number commercially sensitive\",\n                        \"value\": \"N\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_packaging_pack_size\",\n                        \"label\": \"RS packaging pack size\",\n                        \"value\": \"1\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_packaging_sales_unit_of_measure\",\n                        \"label\": \"RS packaging sales unit of measure\",\n                        \"value\": \"EA\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_search\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_packaging_base_unit_of_measure\",\n                        \"label\": \"RS packaging base unit of measure\",\n                        \"value\": \"EA\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_calibration_is_calibrated\",\n                        \"label\": \"RS calibration is calibrated\",\n                        \"value\": \"N\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_calibration_calibration_type\",\n                        \"label\": \"RS calibration calibration type\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_length\",\n                        \"label\": \"RS length\",\n                        \"value\": \"460.000 MMT\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_width\",\n                        \"label\": \"RS width\",\n                        \"value\": \"405.000 MMT\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_search\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_height\",\n                        \"label\": \"RS height\",\n                        \"value\": \"220.000 MMT\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_comp_contains_hazardous_sustance\",\n                        \"label\": \"RS comp contains hazardous sustance\",\n                        \"value\": \"N\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_comp_rohs_status\",\n                        \"label\": \"RS comp rohs status\",\n                        \"value\": \"E\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_comp_energy_regulation_uk_status\",\n                        \"label\": \"RS comp energy regulation uk status\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_comp_energy_regulation_uk_rating\",\n                        \"label\": \"RS comp energy regulation uk rating\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_comp_energy_regulation_eu_staus\",\n                        \"label\": \"RS comp energy regulation eu staus\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_comp_energy_regulation_eu_rating\",\n                        \"label\": \"RS comp energy regulation eu rating\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_brand_name\",\n                        \"label\": \"RS brand name\",\n                        \"value\": \"Fluke calibration\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_brand_image\",\n                        \"label\": \"RS brand image\",\n                        \"value\": \"M4047-01\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_brand_slug\",\n                        \"label\": \"RS brand slug\",\n                        \"value\": \"TODO create SEO friendly brand slug\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_assets_images_is_indicative\",\n                        \"label\": \"RS assets images is indicative\",\n                        \"value\": \"Y\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_assets_images_photograph\",\n                        \"label\": \"RS assets images photograph\",\n                        \"value\": \"R0414193-02\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_assets_images_line_drawing\",\n                        \"label\": \"RS assets images line drawing\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_assets_images_animated\",\n                        \"label\": \"RS assets images animated\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_assets_images_eu_energy_rating\",\n                        \"label\": \"RS assets images eu energy rating\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_assets_images_uk_energy_rating\",\n                        \"label\": \"RS assets images uk energy rating\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_assets_videos_youtube\",\n                        \"label\": \"RS assets videos youtube\",\n                        \"value\": \"wySDB3LtUBY\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_assets_3d_images_trace_image_id\",\n                        \"label\": \"RS assets 3d images trace image id\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"manufacturer\",\n                        \"label\": \"Manufacturer\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"cost\",\n                        \"label\": \"Cost\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_specification_attributes\",\n                        \"label\": \"RS specification attributes\",\n                        \"value\": \"[{\\\"key\\\":\\\"Multimeter Type\\\",\\\"value\\\":\\\"Bench\\\"},{\\\"key\\\":\\\"Model Number p\\\",\\\"value\\\":\\\"8808A\\\"},{\\\"key\\\":\\\"Display Type\\\",\\\"value\\\":\\\"Digital\\\"},{\\\"key\\\":\\\"Functions Measured\\\",\\\"value\\\":\\\"AC Current, AC Voltage, Continuity, DC Current, DC Voltage, Diode, Frequency, Resistance\\\"},{\\\"key\\\":\\\"Absolute Maximum AC Voltage Measurement\\\",\\\"value\\\":\\\"750V ac\\\"},{\\\"key\\\":\\\"Absolute Maximum DC Current Measurement\\\",\\\"value\\\":\\\"10A dc\\\"},{\\\"key\\\":\\\"Absolute Maximum Resistance Measurement\\\",\\\"value\\\":\\\"100M?\\\"},{\\\"key\\\":\\\"Absolute Maximum DC Voltage Measurement\\\",\\\"value\\\":\\\"1000V dc\\\"},{\\\"key\\\":\\\"Absolute Maximum AC Current Measurement\\\",\\\"value\\\":\\\"10A ac\\\"},{\\\"key\\\":\\\"True RMS\\\",\\\"value\\\":\\\"Yes\\\"},{\\\"key\\\":\\\"Maximum Frequency\\\",\\\"value\\\":\\\"100kHz\\\"},{\\\"key\\\":\\\"AC Current Measurement Resolution\\\",\\\"value\\\":\\\"0.1\\\\u00b5A ac\\\"},{\\\"key\\\":\\\"DC Current Measurement Resolution\\\",\\\"value\\\":\\\"0.001\\\\u00b5A dc\\\"},{\\\"key\\\":\\\"DC Voltage Measurement Resolution\\\",\\\"value\\\":\\\"1\\\\u00b5V dc\\\"},{\\\"key\\\":\\\"Resistance Measurement Resolution\\\",\\\"value\\\":\\\"1m?\\\"},{\\\"key\\\":\\\"AC Voltage Measurement Resolution\\\",\\\"value\\\":\\\"1\\\\u00b5V ac\\\"},{\\\"key\\\":\\\"Width\\\",\\\"value\\\":\\\"217mm\\\"},{\\\"key\\\":\\\"Best AC Current Accuracy\\\",\\\"value\\\":\\\"\\\\u00b10.5% + 0.12\\\"},{\\\"key\\\":\\\"Maximum Operating Temperature\\\",\\\"value\\\":\\\"+50\\\\u00b0C\\\"},{\\\"key\\\":\\\"Best DC Voltage Accuracy\\\",\\\"value\\\":\\\"\\\\u00b10.015% + 0.003\\\"},{\\\"key\\\":\\\"Length\\\",\\\"value\\\":\\\"297mm\\\"},{\\\"key\\\":\\\"Best Resistance Measurement Accuracy\\\",\\\"value\\\":\\\"\\\\u00b11.75% + 0.004\\\"},{\\\"key\\\":\\\"Best DC Current Accuracy\\\",\\\"value\\\":\\\"\\\\u00b10.2% + 0.01\\\"},{\\\"key\\\":\\\"Weight\\\",\\\"value\\\":\\\"2.1kg\\\"},{\\\"key\\\":\\\"Height\\\",\\\"value\\\":\\\"88mm\\\"},{\\\"key\\\":\\\"Minimum Operating Temperature\\\",\\\"value\\\":\\\"0\\\\u00b0C\\\"},{\\\"key\\\":\\\"Best AC Voltage Accuracy\\\",\\\"value\\\":\\\"\\\\u00b10.9% + 0.05 Digits\\\"},{\\\"key\\\":\\\"Dimensions\\\",\\\"value\\\":\\\"297 x 217 x 88mm\\\"}]\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_search\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_tier_price\",\n                        \"label\": \"RS Tier Price\",\n                        \"value\": \"{\\\"ALL GROUPS\\\":[{\\\"qty\\\":\\\"5\\\",\\\"price\\\":\\\"10.000000\\\"}],\\\"Retailer\\\":[{\\\"qty\\\":\\\"10\\\",\\\"price\\\":\\\"8.000000\\\"}],\\\"Exempt\\\":[{\\\"qty\\\":\\\"15\\\",\\\"price\\\":\\\"5.000000\\\"}]}\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_search\"\n                        ]\n                    }\n                ],\n                \"inputOptions\": [],\n                \"price\": null,\n                \"links\": []\n            }\n        ]\n    },\n    \"errors\": [\n        {\n            \"message\": \"Missing price information\",\n            \"locations\": [\n                {\n                    \"line\": 1,\n                    \"column\": 349\n                }\n            ],\n            \"path\": [\n                \"products\",\n                0,\n                \"price\"\n            ],\n            \"extensions\": {\n                \"classification\": \"DataFetchingException\",\n                \"service\": \"catalog\"\n            }\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "getRestrictionsbySKU",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**",
									" * ✅ Basic tests",
									" */",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"/**",
									" * ✅ Define schemas",
									" */",
									"const errorsSchema = {",
									"    type: \"array\",",
									"    items: {",
									"        type: \"object\",",
									"        required: [\"message\"],",
									"        properties: {",
									"            message: { type: \"string\", minLength: 1 }",
									"        },",
									"        additionalProperties: false",
									"    }",
									"};",
									"",
									"const detailsSchema = {",
									"    type: \"object\",",
									"    required: [\"message\", \"rule_type\"],",
									"    properties: {",
									"        message: { type: \"string\" },",
									"        rule_type: { type: \"string\" }",
									"    },",
									"    additionalProperties: false",
									"};",
									"",
									"const attributesSchema = {",
									"    type: \"array\",",
									"    items: {",
									"        type: \"object\",",
									"        required: [\"name\", \"label\", \"value\"],",
									"        properties: {",
									"            name: { type: \"string\", minLength: 1 },",
									"            label: { type: \"string\", minLength: 1 },",
									"            value: {}",
									"        },",
									"        additionalProperties: false",
									"    }",
									"};",
									"",
									"const restrictionsSchema = {",
									"    type: [\"object\", \"null\"],",
									"    required: [\"sku\", \"restricted\", \"details\"],",
									"    properties: {",
									"        sku: { type: \"string\", minLength: 1 },",
									"        restricted: { type: \"boolean\" },",
									"        details: detailsSchema,",
									"        attributes: attributesSchema",
									"    },",
									"    additionalProperties: false",
									"};",
									"",
									"const responseSchema = {",
									"    type: \"object\",",
									"    properties: {",
									"        data: {",
									"            type: \"object\",",
									"            required: [\"getProductRestrictionsBySkus\"],",
									"            properties: {",
									"                getProductRestrictionsBySkus: restrictionsSchema",
									"            },",
									"            additionalProperties: false",
									"        },",
									"        errors: errorsSchema",
									"    },",
									"    additionalProperties: false",
									"};",
									"",
									"/**",
									" * ✅ Schema validation",
									" */",
									"pm.test(\"Validate full response against schema\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(tv4.validate(responseData, responseSchema), JSON.stringify(tv4.error, null, 2)).to.be.true;",
									"});",
									"",
									"/**",
									" * ✅ Business logic negative tests",
									" */",
									"pm.test(\"Business logic: restricted flag rules\", function () {",
									"    const responseData = pm.response.json();",
									"    const restrictions = responseData?.data?.getProductRestrictionsBySkus;",
									"",
									"    if (restrictions && restrictions !== null) {",
									"        const details = restrictions.details;",
									"",
									"        if (restrictions.restricted === true) {",
									"            pm.expect(details.message, \"Message should not be empty if restricted\").to.have.lengthOf.at.least(1);",
									"            pm.expect(details.rule_type, \"Rule type should not be empty if restricted\").to.have.lengthOf.at.least(1);",
									"        }",
									"",
									"        if (restrictions.restricted === false) {",
									"            pm.expect(details.message, \"Message should be empty if not restricted\").to.equal(\"\");",
									"            pm.expect(details.rule_type, \"Rule type should be empty if not restricted\").to.equal(\"\");",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * ✅ Optional errors check",
									" */",
									"pm.test(\"Errors array validation if present\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    if (responseData.hasOwnProperty(\"errors\")) {",
									"        pm.expect(tv4.validate(responseData.errors, errorsSchema), JSON.stringify(tv4.error, null, 2)).to.be.true;",
									"    } else {",
									"        console.log(\"No errors array found in response.\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetProductRestrictionsBySkus {\n  getProductRestrictionsBySkus(\n    input: {\n        sku: \"SKU99\",\n    }){\n        sku\n        restricted\n        details{\n            message\n            rule_type\n        }\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCompany details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields: errors and data\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('errors', 'data');",
									"});",
									"",
									"",
									"pm.test(\"Errors array should not be empty when errors are present\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.errors).to.exist.and.to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"The message in errors must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.errors).to.be.an('array').that.is.not.empty;",
									"    responseData.errors.forEach(error => {",
									"        pm.expect(error.message).to.exist.and.to.be.a('string').that.is.not.empty;",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"The extensions category must be a valid string or null\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('errors').that.is.an('array').and.is.not.empty;",
									"    ",
									"    responseData.errors.forEach(error => {",
									"        pm.expect(error).to.have.property('extensions').that.is.an('object');",
									"        pm.expect(error.extensions.category).to.satisfy(value => typeof value === 'string' || value === null, \"Category must be a valid string or null\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query{\n  company{\n    rs_restriction_type\n    rs_restrictions_apply\n    company_admin {\n      firstname\n      lastname\n      email\n    }\n    email\n    id\n    legal_address {\n      street\n       city\n      region {\n        region_id\n        region_code\n      }\n      postcode\n      country_code\n      telephone\n    }\n    legal_name\n    name\n  }\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "storePickupLocations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"const responseData = pm.response.json();",
									"",
									"pm.test(\"Response structure should include pickupLocations\", function () {",
									"    pm.expect(responseData).to.have.nested.property('data.pickupLocations');",
									"    pm.expect(responseData.data.pickupLocations).to.be.an('object');",
									"});",
									"",
									"// Helper: clean invisible characters",
									"function normalizePhoneFax(val) {",
									"    if (!val) return val;",
									"    return val.replace(/[\\u200B-\\u200D\\uFEFF]/g, '').trim(); // remove zero-width spaces",
									"}",
									"",
									"// Relaxed regex for international numbers (allow +, spaces, dashes, parentheses)",
									"const phoneFaxRegex = /^\\+?\\d{1,4}(?:[\\s\\-()]?\\d+)+$/;",
									"",
									"pm.test(\"Validate structure of pickupLocations\", function () {",
									"    const pickupLocations = responseData.data.pickupLocations;",
									"",
									"    pm.expect(pickupLocations).to.have.property('items').that.is.an('array');",
									"    pickupLocations.items.forEach(item => {",
									"        pm.expect(item).to.have.property('pickup_location_code').that.is.a('string').and.not.empty;",
									"        pm.expect(item).to.have.property('name').that.is.a('string').and.not.empty;",
									"",
									"        if (item.email !== null) {",
									"            pm.expect(item.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, `Invalid email: ${item.email}`);",
									"        }",
									"",
									"        // Phone validation with normalization",
									"        if (item.phone !== null) {",
									"            const cleanPhone = normalizePhoneFax(item.phone);",
									"            pm.expect(cleanPhone).to.match(phoneFaxRegex, `Invalid phone format: ${item.phone}`);",
									"        }",
									"",
									"        // Fax validation with normalization",
									"        if (item.fax !== null) {",
									"            const cleanFax = normalizePhoneFax(item.fax);",
									"            pm.expect(cleanFax).to.match(phoneFaxRegex, `Invalid fax format: ${item.fax}`);",
									"        }",
									"",
									"        if (item.postcode !== null) {",
									"            pm.expect(item.postcode).to.match(/^[A-Za-z0-9\\s-]{3,10}$/, `Invalid postcode: ${item.postcode}`);",
									"        }",
									"",
									"        if (item.opening_times !== null) {",
									"            let times;",
									"            try {",
									"                times = JSON.parse(item.opening_times);",
									"                pm.expect(times).to.be.an('array');",
									"                times.forEach(t => {",
									"                    pm.expect(t).to.have.property('day').that.is.a('string');",
									"                    pm.expect(t).to.have.property('open').that.is.a('boolean');",
									"                    if (t.start && t.end) {",
									"                        pm.expect(t.start).to.match(/^\\d{2}:\\d{2}$/, `Invalid start time: ${t.start}`);",
									"                        pm.expect(t.end).to.match(/^\\d{2}:\\d{2}$/, `Invalid end time: ${t.end}`);",
									"                    }",
									"                });",
									"            } catch (e) {",
									"                throw new Error(`Invalid opening_times JSON: ${item.opening_times}`);",
									"            }",
									"        }",
									"    });",
									"});",
									"",
									"// Negative test injections for robustness",
									"pm.test(\"Reject clearly invalid phone/fax formats\", function () {",
									"    const invalidSamples = [\"123-abc\", \"++++++\", \"phone123\", \"123_456\", \" \"];",
									"    invalidSamples.forEach(sample => {",
									"        const cleanSample = normalizePhoneFax(sample);",
									"        pm.expect(phoneFaxRegex.test(cleanSample)).to.eql(false, `Invalid format passed unexpectedly: ${sample}`);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  pickupLocations(\n    pageSize: 20\n    currentPage: 1\n    sort: {distance: ASC}\n  ) {\n    items {\n      pickup_location_code\n      name\n      email\n      fax\n      description\n      latitude\n      longitude\n      country_id\n      region_id\n      region\n      city\n      street\n      postcode\n      phone\n      opening_times\n    },\n    total_count\n    page_info {\n      page_size\n      current_page\n      total_pages\n    }\n  }\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "store config details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ✅ Status check\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"// ✅ Existence checks\r",
									"pm.test(\"Response contains 'data' and 'storeConfig' fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('data').that.is.an('object');\r",
									"    pm.expect(responseData.data).to.have.property('storeConfig').that.is.an('object');\r",
									"});\r",
									"\r",
									"// ✅ Schema-style validation\r",
									"pm.test(\"StoreConfig contains required non-null fields\", function () {\r",
									"    const storeConfig = pm.response.json().data.storeConfig;\r",
									"\r",
									"    const requiredNonNullFields = [\r",
									"        \"autocomplete_on_storefront\",\r",
									"        \"base_currency_code\",\r",
									"        \"base_url\",\r",
									"        \"base_media_url\",\r",
									"        \"base_static_url\",\r",
									"        \"secure_base_url\",\r",
									"        \"store_code\",\r",
									"        \"store_group_code\",\r",
									"        \"website_code\",\r",
									"        \"website_name\",\r",
									"        \"locale\",\r",
									"        \"timezone\",\r",
									"        \"is_default_store\"\r",
									"    ];\r",
									"\r",
									"    requiredNonNullFields.forEach(field => {\r",
									"        pm.expect(storeConfig, `StoreConfig is missing required field: ${field}`).to.have.property(field);\r",
									"        pm.expect(storeConfig[field], `Field ${field} should not be null`).to.not.be.null;\r",
									"    });\r",
									"});\r",
									"\r",
									"// ✅ Regex validations\r",
									"pm.test(\"Validate URL formats\", function () {\r",
									"    const storeConfig = pm.response.json().data.storeConfig;\r",
									"    const urlFields = [\"base_url\", \"base_media_url\", \"base_static_url\", \"secure_base_url\"];\r",
									"\r",
									"    const urlRegex = /^https?:\\/\\/[^\\s/$.?#].[^\\s]*$/;\r",
									"\r",
									"    urlFields.forEach(field => {\r",
									"        pm.expect(storeConfig[field], `${field} should be a valid URL`).to.match(urlRegex);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Validate currency and locale formats\", function () {\r",
									"    const storeConfig = pm.response.json().data.storeConfig;\r",
									"\r",
									"    const currencyRegex = /^[A-Z]{3}$/; // e.g. CHF, USD, EUR\r",
									"    const localeRegex = /^[a-z]{2}_[A-Z]{2}$/; // e.g. en_GB\r",
									"\r",
									"    pm.expect(storeConfig.base_currency_code, \"Invalid currency format\").to.match(currencyRegex);\r",
									"    pm.expect(storeConfig.locale, \"Invalid locale format\").to.match(localeRegex);\r",
									"});\r",
									"\r",
									"// ✅ Business rule validations\r",
									"pm.test(\"Shopping cart fields are correctly configured\", function () {\r",
									"    const storeConfig = pm.response.json().data.storeConfig;\r",
									"    pm.expect(storeConfig.shopping_cart_display_price).to.be.a('number');\r",
									"    pm.expect(storeConfig.shopping_cart_display_shipping).to.be.a('number');\r",
									"    pm.expect(storeConfig.shopping_cart_display_subtotal).to.be.a('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Order cancellation reasons are valid\", function () {\r",
									"    const cancellationReasons = pm.response.json().data.storeConfig.order_cancellation_reasons;\r",
									"    pm.expect(cancellationReasons).to.be.an('array').that.is.not.empty;\r",
									"    cancellationReasons.forEach(reason => {\r",
									"        pm.expect(reason).to.have.property(\"description\").that.is.a(\"string\").and.not.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"// ✅ Negative tests for schema violations\r",
									"pm.test(\"Negative: Missing required field should fail\", function () {\r",
									"    const storeConfig = pm.response.json().data.storeConfig;\r",
									"    if (!storeConfig.hasOwnProperty(\"base_currency_code\")) {\r",
									"        pm.expect.fail(\"Negative test: base_currency_code is missing!\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Negative: Empty string values should fail\", function () {\r",
									"    const storeConfig = pm.response.json().data.storeConfig;\r",
									"    [\"store_code\", \"website_name\"].forEach(field => {\r",
									"        if (storeConfig[field] === \"\") {\r",
									"            pm.expect.fail(`Negative test: ${field} is empty string!`);\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Negative: Invalid regex values should fail\", function () {\r",
									"    const storeConfig = pm.response.json().data.storeConfig;\r",
									"    const badCurrencyRegex = /[^A-Z]/;\r",
									"    if (badCurrencyRegex.test(storeConfig.base_currency_code)) {\r",
									"        pm.expect.fail(`Negative test: Invalid currency code: ${storeConfig.base_currency_code}`);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query StoreConfig {\n    storeConfig {\n    absolute_footer\n    autocomplete_on_storefront\n    base_currency_code\n    base_link_url\n    base_media_url\n    base_static_url\n    base_url\n    cart_expires_in_days\n    cart_summary_display_quantity\n    catalog_default_sort_by\n    category_fixed_product_tax_display_setting\n    category_url_suffix\n    ccdm_price_book_id\n    ccdm_service_endpoint\n    ccdm_source_locale\n    check_money_order_enable_for_specific_countries\n    check_money_order_enabled\n    check_money_order_make_check_payable_to\n    check_money_order_max_order_total\n    check_money_order_min_order_total\n    check_money_order_new_order_status\n    check_money_order_payment_from_specific_countries\n    check_money_order_send_check_to\n    check_money_order_sort_order\n    check_money_order_title\n    cms_home_page\n    cms_no_cookies\n    cms_no_route\n    code    \n    configurable_thumbnail_source\n    copyright\n    countries_with_required_region\n    create_account_confirmation\n    customer_access_token_lifetime\n    cybersource_3ds_card_types\n    cybersource_3ds_enabled\n    cybersource_cc_vault_enabled\n    cybersource_vault_cvv_enabled\n    default_country\n    default_description\n    default_display_currency_code\n    default_keywords\n    default_title\n    demonotice\n    display_state_if_optional\n    front\n    grid_per_page\n    grid_per_page_values\n    head_includes\n    head_shortcut_icon\n    header_logo_src\n    id\n    is_default_store\n    is_default_store_group\n    is_guest_checkout_enabled\n    is_negotiable_quote_active\n    is_one_page_checkout_enabled\n    is_requisition_list_active\n    list_mode\n    list_per_page\n    list_per_page_values\n    locale\n    logo_alt\n    logo_height\n    logo_width\n    magento_wishlist_general_is_enabled\n    max_items_in_order_summary\n    minicart_display\n    minicart_max_items\n    minimum_password_length\n    newsletter_enabled\n    no_route\n    optional_zip_countries\n    order_cancellation_enabled\n    order_cancellation_reasons {\n      description\n    }\n    payment_payflowpro_cc_vault_active\n    product_fixed_product_tax_display_setting\n    product_url_suffix\n    quickorder_active\n    required_character_classes_number\n    root_category_id\n    root_category_uid\n    sales_fixed_product_tax_display_setting\n    secure_base_link_url\n    secure_base_media_url\n    secure_base_static_url\n    secure_base_url\n    shopping_cart_display_full_summary\n    shopping_cart_display_grand_total\n    shopping_cart_display_price\n    shopping_cart_display_shipping\n    shopping_cart_display_subtotal\n    shopping_cart_display_tax_gift_wrapping\n    shopping_cart_display_zero_tax\n    show_cms_breadcrumbs\n    store_code\n    store_group_code\n    store_group_name\n    store_name\n    store_sort_order\n    timezone\n    title_prefix\n    title_separator\n    title_suffix\n    use_store_in_url\n    website_code\n    website_id\n    website_name\n    weight_unit\n    welcome\n    zero_subtotal_enable_for_specific_countries\n    zero_subtotal_enabled\n    zero_subtotal_new_order_status\n    zero_subtotal_payment_action\n    zero_subtotal_payment_from_specific_countries\n    zero_subtotal_sort_order\n    zero_subtotal_title\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}