{
	"info": {
		"_postman_id": "d8efe3d0-5efe-43e3-8a79-0bff85ad069d",
		"name": "RS_Commerce_Regression",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43867066"
	},
	"item": [
		{
			"name": "PlaceOrder_B2C User",
			"item": [
				{
					"name": "Get Customer Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.response.json().data.generateCustomerToken.token);",
									"let customerToken = \"Bearer \" +pm.response.json().data.generateCustomerToken.token;",
									" ",
									"pm.environment.set(\"customerToken\", customerToken);",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Token must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.generateCustomerToken).to.exist;",
									"    pm.expect(responseData.data.generateCustomerToken.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"",
									"pm.test(\"The data object must be present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('data').that.is.an('object');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Store",
								"value": "{{store}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\n  generateCustomerToken(\n    email: \"chandu128@mailinator.com\"\n    password: \"test@123456\"\n  ) {\n    token\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Customer Cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.response.json().data.customerCart.id);",
									"let cartId = pm.response.json().data.customerCart.id;",
									"pm.environment.set(\"cartId\", cartId);",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response contains the 'data' field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('data').that.is.an('object');",
									"});",
									"",
									"",
									"pm.test(\"Customer cart 'id' must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.customerCart).to.exist;",
									"    pm.expect(responseData.data.customerCart.id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  customerCart{\n    id\n  }\n}\n",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Cart Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"// --- Positive Tests ---",
									"// Status code",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Deep schema validation",
									"pm.test(\"Response has required fields with deep nested objects\", function () {",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('data');",
									"    pm.expect(responseData.data).to.have.property('addProductsToCart');",
									"    const addProducts = responseData.data.addProductsToCart;",
									"",
									"    pm.expect(addProducts).to.have.property('cart');",
									"    pm.expect(addProducts.cart).to.have.property('itemsV2');",
									"    pm.expect(addProducts.cart.itemsV2).to.have.property('items');",
									"    pm.expect(addProducts).to.have.property('user_errors');",
									"",
									"    const items = addProducts.cart.itemsV2.items;",
									"    pm.expect(items).to.be.an('array');",
									"",
									"    items.forEach(item => {",
									"        pm.expect(item.uid).to.be.a('string').that.is.not.empty;",
									"        pm.expect(item.quantity).to.be.a('number');",
									"        pm.expect(item.prices).to.be.an('object');",
									"        pm.expect(item.prices.price_including_tax).to.be.an('object');",
									"        pm.expect(item.prices.price_including_tax.currency).to.be.a('string').that.is.not.empty;",
									"        pm.expect(item.prices.price_including_tax.value).to.be.a('number');",
									"    });",
									"});",
									"",
									"// --- Negative Deep Schema Tests (Missing Fields) ---",
									"pm.test(\"Negative: Missing 'cart' should fail schema validation\", function () {",
									"    const invalid = { data: { addProductsToCart: {} } };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart).to.exist;",
									"    }).to.throw;",
									"});",
									"",
									"pm.test(\"Negative: Missing 'itemsV2' should fail schema validation\", function () {",
									"    const invalid = { data: { addProductsToCart: { cart: {} } } };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2).to.exist;",
									"    }).to.throw;",
									"});",
									"",
									"pm.test(\"Negative: Missing 'items' should fail schema validation\", function () {",
									"    const invalid = { data: { addProductsToCart: { cart: { itemsV2: {} } } } };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items).to.exist;",
									"    }).to.throw;",
									"});",
									"",
									"pm.test(\"Negative: Missing 'prices' should fail schema validation\", function () {",
									"    const invalid = {",
									"        data: {",
									"            addProductsToCart: {",
									"                cart: { itemsV2: { items: [{ uid: \"abc123\", quantity: 1 }] } }",
									"            }",
									"        }",
									"    };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].prices).to.exist;",
									"    }).to.throw;",
									"});",
									"",
									"pm.test(\"Negative: Missing 'price_including_tax' should fail schema validation\", function () {",
									"    const invalid = {",
									"        data: {",
									"            addProductsToCart: {",
									"                cart: { itemsV2: { items: [{ uid: \"abc123\", quantity: 1, prices: {} }] } }",
									"            }",
									"        }",
									"    };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].prices.price_including_tax).to.exist;",
									"    }).to.throw;",
									"});",
									"",
									"pm.test(\"Negative: Missing 'currency' should fail schema validation\", function () {",
									"    const invalid = {",
									"        data: {",
									"            addProductsToCart: {",
									"                cart: {",
									"                    itemsV2: { items: [{ uid: \"abc123\", quantity: 1, prices: { price_including_tax: { value: 100 } } }] }",
									"                }",
									"            }",
									"        }",
									"    };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].prices.price_including_tax.currency).to.exist;",
									"    }).to.throw;",
									"});",
									"",
									"pm.test(\"Negative: Missing 'value' should fail schema validation\", function () {",
									"    const invalid = {",
									"        data: {",
									"            addProductsToCart: {",
									"                cart: {",
									"                    itemsV2: { items: [{ uid: \"abc123\", quantity: 1, prices: { price_including_tax: { currency: \"CHF\" } } }] }",
									"                }",
									"            }",
									"        }",
									"    };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].prices.price_including_tax.value).to.exist;",
									"    }).to.throw;",
									"});",
									"",
									"// --- Negative Deep Schema Tests (Wrong Data Types) ---",
									"pm.test(\"Negative: uid must be a string\", function () {",
									"    const invalid = {",
									"        data: {",
									"            addProductsToCart: {",
									"                cart: {",
									"                    itemsV2: { items: [{ uid: 12345, quantity: 1, prices: { price_including_tax: { currency: \"CHF\", value: 100 } } }] }",
									"                }",
									"            }",
									"        }",
									"    };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].uid).to.be.a('string');",
									"    }).to.throw;",
									"});",
									"",
									"pm.test(\"Negative: quantity must be a number\", function () {",
									"    const invalid = {",
									"        data: {",
									"            addProductsToCart: {",
									"                cart: {",
									"                    itemsV2: { items: [{ uid: \"abc123\", quantity: \"two\", prices: { price_including_tax: { currency: \"CHF\", value: 100 } } }] }",
									"                }",
									"            }",
									"        }",
									"    };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].quantity).to.be.a('number');",
									"    }).to.throw;",
									"});",
									"",
									"pm.test(\"Negative: prices must be an object\", function () {",
									"    const invalid = {",
									"        data: {",
									"            addProductsToCart: {",
									"                cart: {",
									"                    itemsV2: { items: [{ uid: \"abc123\", quantity: 1, prices: \"not-an-object\" }] }",
									"                }",
									"            }",
									"        }",
									"    };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].prices).to.be.an('object');",
									"    }).to.throw;",
									"});",
									"",
									"pm.test(\"Negative: price_including_tax must be an object\", function () {",
									"    const invalid = {",
									"        data: {",
									"            addProductsToCart: {",
									"                cart: {",
									"                    itemsV2: { items: [{ uid: \"abc123\", quantity: 1, prices: { price_including_tax: \"invalid\" } }] }",
									"                }",
									"            }",
									"        }",
									"    };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].prices.price_including_tax).to.be.an('object');",
									"    }).to.throw;",
									"});",
									"",
									"pm.test(\"Negative: currency must be a string\", function () {",
									"    const invalid = {",
									"        data: {",
									"            addProductsToCart: {",
									"                cart: {",
									"                    itemsV2: { items: [{ uid: \"abc123\", quantity: 1, prices: { price_including_tax: { currency: 123, value: 100 } } }] }",
									"                }",
									"            }",
									"        }",
									"    };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].prices.price_including_tax.currency).to.be.a('string');",
									"    }).to.throw;",
									"});",
									"",
									"pm.test(\"Negative: value must be a number\", function () {",
									"    const invalid = {",
									"        data: {",
									"            addProductsToCart: {",
									"                cart: {",
									"                    itemsV2: { items: [{ uid: \"abc123\", quantity: 1, prices: { price_including_tax: { currency: \"CHF\", value: \"hundred\" } } }] }",
									"                }",
									"            }",
									"        }",
									"    };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].prices.price_including_tax.value).to.be.a('number');",
									"    }).to.throw;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation addProductsToCart($cartId: String!) {\n\taddProductsToCart(\n\t\tcartId: $cartId\n\t\tcartItems: [\n\t\t\t{\n\t\t\t\tquantity: 2\n\t\t\t\tsku: \"8722174\"\n\t\t\t}\n\t\t]\n\t) {\n\t\tcart {\n\t\t\titemsV2 {\n\t\t\t\titems {\n\t\t\t\t\tuid\n\t\t\t\t\tquantity\n\t\t\t\t\tprices{\n\t\t\t\t\t\tprice_including_tax{\n\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tuser_errors {\n\t\t\tcode\n\t\t\tmessage\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Cart Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ====================",
									"// Positive Test Suite",
									"// ====================",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has required fields in the cart object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.cart).to.exist;",
									"    pm.expect(responseData.data.cart).to.have.all.keys('email', 'total_quantity', 'prices', 'itemsV2');",
									"",
									"    pm.expect(responseData.data.cart.prices).to.exist;",
									"    pm.expect(responseData.data.cart.prices).to.have.all.keys(",
									"        'discounts', ",
									"        'subtotal_including_tax', ",
									"        'subtotal_excluding_tax', ",
									"        'subtotal_with_discount_excluding_tax', ",
									"        'grand_total'",
									"    );",
									"    ",
									"    pm.expect(responseData.data.cart.itemsV2).to.exist;",
									"    pm.expect(responseData.data.cart.itemsV2).to.have.property('items').that.is.an('array');",
									"});",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const email = pm.response.json().data.cart.email;",
									"    pm.expect(email).to.be.a('string').and.matches(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
									"});",
									"",
									"pm.test(\"Total quantity is a non-negative integer\", function () {",
									"    const totalQty = pm.response.json().data.cart.total_quantity;",
									"    pm.expect(totalQty).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"pm.test(\"Prices contain valid currency values and amounts\", function () {",
									"    const items = pm.response.json().data.cart.itemsV2.items;",
									"    pm.expect(items, \"Items array is missing\").to.be.an('array').that.is.not.empty;",
									"",
									"    items.forEach((item, index) => {",
									"        pm.expect(item.prices.price.currency, `Item ${index}: Missing price currency`).to.be.a('string').and.not.empty;",
									"        pm.expect(parseFloat(item.prices.price.value), `Item ${index}: Invalid price value`).to.be.at.least(0);",
									"",
									"        pm.expect(parseFloat(item.prices.price_including_tax.value), `Item ${index}: Invalid price_including_tax`).to.be.at.least(0);",
									"",
									"        pm.expect(item.prices.row_total_including_tax.currency, `Item ${index}: Missing row_total_including_tax currency`).to.be.a('string');",
									"        pm.expect(parseFloat(item.prices.row_total_including_tax.value), `Item ${index}: Invalid row_total_including_tax`).to.be.at.least(0);",
									"",
									"        pm.expect(item.prices.row_total.currency, `Item ${index}: Missing row_total currency`).to.be.a('string');",
									"        pm.expect(parseFloat(item.prices.row_total.value), `Item ${index}: Invalid row_total`).to.be.at.least(0);",
									"    });",
									"});",
									"",
									"",
									"// ====================",
									"// Negative Test Suite",
									"// ====================",
									"",
									"pm.test(\"Negative: Missing required fields should break schema\", function () {",
									"    const res = pm.response.json();",
									"    pm.expect(res.data.cart).to.not.have.property('non_existing_field', \"Unexpected extra field found\");",
									"});",
									"",
									"pm.test(\"Negative: Invalid email format should fail regex\", function () {",
									"    const badEmails = [\"plainaddress\", \"no-at.com\", \"test@.com\"];",
									"    badEmails.forEach(email => {",
									"        pm.expect(email).to.not.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, `Invalid email '${email}' passed validation`);",
									"    });",
									"});",
									"",
									"pm.test(\"Negative: Total quantity must reject non-numeric or negative values\", function () {",
									"    const badQuantities = [-5, \"two\", null];",
									"    badQuantities.forEach(qty => {",
									"        pm.expect(typeof qty === \"number\" && qty >= 0, `Invalid total_quantity '${qty}' passed validation`).to.be.false;",
									"    });",
									"});",
									"",
									"pm.test(\"Negative: Currency fields must fail if not 3-letter ISO codes\", function () {",
									"    const badCurrencies = [\"\", \"US\", \"1234\", \"usdchf\"];",
									"    badCurrencies.forEach(curr => {",
									"        pm.expect(curr).to.not.match(/^[A-Z]{3}$/, `Invalid currency '${curr}' passed validation`);",
									"    });",
									"});",
									"",
									"pm.test(\"Negative: Price values must reject wrong types\", function () {",
									"    const badPrices = [\"NaN\", {}, [], null];",
									"    badPrices.forEach(val => {",
									"        pm.expect(typeof val === \"number\" && !isNaN(val), `Invalid price '${JSON.stringify(val)}' passed validation`).to.be.false;",
									"    });",
									"});",
									"",
									"pm.test(\"Negative: Deep nested product object must enforce schema\", function () {",
									"    const product = pm.response.json().data.cart.itemsV2.items[0].product;",
									"    pm.expect(product).to.have.all.keys(\"uid\", \"name\", \"sku\", \"price\");",
									"",
									"    // Ensure nested keys exist",
									"    pm.expect(product.price).to.have.all.keys(\"regularPrice\", \"minimalPrice\");",
									"",
									"    // Validate types",
									"    pm.expect(product.uid).to.be.a('string');",
									"    pm.expect(product.name).to.be.a('string');",
									"    pm.expect(product.sku).to.be.a('string');",
									"    pm.expect(product.price.regularPrice.amount.value).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Negative: Wrong data types at deep levels should fail\", function () {",
									"    const badSamples = [",
									"        { total_quantity: \"five\" },",
									"        { prices: { grand_total: { value: \"abc\" } } },",
									"        { itemsV2: { items: [{ quantity: \"2\" }] } },",
									"        { itemsV2: { items: [{ product: { sku: 12345 } }] } }",
									"    ];",
									"",
									"    badSamples.forEach(sample => {",
									"        if (sample.total_quantity) {",
									"            pm.expect(typeof sample.total_quantity === \"number\", `Invalid total_quantity type passed`).to.be.false;",
									"        }",
									"        if (sample.prices && sample.prices.grand_total) {",
									"            pm.expect(typeof sample.prices.grand_total.value === \"number\", `Invalid grand_total type passed`).to.be.false;",
									"        }",
									"        if (sample.itemsV2 && sample.itemsV2.items[0].quantity) {",
									"            pm.expect(typeof sample.itemsV2.items[0].quantity === \"number\", `Invalid quantity type passed`).to.be.false;",
									"        }",
									"        if (sample.itemsV2 && sample.itemsV2.items[0].product && sample.itemsV2.items[0].product.sku) {",
									"            pm.expect(typeof sample.itemsV2.items[0].product.sku === \"string\", `Invalid SKU type passed`).to.be.false;",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query cart($cartId: String!) {\n\tcart(\n\t\tcart_id: $cartId #refresh_cart: true\n\t) {\n\t\temail\n\t\ttotal_quantity\n\t\tprices {\n\t\t\tdiscounts {\n\t\t\t\tlabel\n\t\t\t\tamount {\n\t\t\t\t\tvalue\n\t\t\t\t\tcurrency\n\t\t\t\t}\n\t\t\t}\n\t\t\tsubtotal_including_tax {\n\t\t\t\tvalue\n\t\t\t}\n\t\t\tsubtotal_excluding_tax {\n\t\t\t\tvalue\n\t\t\t}\n\t\t\tsubtotal_with_discount_excluding_tax {\n\t\t\t\tvalue\n\t\t\t}\n\t\t\tgrand_total {\n\t\t\t\tvalue\n\t\t\t}\n\t\t}\n\t\titemsV2 {\n\t\t\titems {\n\t\t\t\tcost_center\n\t\t\t\tsku_alias\n\n\t\t\t\tquantity\n\t\t\t\tuid\n\t\t\t\tid\n\t\t\t\tproduct {\n\t\t\t\t\tuid\n\t\t\t\t\tname\n\t\t\t\t\tsku\n\t\t\t\t\t#only_x_left_in_stock\n\t\t\t\t\tprice {\n\t\t\t\t\t\tregularPrice {\n\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tminimalPrice {\n\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t... on ConfigurableCartItem {\n\t\t\t\t\tid\n\t\t\t\t\tquantity\n\t\t\t\t\tuid\n\t\t\t\t\tconfigurable_options {\n\t\t\t\t\t\tconfigurable_product_option_uid\n\t\t\t\t\t\tconfigurable_product_option_value_uid\n\t\t\t\t\t\tid\n\t\t\t\t\t\toption_label\n\t\t\t\t\t\tvalue_id\n\t\t\t\t\t\tvalue_label\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprices {\n\t\t\t\t\tprice {\n\t\t\t\t\t\tcurrency\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tprice_including_tax {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\trow_total_including_tax {\n\t\t\t\t\t\tcurrency\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\ttotal_item_discount {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\trow_total {\n\t\t\t\t\t\tcurrency\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tdiscounts {\n\t\t\t\t\t\tlabel\n\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set shipping address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------- Positive Test Suite ----------------",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has valid Content-Type\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const response = pm.response.json();",
									"const cart = response?.data?.setShippingAddressesOnCart?.cart;",
									"",
									"pm.test(\"Cart object exists with required keys\", function () {",
									"    pm.expect(cart).to.be.an(\"object\");",
									"    pm.expect(cart).to.have.keys(\"prices\", \"itemsV2\", \"shipping_addresses\", \"billing_address\");",
									"});",
									"",
									"// Prices validation",
									"pm.test(\"Validate prices structure and values\", function () {",
									"    const priceFields = [\"subtotal_excluding_tax\", \"subtotal_with_discount_excluding_tax\", \"grand_total\"];",
									"    priceFields.forEach(f => {",
									"        pm.expect(cart.prices[f]).to.be.an(\"object\").that.has.key(\"value\");",
									"        pm.expect(cart.prices[f].value, `${f} should be number`).to.be.a(\"number\").and.to.be.at.least(0);",
									"    });",
									"});",
									"",
									"// ItemsV2 validation",
									"pm.test(\"Validate itemsV2 and product\", function () {",
									"    const items = cart.itemsV2.items;",
									"    pm.expect(items).to.be.an(\"array\").that.is.not.empty;",
									"    const item = items[0]; // only check one",
									"    pm.expect(item.uid).to.be.a(\"string\").and.to.match(/^[A-Za-z0-9+/=]+$/); // base64 UID",
									"    pm.expect(item.prices).to.be.an(\"object\");",
									"    pm.expect(item.product.sku).to.be.a(\"string\").and.to.match(/^[A-Za-z0-9_-]+$/);",
									"});",
									"",
									"// Shipping addresses validation",
									"pm.test(\"Validate shipping addresses schema\", function () {",
									"    const addr = cart.shipping_addresses[0];",
									"    pm.expect(addr).to.include.all.keys(\"uid\",\"firstname\",\"lastname\",\"street\",\"city\",\"region\",\"postcode\",\"telephone\",\"country\",\"available_shipping_methods\");",
									"    pm.expect(addr.region).to.have.all.keys(\"code\",\"label\");",
									"    pm.expect(addr.country).to.have.all.keys(\"code\",\"label\");",
									"    pm.expect(addr.country.code).to.match(/^[A-Z]{2}$/);",
									"",
									"    // Regex validations",
									"    const postcodeRegex = /^[0-9]{4,6}$/;",
									"    const phoneRegex = /^\\+?[0-9 ]{7,20}$/; // accept + and spaces",
									"    pm.expect(addr.postcode).to.match(postcodeRegex);",
									"    pm.expect(addr.telephone).to.match(phoneRegex);",
									"",
									"    // Shipping methods",
									"    pm.expect(addr.available_shipping_methods).to.be.an(\"array\").that.is.not.empty;",
									"    addr.available_shipping_methods.forEach(method => {",
									"        pm.expect(method).to.include.all.keys(\"amount\",\"available\",\"carrier_code\",\"carrier_title\",\"method_code\",\"method_title\",\"price_excl_tax\",\"price_incl_tax\");",
									"        pm.expect(method.amount.value).to.be.a(\"number\");",
									"        pm.expect(method.available).to.be.a(\"boolean\");",
									"    });",
									"});",
									"",
									"// Billing address validation",
									"pm.test(\"Validate billing address schema\", function () {",
									"    const billing = cart.billing_address;",
									"    pm.expect(billing).to.include.all.keys(\"uid\",\"firstname\",\"lastname\",\"street\",\"city\",\"region\",\"postcode\",\"telephone\",\"country\");",
									"    pm.expect(billing.uid).to.match(/^[A-Za-z0-9+/=]+$/);",
									"    pm.expect(billing.postcode).to.match(/^[0-9]{4,6}$/);",
									"",
									"    const phoneRegex = /^\\+?[0-9 ]{7,20}$/; // updated regex",
									"    pm.expect(billing.telephone, `Invalid billing telephone: ${billing.telephone}`).to.match(phoneRegex);",
									"    pm.expect(billing.country.code).to.match(/^[A-Z]{2}$/);",
									"});",
									"",
									"// ---------------- Negative Test Suite ----------------",
									"",
									"// Missing fields",
									"pm.test(\"Negative: Missing required fields\", function () {",
									"    let fakeAddr = { firstname: \"Test\" };",
									"    const required = [\"uid\",\"firstname\",\"lastname\",\"street\",\"city\",\"region\",\"postcode\",\"telephone\",\"country\"];",
									"    const missing = required.filter(k => !Object.keys(fakeAddr).includes(k));",
									"    pm.expect(missing.length).to.be.above(0);",
									"});",
									"",
									"// Invalid types deep inside",
									"pm.test(\"Negative: Wrong data types at nested levels\", function () {",
									"    let badCart = {",
									"        prices: { grand_total: { value: \"not-a-number\" } },",
									"        itemsV2: { items: [{ uid: 123, product: { sku: 456 } }] },",
									"        shipping_addresses: [{ firstname: 789, postcode: \"ABCD\", telephone: \"12-34-XY\" }]",
									"    };",
									"",
									"    pm.expect(badCart.prices.grand_total.value).to.not.be.a(\"number\");",
									"    pm.expect(badCart.itemsV2.items[0].uid).to.not.be.a(\"string\");",
									"    pm.expect(badCart.itemsV2.items[0].product.sku).to.not.be.a(\"string\");",
									"    pm.expect(badCart.shipping_addresses[0].firstname).to.not.be.a(\"string\");",
									"    pm.expect(badCart.shipping_addresses[0].postcode).to.not.match(/^[0-9]{4,6}$/);",
									"    pm.expect(badCart.shipping_addresses[0].telephone).to.not.match(/^\\+?[0-9 ]{7,20}$/);",
									"});",
									"",
									"// Regex negative cases",
									"pm.test(\"Negative: Regex failures\", function () {",
									"    let bad = {",
									"        postcode: \"AB12\",",
									"        telephone: \"++123--\",",
									"        country: { code: \"ZZZ\" },",
									"        uid: \"!@#\"",
									"    };",
									"    pm.expect(bad.postcode).to.not.match(/^[0-9]{4,6}$/);",
									"    pm.expect(bad.telephone).to.not.match(/^\\+?[0-9 ]{7,20}$/);",
									"    pm.expect(bad.country.code).to.not.match(/^[A-Z]{2}$/);",
									"    pm.expect(bad.uid).to.not.match(/^[A-Za-z0-9+/=]+$/);",
									"});",
									"",
									"// Deep schema invalid objects",
									"pm.test(\"Negative: Deep schema invalid\", function () {",
									"    let badRegion = { wrong: \"XX\" };",
									"    let badCountry = { code: 123, name: \"Switzerland\" }; // wrong key",
									"",
									"    pm.expect(badRegion).to.not.have.all.keys(\"code\",\"label\");",
									"    pm.expect(badCountry).to.not.have.all.keys(\"code\",\"label\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setShippingAddressesOnCart($cartId: String!) {\n\tsetShippingAddressesOnCart(\n\t\tinput: {\n\t\t\tcart_id: $cartId\n\t\t\tshipping_addresses: {\n\t\t\t\taddress: {\n\t\t\t\t\tfirstname: \"Chandu\"\n\t\t\t\t\tlastname: \"Ch\"\n\t\t\t\t\tcompany: \"Adobe india Pvt. ltd.\"\n\t\t\t\t\tstreet: [\"8450 North Fwy\", \"\"]\n\t\t\t\t\tcity: \"Switzerland\"\n\t\t\t\t\tregion: \"ZH\"\n\t\t\t\t\tpostcode: \"8001\"\n\t\t\t\t\tcountry_code: \"CH\"\n\t\t\t\t\ttelephone: \"1234567890\"\n\t\t\t\t\tsave_in_address_book: false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t) {\n\t\tcart {\n\t\t\tprices {\n\t\t\t\tsubtotal_excluding_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tsubtotal_with_discount_excluding_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tgrand_total {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n\t\t\titemsV2 {\n\t\t\t\titems {\n\t\t\t\t\tuid\n\t\t\t\t\tprices {\n\t\t\t\t\t\tprice {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfixed_product_taxes {\n\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlabel\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprice_including_tax {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t\trow_total {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t\trow_total_including_tax {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttotal_item_discount {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tproduct {\n\t\t\t\t\t\tsku\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tshipping_addresses {\n\t\t\t\tuid\n\t\t\t\tfirstname\n\t\t\t\tlastname\n\t\t\t\tcompany\n\t\t\t\tstreet\n\t\t\t\tcity\n\t\t\t\tregion {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpostcode\n\t\t\t\ttelephone\n\t\t\t\tcountry {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpickup_location_code\n\t\t\t\tavailable_shipping_methods {\n\t\t\t\t\tamount {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tavailable\n\t\t\t\t\tcarrier_code\n\t\t\t\t\tcarrier_title\n\t\t\t\t\tmethod_code\n\t\t\t\t\tmethod_title\n\t\t\t\t\tprice_excl_tax {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tprice_incl_tax {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbilling_address {\n\t\t\t\tuid\n\t\t\t\tfirstname\n\t\t\t\tlastname\n\t\t\t\tcompany\n\t\t\t\tstreet\n\t\t\t\tcity\n\t\t\t\tregion {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpostcode\n\t\t\t\ttelephone\n\t\t\t\tcountry {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set billing address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------- Positive Test Suite ----------------",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has a valid Content-Type of application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
									"});",
									"",
									"const responseData = pm.response.json();",
									"const cart = responseData?.data?.setBillingAddressOnCart?.cart;",
									"",
									"pm.test(\"Cart object exists and has required properties\", function () {",
									"    pm.expect(cart, \"Cart object missing\").to.be.an(\"object\");",
									"    pm.expect(cart).to.have.all.keys('itemsV2', 'prices', 'shipping_addresses', 'billing_address');",
									"});",
									"",
									"pm.test(\"Prices fields are valid numbers\", function () {",
									"    [\"grand_total\", \"subtotal_excluding_tax\", \"subtotal_including_tax\"].forEach(field => {",
									"        pm.expect(cart.prices[field].value, `${field} invalid`)",
									"            .to.be.a(\"number\").and.to.be.at.least(0);",
									"    });",
									"});",
									"",
									"pm.test(\"Schema-style checks for shipping_addresses and billing_address\", function () {",
									"    const requiredKeys = ['uid','firstname','lastname','street','city','region','postcode','telephone','country'];",
									"",
									"    cart.shipping_addresses.forEach((addr, i) => {",
									"        pm.expect(addr, `Shipping address ${i} missing keys`).to.include.all.keys(requiredKeys);",
									"        pm.expect(addr.region).to.be.an('object').that.has.all.keys('code','label');",
									"        pm.expect(addr.country).to.be.an('object').that.has.all.keys('code','label');",
									"    });",
									"",
									"    pm.expect(cart.billing_address).to.include.all.keys(requiredKeys);",
									"    pm.expect(cart.billing_address.region).to.be.an('object').that.has.all.keys('code','label');",
									"    pm.expect(cart.billing_address.country).to.be.an('object').that.has.all.keys('code','label');",
									"});",
									"",
									"pm.test(\"Regex validations for telephone and postcode\", function () {",
									"    const phoneE164 = /^\\+?[1-9]\\d{6,14}$/;    // strict E.164 (7–15 digits, optional +)",
									"    const phoneRelaxed = /^\\+?[0-9 ]{7,20}$/;  // allow spaces + optional +",
									"    const postcodeRegex = /^[0-9]{4,6}$/;",
									"",
									"    function validatePhone(phone) {",
									"        return phoneE164.test(phone) || phoneRelaxed.test(phone);",
									"    }",
									"",
									"    cart.shipping_addresses.forEach(addr => {",
									"        pm.expect(validatePhone(addr.telephone), `Invalid shipping telephone: ${addr.telephone}`).to.be.true;",
									"        pm.expect(addr.postcode).to.match(postcodeRegex, \"Postcode must be numeric 4–6 digits\");",
									"    });",
									"",
									"    pm.expect(validatePhone(cart.billing_address.telephone), `Invalid billing telephone: ${cart.billing_address.telephone}`).to.be.true;",
									"    pm.expect(cart.billing_address.postcode).to.match(postcodeRegex);",
									"});",
									"",
									"// ---------------- Negative Test Suite ----------------",
									"pm.test(\"Negative: Missing required fields should fail schema checks\", function () {",
									"    const requiredKeys = ['uid','firstname','lastname','street','city','region','postcode','telephone','country'];",
									"    let fakeAddress = { firstname: \"Test\" }; // missing almost everything",
									"    const missingKeys = requiredKeys.filter(k => !Object.keys(fakeAddress).includes(k));",
									"    pm.expect(missingKeys.length, \"Schema should detect missing keys\").to.be.above(0);",
									"});",
									"",
									"pm.test(\"Negative: Invalid data types at deep levels\", function () {",
									"    let badBilling = {",
									"        uid: 123, // should be string",
									"        firstname: true, // should be string",
									"        lastname: {}, // should be string",
									"        street: \"NotArray\", // should be array",
									"        city: 456, // should be string",
									"        region: \"NotObject\", // should be object",
									"        postcode: 8001, // should be string",
									"        telephone: 987654321, // should be string",
									"        country: \"CH\" // should be object",
									"    };",
									"",
									"    pm.expect(badBilling.uid).to.not.be.a(\"string\");",
									"    pm.expect(badBilling.firstname).to.not.be.a(\"string\");",
									"    pm.expect(badBilling.street).to.not.be.an(\"array\");",
									"    pm.expect(badBilling.region).to.not.be.an(\"object\");",
									"    pm.expect(badBilling.country).to.not.be.an(\"object\");",
									"});",
									"",
									"pm.test(\"Negative: Regex failures for telephone/postcode\", function () {",
									"    const badPhone = \"12-34-ABCD\";",
									"    const badPostcode = \"AB123\";",
									"    const phoneE164 = /^\\+?[1-9]\\d{6,14}$/;",
									"    const phoneRelaxed = /^\\+?[0-9 ]{7,20}$/;",
									"    const postcodeRegex = /^[0-9]{4,6}$/;",
									"",
									"    function validatePhone(phone) {",
									"        return phoneE164.test(phone) || phoneRelaxed.test(phone);",
									"    }",
									"",
									"    pm.expect(validatePhone(badPhone)).to.be.false;",
									"    pm.expect(badPostcode).to.not.match(postcodeRegex, \"Invalid postcode should fail regex\");",
									"});",
									"",
									"pm.test(\"Negative: Deep schema invalid objects\", function () {",
									"    let badRegion = { wrongKey: \"XYZ\" };",
									"    let badCountry = { code: 123, name: \"Switzerland\" }; // name should be \"label\"",
									"",
									"    pm.expect(badRegion).to.not.have.all.keys(\"code\", \"label\");",
									"    pm.expect(badCountry).to.not.have.all.keys(\"code\", \"label\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setBillingAddressOnCart($cartId: String!){\n\tsetBillingAddressOnCart(\n\t\tinput: {\n\t\t\tcart_id: $cartId\n\t\t\tbilling_address: \n\t\t\t\t{\n\t\t\t\t\tsame_as_shipping: true\n# \t\t\t\t\taddress: {\n# \t\t\t\t\t\tfirstname: \"Astik\"\n# \t\t\t\t\t\tlastname: \"Unagar\"\n# \t\t\t\t\t\tcompany: \"Adobe india Pvt. ltd.\"\n# \t\t\t\t\t\tstreet: [\"9th cross\", \"3rd main, 6th Stage, Brookfield\"]\n# \t\t\t\t\t\tcity: \"Austin\"\n# \t\t\t\t\t\tregion: \"TX\"\n# \t\t\t\t\t\tpostcode: \"75812\"\n# \t\t\t\t\t\tcountry_code: \"US\"\n# \t\t\t\t\t\ttelephone: \"1234567890\"\n# \t\t\t\t\t\tsave_in_address_book: false\n# \t\t\t\t\t}\n\t\t\t\t\t#use_for_shipping: true\n\t\t\t\t}\n\t\t}\n\t) {\n\t\tcart {\n\t\t\titemsV2{\n\t\t\t\titems{\n\t\t\t\t\tcost_center\n\t\t\t\t\tsku_alias\n\t\t\t\t}\n\t\t\t}\n\t\t\tprices {\n\t\t\t\tgrand_total {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tsubtotal_excluding_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tsubtotal_including_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n\t\t\tshipping_addresses {\n\t\t\t\tuid\n\t\t\t\tfirstname\n\t\t\t\tlastname\n\t\t\t\tcompany\n\t\t\t\tstreet\n\t\t\t\tcity\n\t\t\t\tregion {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpostcode\n\t\t\t\ttelephone\n\t\t\t\tcountry {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpickup_location_code\n\t\t\t}\n\t\t\tbilling_address {\n\t\t\t\tuid\n\t\t\t\tfirstname\n\t\t\t\tlastname\n\t\t\t\tcompany\n\t\t\t\tstreet\n\t\t\t\tcity\n\t\t\t\tregion {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpostcode\n\t\t\t\ttelephone\n\t\t\t\tcountry {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set shipping method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields: grand_total and shipping_addresses\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart).to.exist;",
									"",
									"    const cart = responseData.data.setShippingMethodsOnCart.cart;",
									"    pm.expect(cart).to.exist;",
									"    pm.expect(cart.prices).to.exist;",
									"    pm.expect(cart.prices.grand_total).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.shipping_addresses).to.exist.and.to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Grand total value is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.prices.grand_total.value).to.be.a('number').and.to.be.at.least(0, \"Grand total value should be non-negative\");",
									"});",
									"",
									"",
									"pm.test(\"Shipping addresses array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.shipping_addresses).to.exist.and.to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"Selected shipping method has valid carrier_code and method_code as non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.shipping_addresses).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.data.setShippingMethodsOnCart.cart.shipping_addresses.forEach(address => {",
									"        pm.expect(address.selected_shipping_method.carrier_code).to.exist.and.to.be.a('string').that.is.not.empty;",
									"        pm.expect(address.selected_shipping_method.method_code).to.exist.and.to.be.a('string').that.is.not.empty;",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setShippingMethodsOnCart(\n\t$cartId: String!\n) {\n  setShippingMethodsOnCart(input: {\n    cart_id: $cartId\n    shipping_methods: [\n\t\t\t{\n\t\t\t\tcarrier_code: \"rsdelivery\"\n\t\t\t\tmethod_code: \"13\"\n\t\t\t}\n    ]\n  }) {\n    cart {\n\t\t\tprices{\n\t\t\t\tgrand_total{\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n      shipping_addresses {\n        selected_shipping_method {\n          carrier_code\n          method_code\n          carrier_title\n          method_title\n        }\n      }\n    }\n  }\n}",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set payment method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response contains the data field\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('data');",
									"});",
									"",
									"",
									"pm.test(\"The selected_payment_method property must be present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setPaymentMethodOnCart).to.exist;",
									"    pm.expect(responseData.data.setPaymentMethodOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setPaymentMethodOnCart.cart.selected_payment_method).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"The payment method code must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.setPaymentMethodOnCart.cart.selected_payment_method.code).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setPaymentMethodOnCart($cartId: String!)\n{\n\tsetPaymentMethodOnCart(\n\t\tinput: {\n\t\t\tcart_id: $cartId\n\t\t\tpayment_method: {\n\t\t\t\tcode: \"checkmo\"\n\t\t\t}\n\t\t}\n\t) {\n\t\tcart {\n\t\t\tselected_payment_method {\n\t\t\t\tcode\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "place order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Order ID is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.placeOrder.orderV2.id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Order ID should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.placeOrder.orderV2.email).to.exist;",
									"    pm.expect(responseData.data.placeOrder.orderV2.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
									"});",
									"",
									"",
									"pm.test(\"Items array is present and contains at least one product item\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.nested.property('data.placeOrder.orderV2.items').that.is.an('array').and.to.have.length.of.at.least(1, \"Items array should contain at least one product item\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation placeOrder(\n\t$cartId: String!\n) {\n  placeOrder(input: {cart_id: $cartId}) {\n    errors{\n        code\n        message\n    }\n    orderV2{\n\t\t\tid\n            number\n\t\t\temail\n\t\t\titems{\n\t\t\t\tproduct_name\n\t\t\t\tproduct{\n\t\t\t\t\tsku\n\t\t\t\t}\n\t\t\t\tstatus\n\t\t\t}\n\t\t}\n  }\n}",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PlaceOrder_B2B User",
			"item": [
				{
					"name": "Get Customer Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.response.json().data.generateCustomerToken.token);",
									"let customerToken = \"Bearer \" +pm.response.json().data.generateCustomerToken.token;",
									" ",
									"pm.environment.set(\"customerToken\", customerToken);",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Token must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.generateCustomerToken).to.exist;",
									"    pm.expect(responseData.data.generateCustomerToken.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"",
									"pm.test(\"The data object must be present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('data').that.is.an('object');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Store",
								"value": "{{store}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\n  generateCustomerToken(\n    email: \"chandu123@mailinator.com\"\n    password: \"test@123456\"\n  ) {\n    token\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Customer Cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.response.json().data.customerCart.id);",
									"let cartId = pm.response.json().data.customerCart.id;",
									"pm.environment.set(\"cartId\", cartId);",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response contains the 'data' field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('data').that.is.an('object');",
									"});",
									"",
									"",
									"pm.test(\"Customer cart 'id' must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.customerCart).to.exist;",
									"    pm.expect(responseData.data.customerCart.id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  customerCart{\n    id\n  }\n}\n",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Cart Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const json = pm.response.json();",
									"",
									"const items = json?.data?.addProductsToCart?.cart?.itemsV2?.items;",
									"",
									"let uid = null;",
									"",
									"if (Array.isArray(items) && items.length > 0) {",
									"    uid = items[0]?.uid;",
									"}",
									"",
									"// Validate",
									"pm.test(\"Add to Cart response contains cart_item_uid\", function () {",
									"    pm.expect(uid, \"cart_item_uid not found in response\").to.be.a(\"string\").and.not.empty;",
									"});",
									"",
									"// Save to environment",
									"pm.environment.set(\"cart_item_uid\", uid);",
									"",
									"// Optional logging",
									"console.log(\"✅ Stored cart_item_uid:\", uid);",
									"",
									"",
									"",
									"// --- Positive Tests ---",
									"// Status code",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Deep schema validation",
									"pm.test(\"Response has required fields with deep nested objects\", function () {",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('data');",
									"    pm.expect(responseData.data).to.have.property('addProductsToCart');",
									"    const addProducts = responseData.data.addProductsToCart;",
									"",
									"    pm.expect(addProducts).to.have.property('cart');",
									"    pm.expect(addProducts.cart).to.have.property('itemsV2');",
									"    pm.expect(addProducts.cart.itemsV2).to.have.property('items');",
									"    pm.expect(addProducts).to.have.property('user_errors');",
									"",
									"    const items = addProducts.cart.itemsV2.items;",
									"    pm.expect(items).to.be.an('array');",
									"",
									"    items.forEach(item => {",
									"        pm.expect(item.uid).to.be.a('string').that.is.not.empty;",
									"        pm.expect(item.quantity).to.be.a('number');",
									"        pm.expect(item.prices).to.be.an('object');",
									"        pm.expect(item.prices.price_including_tax).to.be.an('object');",
									"        pm.expect(item.prices.price_including_tax.currency).to.be.a('string').that.is.not.empty;",
									"        pm.expect(item.prices.price_including_tax.value).to.be.a('number');",
									"    });",
									"});",
									"",
									"// --- Negative Deep Schema Tests (Missing Fields) ---",
									"pm.test(\"Negative: Missing 'cart' should fail schema validation\", function () {",
									"    const invalid = { data: { addProductsToCart: {} } };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart).to.exist;",
									"    }).to.throw;",
									"});",
									"",
									"pm.test(\"Negative: Missing 'itemsV2' should fail schema validation\", function () {",
									"    const invalid = { data: { addProductsToCart: { cart: {} } } };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2).to.exist;",
									"    }).to.throw;",
									"});",
									"",
									"pm.test(\"Negative: Missing 'items' should fail schema validation\", function () {",
									"    const invalid = { data: { addProductsToCart: { cart: { itemsV2: {} } } } };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items).to.exist;",
									"    }).to.throw;",
									"});",
									"",
									"pm.test(\"Negative: Missing 'prices' should fail schema validation\", function () {",
									"    const invalid = {",
									"        data: {",
									"            addProductsToCart: {",
									"                cart: { itemsV2: { items: [{ uid: \"abc123\", quantity: 1 }] } }",
									"            }",
									"        }",
									"    };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].prices).to.exist;",
									"    }).to.throw;",
									"});",
									"",
									"pm.test(\"Negative: Missing 'price_including_tax' should fail schema validation\", function () {",
									"    const invalid = {",
									"        data: {",
									"            addProductsToCart: {",
									"                cart: { itemsV2: { items: [{ uid: \"abc123\", quantity: 1, prices: {} }] } }",
									"            }",
									"        }",
									"    };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].prices.price_including_tax).to.exist;",
									"    }).to.throw;",
									"});",
									"",
									"pm.test(\"Negative: Missing 'currency' should fail schema validation\", function () {",
									"    const invalid = {",
									"        data: {",
									"            addProductsToCart: {",
									"                cart: {",
									"                    itemsV2: { items: [{ uid: \"abc123\", quantity: 1, prices: { price_including_tax: { value: 100 } } }] }",
									"                }",
									"            }",
									"        }",
									"    };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].prices.price_including_tax.currency).to.exist;",
									"    }).to.throw;",
									"});",
									"",
									"pm.test(\"Negative: Missing 'value' should fail schema validation\", function () {",
									"    const invalid = {",
									"        data: {",
									"            addProductsToCart: {",
									"                cart: {",
									"                    itemsV2: { items: [{ uid: \"abc123\", quantity: 1, prices: { price_including_tax: { currency: \"CHF\" } } }] }",
									"                }",
									"            }",
									"        }",
									"    };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].prices.price_including_tax.value).to.exist;",
									"    }).to.throw;",
									"});",
									"",
									"// --- Negative Deep Schema Tests (Wrong Data Types) ---",
									"pm.test(\"Negative: uid must be a string\", function () {",
									"    const invalid = {",
									"        data: {",
									"            addProductsToCart: {",
									"                cart: {",
									"                    itemsV2: { items: [{ uid: 12345, quantity: 1, prices: { price_including_tax: { currency: \"CHF\", value: 100 } } }] }",
									"                }",
									"            }",
									"        }",
									"    };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].uid).to.be.a('string');",
									"    }).to.throw;",
									"});",
									"",
									"pm.test(\"Negative: quantity must be a number\", function () {",
									"    const invalid = {",
									"        data: {",
									"            addProductsToCart: {",
									"                cart: {",
									"                    itemsV2: { items: [{ uid: \"abc123\", quantity: \"two\", prices: { price_including_tax: { currency: \"CHF\", value: 100 } } }] }",
									"                }",
									"            }",
									"        }",
									"    };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].quantity).to.be.a('number');",
									"    }).to.throw;",
									"});",
									"",
									"pm.test(\"Negative: prices must be an object\", function () {",
									"    const invalid = {",
									"        data: {",
									"            addProductsToCart: {",
									"                cart: {",
									"                    itemsV2: { items: [{ uid: \"abc123\", quantity: 1, prices: \"not-an-object\" }] }",
									"                }",
									"            }",
									"        }",
									"    };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].prices).to.be.an('object');",
									"    }).to.throw;",
									"});",
									"",
									"pm.test(\"Negative: price_including_tax must be an object\", function () {",
									"    const invalid = {",
									"        data: {",
									"            addProductsToCart: {",
									"                cart: {",
									"                    itemsV2: { items: [{ uid: \"abc123\", quantity: 1, prices: { price_including_tax: \"invalid\" } }] }",
									"                }",
									"            }",
									"        }",
									"    };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].prices.price_including_tax).to.be.an('object');",
									"    }).to.throw;",
									"});",
									"",
									"pm.test(\"Negative: currency must be a string\", function () {",
									"    const invalid = {",
									"        data: {",
									"            addProductsToCart: {",
									"                cart: {",
									"                    itemsV2: { items: [{ uid: \"abc123\", quantity: 1, prices: { price_including_tax: { currency: 123, value: 100 } } }] }",
									"                }",
									"            }",
									"        }",
									"    };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].prices.price_including_tax.currency).to.be.a('string');",
									"    }).to.throw;",
									"});",
									"",
									"pm.test(\"Negative: value must be a number\", function () {",
									"    const invalid = {",
									"        data: {",
									"            addProductsToCart: {",
									"                cart: {",
									"                    itemsV2: { items: [{ uid: \"abc123\", quantity: 1, prices: { price_including_tax: { currency: \"CHF\", value: \"hundred\" } } }] }",
									"                }",
									"            }",
									"        }",
									"    };",
									"    pm.expect(() => {",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].prices.price_including_tax.value).to.be.a('number');",
									"    }).to.throw;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation addProductsToCart($cartId: String!) {\n\taddProductsToCart(\n\t\tcartId: $cartId\n\t\tcartItems: [\n\t\t\t{\n\t\t\t\tquantity: 2\n\t\t\t\tsku: \"414193\"\n\t\t\t}\n\t\t]\n\t) {\n\t\tcart {\n\t\t\titemsV2 {\n\t\t\t\titems {\n\t\t\t\t\tuid\n\t\t\t\t\tquantity\n\t\t\t\t\tprices{\n\t\t\t\t\t\tprice_including_tax{\n\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tuser_errors {\n\t\t\tcode\n\t\t\tmessage\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Quote Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const json = pm.response.json();\r",
									"\r",
									"// -------------------------\r",
									"// Positive Test Cases\r",
									"// -------------------------\r",
									"\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has updateCartItems.cart object\", function () {\r",
									"    pm.expect(json).to.be.an(\"object\");\r",
									"    pm.expect(json.data).to.exist.and.to.be.an(\"object\");\r",
									"    pm.expect(json.data.updateCartItems).to.exist.and.to.be.an(\"object\");\r",
									"    pm.expect(json.data.updateCartItems.cart).to.exist.and.to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"Cart attributes have correct types\", function () {\r",
									"    const cart = json.data.updateCartItems.cart;\r",
									"    pm.expect(cart.total_quantity).to.be.a(\"number\");\r",
									"    pm.expect(cart.prices).to.be.an(\"object\");\r",
									"    pm.expect(cart.itemsV2).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"Prices object schema validation\", function () {\r",
									"    const prices = json.data.updateCartItems.cart.prices;\r",
									"\r",
									"    pm.expect(prices.subtotal_excluding_tax).to.be.an(\"object\");\r",
									"    pm.expect(prices.subtotal_excluding_tax.value).to.be.a(\"number\");\r",
									"\r",
									"    pm.expect(prices.subtotal_with_discount_excluding_tax).to.be.an(\"object\");\r",
									"    pm.expect(prices.subtotal_with_discount_excluding_tax.value).to.be.a(\"number\");\r",
									"\r",
									"    pm.expect(prices.grand_total).to.be.an(\"object\");\r",
									"    pm.expect(prices.grand_total.value).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"ItemsV2 structure is valid\", function () {\r",
									"    const items = json.data.updateCartItems.cart.itemsV2.items;\r",
									"    pm.expect(items).to.be.an(\"array\").that.is.not.empty;\r",
									"\r",
									"    items.forEach(item => {\r",
									"        pm.expect(item.uid).to.be.a(\"string\").and.not.empty;\r",
									"        pm.expect(item.quantity).to.be.a(\"number\").and.to.be.above(0);\r",
									"        pm.expect(item.cost_center).to.be.a(\"string\").and.not.empty;\r",
									"        pm.expect(item.sku_alias).to.be.a(\"string\").and.not.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"// -------------------------\r",
									"// Regex Validations\r",
									"// -------------------------\r",
									"\r",
									"pm.test(\"Regex validations for fields\", function () {\r",
									"    const items = json.data.updateCartItems.cart.itemsV2.items;\r",
									"\r",
									"    const uidRegex = /^[A-Za-z0-9+/=]+$/; // Base64\r",
									"    const costCenterRegex = /^[0-9]{1,10}$/; // digits only\r",
									"    const skuAliasRegex = /^[a-zA-Z0-9-_]+$/; // alphanumeric + - _\r",
									"\r",
									"    items.forEach(item => {\r",
									"        pm.expect(item.uid).to.match(uidRegex, \"UID should be Base64-like\");\r",
									"        pm.expect(item.cost_center).to.match(costCenterRegex, \"Cost center must be numeric\");\r",
									"        pm.expect(item.sku_alias).to.match(skuAliasRegex, \"SKU alias invalid format\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// -------------------------\r",
									"// Negative Test Cases\r",
									"// -------------------------\r",
									"\r",
									"const negativePayloads = [\r",
									"    {\r",
									"        name: \"Missing required field (grand_total)\",\r",
									"        badResponse: {\r",
									"            data: {\r",
									"                updateCartItems: {\r",
									"                    cart: {\r",
									"                        prices: { /* grand_total missing */ }\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        assert: res => pm.expect(res.data.updateCartItems.cart.prices.grand_total, \"grand_total missing\").to.not.exist\r",
									"    },\r",
									"    {\r",
									"        name: \"Wrong data type for total_quantity\",\r",
									"        badResponse: {\r",
									"            data: {\r",
									"                updateCartItems: {\r",
									"                    cart: {\r",
									"                        total_quantity: \"two\"\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        assert: res => pm.expect(res.data.updateCartItems.cart.total_quantity).to.not.be.a(\"number\")\r",
									"    },\r",
									"    {\r",
									"        name: \"Invalid regex for uid\",\r",
									"        badResponse: {\r",
									"            data: {\r",
									"                updateCartItems: {\r",
									"                    cart: {\r",
									"                        itemsV2: {\r",
									"                            items: [{ uid: \"###INVALID###\" }]\r",
									"                        }\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        assert: res => {\r",
									"            const uidRegex = /^[A-Za-z0-9+/=]+$/;\r",
									"            pm.expect(res.data.updateCartItems.cart.itemsV2.items[0].uid).to.not.match(uidRegex);\r",
									"        }\r",
									"    },\r",
									"    {\r",
									"        name: \"Nested object with wrong type in prices\",\r",
									"        badResponse: {\r",
									"            data: {\r",
									"                updateCartItems: {\r",
									"                    cart: {\r",
									"                        prices: {\r",
									"                            grand_total: { value: \"wrongType\" }\r",
									"                        }\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        assert: res => pm.expect(res.data.updateCartItems.cart.prices.grand_total.value).to.not.be.a(\"number\")\r",
									"    }\r",
									"];\r",
									"\r",
									"// Run negative payloads dynamically\r",
									"negativePayloads.forEach(testCase => {\r",
									"    pm.test(`[Negative] ${testCase.name}`, function () {\r",
									"        testCase.assert(testCase.badResponse);\r",
									"    });\r",
									"});\r",
									"\r",
									"// -------------------------\r",
									"// Deep Schema Validation\r",
									"// -------------------------\r",
									"\r",
									"pm.test(\"Deep schema structure check\", function () {\r",
									"    const schema = {\r",
									"        data: {\r",
									"            updateCartItems: {\r",
									"                cart: {\r",
									"                    total_quantity: \"number\",\r",
									"                    prices: {\r",
									"                        subtotal_excluding_tax: { value: \"number\" },\r",
									"                        subtotal_with_discount_excluding_tax: { value: \"number\" },\r",
									"                        grand_total: { value: \"number\" }\r",
									"                    },\r",
									"                    itemsV2: {\r",
									"                        items: [\r",
									"                            {\r",
									"                                uid: \"string\",\r",
									"                                quantity: \"number\",\r",
									"                                cost_center: \"string\",\r",
									"                                sku_alias: \"string\"\r",
									"                            }\r",
									"                        ]\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    };\r",
									"\r",
									"    function validateSchema(obj, schema) {\r",
									"        for (let key in schema) {\r",
									"            pm.expect(obj, `Missing key: ${key}`).to.have.property(key);\r",
									"            if (typeof schema[key] === \"string\") {\r",
									"                pm.expect(obj[key], `Type mismatch at ${key}`).to.be.a(schema[key]);\r",
									"            } else if (Array.isArray(schema[key])) {\r",
									"                pm.expect(obj[key]).to.be.an(\"array\");\r",
									"                if (obj[key].length > 0) {\r",
									"                    validateSchema(obj[key][0], schema[key][0]);\r",
									"                }\r",
									"            } else if (typeof schema[key] === \"object\") {\r",
									"                validateSchema(obj[key], schema[key]);\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"    validateSchema(json, schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set current timestamp for the request\r",
									"pm.environment.set(\"currentTimestamp\", new Date().getTime());\r",
									"\r",
									"// Log the request method and URL for debugging\r",
									"console.log(\"Request Method:\", pm.request.method);\r",
									"console.log(\"Request URL:\", pm.request.url.toString());\r",
									"\r",
									"// Prepare any necessary headers, if needed\r",
									"const customHeaders = {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': pm.environment.get('auth_token')\r",
									"};\r",
									"\r",
									"// Log headers for debugging\r",
									"console.log(\"Request Headers:\", customHeaders);\r",
									"\r",
									"// Set the request body or modify it if necessary\r",
									"let requestBody = pm.request.body.raw;\r",
									"\r",
									"// Log the request body for debugging\r",
									"console.log(\"Request Body:\", requestBody);\r",
									"\r",
									"// Example of how to modify request body if needed\r",
									"// requestBody = JSON.stringify({...JSON.parse(requestBody), additionalField: 'value'});\r",
									"// pm.request.body.raw = requestBody;\r",
									"const uid = pm.environment.get(\"cart_item_uid\");\r",
									"\r",
									"pm.test(\"cart_item_uid is available before Update Cart call\", function () {\r",
									"    pm.expect(uid, \"cart_item_uid missing. Run Add to Cart first.\").to.be.a(\"string\").and.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateCartItems($cartId: String!, $cart_item_uid: ID!) {\n\tupdateCartItems(\n\t\tinput: {\n\t\t\tcart_id: $cartId\n\t\t\tcart_items: [\n\t\t\t\t{\n\t\t\t\t\tcart_item_uid: $cart_item_uid\n\t\t\t\t\tcost_center: \"123\"\n\t\t\t\t\tsku_alias: \"test-sku\"\n\t\t\t\t\tquantity: 2\n\t\t\t\t}\n                \n\t\t\t]\n\t\t}\n\t) {\n        \n\t\tcart {\n            \n\t\t\ttotal_quantity\n            \n\t\t\tprices {\n\t\t\t\tsubtotal_excluding_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tsubtotal_with_discount_excluding_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tgrand_total {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n            \n\t\t\titemsV2 {\n                \n\t\t\t\titems {\n\t\t\t\t\tuid\n\t\t\t\t\tquantity\n\t\t\t\t\tcost_center\n\t\t\t\t\tsku_alias\n\t\t\t\t}\n                \n\t\t\t}\n            \n\t\t}\n        \n\t}\n    \n}\n\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\",\n    \"cart_item_uid\": \"{{cart_item_uid}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Cart Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ====================",
									"// Positive Test Suite",
									"// ====================",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has required fields in the cart object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.cart).to.exist;",
									"    pm.expect(responseData.data.cart).to.have.all.keys('email', 'total_quantity', 'prices', 'itemsV2');",
									"",
									"    pm.expect(responseData.data.cart.prices).to.exist;",
									"    pm.expect(responseData.data.cart.prices).to.have.all.keys(",
									"        'discounts', ",
									"        'subtotal_including_tax', ",
									"        'subtotal_excluding_tax', ",
									"        'subtotal_with_discount_excluding_tax', ",
									"        'grand_total'",
									"    );",
									"    ",
									"    pm.expect(responseData.data.cart.itemsV2).to.exist;",
									"    pm.expect(responseData.data.cart.itemsV2).to.have.property('items').that.is.an('array');",
									"});",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const email = pm.response.json().data.cart.email;",
									"    pm.expect(email).to.be.a('string').and.matches(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
									"});",
									"",
									"pm.test(\"Total quantity is a non-negative integer\", function () {",
									"    const totalQty = pm.response.json().data.cart.total_quantity;",
									"    pm.expect(totalQty).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"pm.test(\"Prices contain valid currency values and amounts\", function () {",
									"    const items = pm.response.json().data.cart.itemsV2.items;",
									"    pm.expect(items, \"Items array is missing\").to.be.an('array').that.is.not.empty;",
									"",
									"    items.forEach((item, index) => {",
									"        pm.expect(item.prices.price.currency, `Item ${index}: Missing price currency`).to.be.a('string').and.not.empty;",
									"        pm.expect(parseFloat(item.prices.price.value), `Item ${index}: Invalid price value`).to.be.at.least(0);",
									"",
									"        pm.expect(parseFloat(item.prices.price_including_tax.value), `Item ${index}: Invalid price_including_tax`).to.be.at.least(0);",
									"",
									"        pm.expect(item.prices.row_total_including_tax.currency, `Item ${index}: Missing row_total_including_tax currency`).to.be.a('string');",
									"        pm.expect(parseFloat(item.prices.row_total_including_tax.value), `Item ${index}: Invalid row_total_including_tax`).to.be.at.least(0);",
									"",
									"        pm.expect(item.prices.row_total.currency, `Item ${index}: Missing row_total currency`).to.be.a('string');",
									"        pm.expect(parseFloat(item.prices.row_total.value), `Item ${index}: Invalid row_total`).to.be.at.least(0);",
									"    });",
									"});",
									"",
									"",
									"// ====================",
									"// Negative Test Suite",
									"// ====================",
									"",
									"pm.test(\"Negative: Missing required fields should break schema\", function () {",
									"    const res = pm.response.json();",
									"    pm.expect(res.data.cart).to.not.have.property('non_existing_field', \"Unexpected extra field found\");",
									"});",
									"",
									"pm.test(\"Negative: Invalid email format should fail regex\", function () {",
									"    const badEmails = [\"plainaddress\", \"no-at.com\", \"test@.com\"];",
									"    badEmails.forEach(email => {",
									"        pm.expect(email).to.not.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, `Invalid email '${email}' passed validation`);",
									"    });",
									"});",
									"",
									"pm.test(\"Negative: Total quantity must reject non-numeric or negative values\", function () {",
									"    const badQuantities = [-5, \"two\", null];",
									"    badQuantities.forEach(qty => {",
									"        pm.expect(typeof qty === \"number\" && qty >= 0, `Invalid total_quantity '${qty}' passed validation`).to.be.false;",
									"    });",
									"});",
									"",
									"pm.test(\"Negative: Currency fields must fail if not 3-letter ISO codes\", function () {",
									"    const badCurrencies = [\"\", \"US\", \"1234\", \"usdchf\"];",
									"    badCurrencies.forEach(curr => {",
									"        pm.expect(curr).to.not.match(/^[A-Z]{3}$/, `Invalid currency '${curr}' passed validation`);",
									"    });",
									"});",
									"",
									"pm.test(\"Negative: Price values must reject wrong types\", function () {",
									"    const badPrices = [\"NaN\", {}, [], null];",
									"    badPrices.forEach(val => {",
									"        pm.expect(typeof val === \"number\" && !isNaN(val), `Invalid price '${JSON.stringify(val)}' passed validation`).to.be.false;",
									"    });",
									"});",
									"",
									"pm.test(\"Negative: Deep nested product object must enforce schema\", function () {",
									"    const product = pm.response.json().data.cart.itemsV2.items[0].product;",
									"    pm.expect(product).to.have.all.keys(\"uid\", \"name\", \"sku\", \"price\");",
									"",
									"    // Ensure nested keys exist",
									"    pm.expect(product.price).to.have.all.keys(\"regularPrice\", \"minimalPrice\");",
									"",
									"    // Validate types",
									"    pm.expect(product.uid).to.be.a('string');",
									"    pm.expect(product.name).to.be.a('string');",
									"    pm.expect(product.sku).to.be.a('string');",
									"    pm.expect(product.price.regularPrice.amount.value).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Negative: Wrong data types at deep levels should fail\", function () {",
									"    const badSamples = [",
									"        { total_quantity: \"five\" },",
									"        { prices: { grand_total: { value: \"abc\" } } },",
									"        { itemsV2: { items: [{ quantity: \"2\" }] } },",
									"        { itemsV2: { items: [{ product: { sku: 12345 } }] } }",
									"    ];",
									"",
									"    badSamples.forEach(sample => {",
									"        if (sample.total_quantity) {",
									"            pm.expect(typeof sample.total_quantity === \"number\", `Invalid total_quantity type passed`).to.be.false;",
									"        }",
									"        if (sample.prices && sample.prices.grand_total) {",
									"            pm.expect(typeof sample.prices.grand_total.value === \"number\", `Invalid grand_total type passed`).to.be.false;",
									"        }",
									"        if (sample.itemsV2 && sample.itemsV2.items[0].quantity) {",
									"            pm.expect(typeof sample.itemsV2.items[0].quantity === \"number\", `Invalid quantity type passed`).to.be.false;",
									"        }",
									"        if (sample.itemsV2 && sample.itemsV2.items[0].product && sample.itemsV2.items[0].product.sku) {",
									"            pm.expect(typeof sample.itemsV2.items[0].product.sku === \"string\", `Invalid SKU type passed`).to.be.false;",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query cart($cartId: String!) {\n\tcart(\n\t\tcart_id: $cartId #refresh_cart: true\n\t) {\n\t\temail\n\t\ttotal_quantity\n\t\tprices {\n\t\t\tdiscounts {\n\t\t\t\tlabel\n\t\t\t\tamount {\n\t\t\t\t\tvalue\n\t\t\t\t\tcurrency\n\t\t\t\t}\n\t\t\t}\n\t\t\tsubtotal_including_tax {\n\t\t\t\tvalue\n\t\t\t}\n\t\t\tsubtotal_excluding_tax {\n\t\t\t\tvalue\n\t\t\t}\n\t\t\tsubtotal_with_discount_excluding_tax {\n\t\t\t\tvalue\n\t\t\t}\n\t\t\tgrand_total {\n\t\t\t\tvalue\n\t\t\t}\n\t\t}\n\t\titemsV2 {\n\t\t\titems {\n\t\t\t\tcost_center\n\t\t\t\tsku_alias\n\n\t\t\t\tquantity\n\t\t\t\tuid\n\t\t\t\tid\n\t\t\t\tproduct {\n\t\t\t\t\tuid\n\t\t\t\t\tname\n\t\t\t\t\tsku\n\t\t\t\t\t#only_x_left_in_stock\n\t\t\t\t\tprice {\n\t\t\t\t\t\tregularPrice {\n\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tminimalPrice {\n\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t... on ConfigurableCartItem {\n\t\t\t\t\tid\n\t\t\t\t\tquantity\n\t\t\t\t\tuid\n\t\t\t\t\tconfigurable_options {\n\t\t\t\t\t\tconfigurable_product_option_uid\n\t\t\t\t\t\tconfigurable_product_option_value_uid\n\t\t\t\t\t\tid\n\t\t\t\t\t\toption_label\n\t\t\t\t\t\tvalue_id\n\t\t\t\t\t\tvalue_label\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprices {\n\t\t\t\t\tprice {\n\t\t\t\t\t\tcurrency\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tprice_including_tax {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\trow_total_including_tax {\n\t\t\t\t\t\tcurrency\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\ttotal_item_discount {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\trow_total {\n\t\t\t\t\t\tcurrency\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tdiscounts {\n\t\t\t\t\t\tlabel\n\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set shipping address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// -------------------- POSITIVE TESTS --------------------",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Validate overall response schema structure\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('object');",
									"    pm.expect(response.data).to.exist.and.to.be.an('object');",
									"    pm.expect(response.data.setShippingAddressesOnCart).to.exist.and.to.be.an('object');",
									"    pm.expect(response.data.setShippingAddressesOnCart.cart).to.exist.and.to.be.an('object');",
									"});",
									"",
									"// -------------------- HELPER VALIDATORS --------------------",
									"function validateOptionalString(field, label) {",
									"    if (field !== null && field !== undefined) {",
									"        pm.expect(field, `${label} must be a string`).to.be.a('string');",
									"    }",
									"}",
									"",
									"function validateOptionalArray(field, label) {",
									"    if (field !== null && field !== undefined) {",
									"        pm.expect(field, `${label} must be an array`).to.be.an('array');",
									"    }",
									"}",
									"",
									"function validateOptionalNumber(field, label) {",
									"    if (field !== null && field !== undefined) {",
									"        pm.expect(field, `${label} must be a number`).to.be.a('number');",
									"    }",
									"}",
									"",
									"function validateOptionalObject(field, label) {",
									"    if (field !== null && field !== undefined) {",
									"        pm.expect(field, `${label} must be an object`).to.be.an('object');",
									"    }",
									"}",
									"",
									"// ✅ Telephone regex: allow E.164, local, or empty string",
									"function validateTelephone(tel) {",
									"    if (tel === null || tel === undefined || tel.trim() === \"\") {",
									"        return true;",
									"    }",
									"    const e164 = /^\\+?[0-9]{7,15}$/;",
									"    const local = /^[0-9 ]{7,20}$/;",
									"    return e164.test(tel) || local.test(tel);",
									"}",
									"",
									"// ✅ Region: allow missing or null",
									"function validateRegion(region) {",
									"    if (region === null || region === undefined) {",
									"        return true;",
									"    }",
									"    validateOptionalString(region.code, \"region.code\");",
									"    validateOptionalString(region.label, \"region.label\");",
									"    return true;",
									"}",
									"",
									"// -------------------- VALIDATIONS --------------------",
									"pm.test(\"Validate prices object structure\", function () {",
									"    const cart = pm.response.json().data.setShippingAddressesOnCart.cart;",
									"    [\"subtotal_excluding_tax\", \"subtotal_with_discount_excluding_tax\", \"grand_total\"].forEach(field => {",
									"        validateOptionalObject(cart.prices[field], field);",
									"        validateOptionalNumber(cart.prices[field]?.value, `${field}.value`);",
									"    });",
									"});",
									"",
									"pm.test(\"Validate itemsV2 object\", function () {",
									"    const items = pm.response.json().data.setShippingAddressesOnCart.cart.itemsV2.items;",
									"    validateOptionalArray(items, \"itemsV2.items\");",
									"",
									"    if (items && items.length > 0) {",
									"        const item = items[0]; // only first item",
									"        validateOptionalString(item.uid, \"item.uid\");",
									"        validateOptionalObject(item.prices, \"item.prices\");",
									"        validateOptionalString(item.product?.sku, \"item.product.sku\");",
									"    }",
									"});",
									"",
									"pm.test(\"Validate shipping addresses\", function () {",
									"    const addresses = pm.response.json().data.setShippingAddressesOnCart.cart.shipping_addresses;",
									"    validateOptionalArray(addresses, \"shipping_addresses\");",
									"",
									"    if (addresses && addresses.length > 0) {",
									"        const address = addresses[0]; // only first address",
									"        validateOptionalString(address.uid, \"address.uid\");",
									"        validateOptionalString(address.firstname, \"address.firstname\");",
									"        validateOptionalString(address.lastname, \"address.lastname\");",
									"        validateOptionalString(address.company, \"address.company\");",
									"        validateOptionalArray(address.street, \"address.street\");",
									"        validateOptionalString(address.city, \"address.city\");",
									"        pm.expect(validateTelephone(address.telephone), `Invalid telephone: ${address.telephone}`).to.be.true;",
									"        validateOptionalString(address.postcode, \"address.postcode\");",
									"        validateRegion(address.region);",
									"        validateOptionalObject(address.country, \"address.country\");",
									"",
									"        // available_shipping_methods",
									"        validateOptionalArray(address.available_shipping_methods, \"available_shipping_methods\");",
									"        if (address.available_shipping_methods && address.available_shipping_methods.length > 0) {",
									"            const method = address.available_shipping_methods[0];",
									"            validateOptionalObject(method.amount, \"method.amount\");",
									"            validateOptionalNumber(method.amount?.value, \"method.amount.value\");",
									"            if (method.available !== null && method.available !== undefined) {",
									"                pm.expect(method.available, \"method.available must be boolean\").to.be.a(\"boolean\");",
									"            }",
									"        }",
									"    }",
									"});",
									"",
									"pm.test(\"Validate billing address\", function () {",
									"    const billing = pm.response.json().data.setShippingAddressesOnCart.cart.billing_address;",
									"    validateOptionalString(billing.uid, \"billing.uid\");",
									"    validateOptionalString(billing.firstname, \"billing.firstname\");",
									"    validateOptionalString(billing.lastname, \"billing.lastname\");",
									"    validateOptionalString(billing.company, \"billing.company\");",
									"    validateOptionalArray(billing.street, \"billing.street\");",
									"    validateOptionalString(billing.city, \"billing.city\");",
									"    pm.expect(validateTelephone(billing.telephone), `Invalid billing telephone: ${billing.telephone}`).to.be.true;",
									"    validateOptionalString(billing.postcode, \"billing.postcode\");",
									"    validateRegion(billing.region);",
									"    validateOptionalObject(billing.country, \"billing.country\");",
									"});",
									"",
									"// -------------------- NEGATIVE TESTS --------------------",
									"pm.test(\"Negative: Missing cart object should break schema\", function () {",
									"    const brokenResponse = { data: { setShippingAddressesOnCart: {} } };",
									"    pm.expect(brokenResponse.data.setShippingAddressesOnCart.cart).to.be.undefined;",
									"});",
									"",
									"pm.test(\"Negative: Invalid data types at deep levels\", function () {",
									"    const invalidCart = {",
									"        prices: {",
									"            subtotal_excluding_tax: { value: \"seven hundred\" }, // should be number",
									"            grand_total: { value: true }",
									"        },",
									"        itemsV2: {",
									"            items: [{ uid: 12345, product: { sku: 98765 } }]",
									"        },",
									"        shipping_addresses: [{",
									"            firstname: 456,",
									"            postcode: \"abcd\",",
									"            telephone: \"abc-123\",",
									"            region: { code: 123, label: false }",
									"        }]",
									"    };",
									"",
									"    pm.expect(invalidCart.prices.subtotal_excluding_tax.value).to.not.be.a('number');",
									"    pm.expect(invalidCart.itemsV2.items[0].uid).to.not.be.a('string');",
									"    pm.expect(invalidCart.shipping_addresses[0].firstname).to.not.be.a('string');",
									"    pm.expect(invalidCart.shipping_addresses[0].postcode).to.not.match(/^[0-9]{4,6}$/);",
									"    pm.expect(validateTelephone(invalidCart.shipping_addresses[0].telephone)).to.be.false;",
									"});",
									"",
									"pm.test(\"Negative: Regex invalidations\", function () {",
									"    const badAddress = {",
									"        postcode: \"12AB\",",
									"        telephone: \"++12345\",",
									"        country: { code: \"ZZZ\" },",
									"        uid: \"$$$$\"",
									"    };",
									"    pm.expect(badAddress.postcode).to.not.match(/^[0-9]{4,6}$/);",
									"    pm.expect(validateTelephone(badAddress.telephone)).to.be.false;",
									"    pm.expect(badAddress.country.code).to.not.match(/^[A-Z]{2}$/);",
									"    pm.expect(badAddress.uid).to.not.match(/^[A-Za-z0-9+/=]+$/);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setShippingAddressesOnCart($cartId: String!) {\n\tsetShippingAddressesOnCart(\n\t\tinput: {\n\t\t\tcart_id: $cartId\n\t\t\tshipping_addresses: {\n\t\t\t\taddress: {\n\t\t\t\t\tfirstname: \"Chandu\"\n\t\t\t\t\tlastname: \"Ch\"\n\t\t\t\t\tcompany: \"Adobe india Pvt. ltd.\"\n\t\t\t\t\tstreet: [\"8450 North Fwy\", \"\"]\n\t\t\t\t\tcity: \"Switzerland\"\n\t\t\t\t\tregion: \"ZH\"\n\t\t\t\t\tpostcode: \"8001\"\n\t\t\t\t\tcountry_code: \"CH\"\n\t\t\t\t\ttelephone: \"1234567890\"\n\t\t\t\t\tsave_in_address_book: false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t) {\n\t\tcart {\n\t\t\tprices {\n\t\t\t\tsubtotal_excluding_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tsubtotal_with_discount_excluding_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tgrand_total {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n\t\t\titemsV2 {\n\t\t\t\titems {\n\t\t\t\t\tuid\n\t\t\t\t\tprices {\n\t\t\t\t\t\tprice {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfixed_product_taxes {\n\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlabel\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprice_including_tax {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t\trow_total {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t\trow_total_including_tax {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttotal_item_discount {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tproduct {\n\t\t\t\t\t\tsku\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tshipping_addresses {\n\t\t\t\tuid\n\t\t\t\tfirstname\n\t\t\t\tlastname\n\t\t\t\tcompany\n\t\t\t\tstreet\n\t\t\t\tcity\n\t\t\t\tregion {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpostcode\n\t\t\t\ttelephone\n\t\t\t\tcountry {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpickup_location_code\n\t\t\t\tavailable_shipping_methods {\n\t\t\t\t\tamount {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tavailable\n\t\t\t\t\tcarrier_code\n\t\t\t\t\tcarrier_title\n\t\t\t\t\tmethod_code\n\t\t\t\t\tmethod_title\n\t\t\t\t\tprice_excl_tax {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tprice_incl_tax {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbilling_address {\n\t\t\t\tuid\n\t\t\t\tfirstname\n\t\t\t\tlastname\n\t\t\t\tcompany\n\t\t\t\tstreet\n\t\t\t\tcity\n\t\t\t\tregion {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpostcode\n\t\t\t\ttelephone\n\t\t\t\tcountry {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set billing address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has a valid Content-Type of application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"The cart object contains required properties\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data, \"Data object is missing\").to.exist;",
									"    pm.expect(responseData.data.setBillingAddressOnCart, \"setBillingAddressOnCart is missing\").to.exist;",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart, \"Cart object is missing\").to.exist;",
									"    ",
									"    const cart = responseData.data.setBillingAddressOnCart.cart;",
									"    pm.expect(cart).to.have.all.keys('itemsV2', 'prices', 'shipping_addresses', 'billing_address');",
									"});",
									"",
									"pm.test(\"Validate that grand_total, subtotal_excluding_tax, and subtotal_including_tax are non-negative numbers\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    ",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart.prices.grand_total.value).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart.prices.subtotal_excluding_tax.value).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart.prices.subtotal_including_tax.value).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"pm.test(\"Shipping addresses and billing address contain required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Validate response structure",
									"    pm.expect(responseData, \"Response data is missing\").to.be.an('object');",
									"    pm.expect(responseData.data, \"Data object is missing\").to.exist;",
									"    pm.expect(responseData.data.setBillingAddressOnCart, \"setBillingAddressOnCart is missing\").to.exist;",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart, \"Cart object is missing\").to.exist;",
									"",
									"    const cart = responseData.data.setBillingAddressOnCart.cart;",
									"    const shippingAddresses = cart.shipping_addresses;",
									"    const billingAddress = cart.billing_address;",
									"",
									"    // Log full response for debugging",
									"    console.log(\"Full cart response:\", JSON.stringify(cart, null, 2));",
									"",
									"    // Validate shipping addresses",
									"    pm.expect(shippingAddresses, \"Shipping addresses are missing or not an array\").to.be.an('array');",
									"    pm.expect(shippingAddresses.length, \"Shipping addresses array is empty\").to.be.at.least(1, \"At least one shipping address is required\");",
									"",
									"    shippingAddresses.forEach((address, index) => {",
									"        // Log the actual address for debugging",
									"        console.log(`Shipping address ${index}:`, JSON.stringify(address, null, 2));",
									"",
									"        // Define required keys",
									"        const requiredKeys = ['uid', 'firstname', 'lastname', 'street', 'city', 'region', 'postcode', 'telephone', 'country'];",
									"",
									"        // Check if address is an object and has required keys",
									"        pm.expect(address, `Shipping address ${index} is not an object`).to.be.an('object');",
									"        const missingKeys = requiredKeys.filter(key => !Object.keys(address).includes(key));",
									"        pm.expect(missingKeys, `Shipping address ${index} is missing required keys: ${missingKeys.join(', ')}`).to.be.empty;",
									"",
									"        // Validate field types and content",
									"        pm.expect(address.uid, `Shipping address ${index} uid is invalid`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(address.firstname, `Shipping address ${index} firstname is invalid`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(address.lastname, `Shipping address ${index} lastname is invalid`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(address.street, `Shipping address ${index} street is invalid`).to.be.an('array').that.is.not.empty;",
									"        pm.expect(address.city, `Shipping address ${index} city is invalid`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(address.region, `Shipping address ${index} region is invalid`).to.be.an('object').that.has.all.keys('code', 'label');",
									"        pm.expect(address.postcode, `Shipping address ${index} postcode is invalid`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(address.telephone, `Shipping address ${index} telephone is invalid`).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(address.country, `Shipping address ${index} country is invalid`).to.be.an('object').that.has.all.keys('code', 'label');",
									"    });",
									"",
									"    // Validate billing address",
									"    pm.expect(billingAddress, \"Billing address is missing\").to.exist.and.to.be.an('object');",
									"    console.log(\"Billing address:\", JSON.stringify(billingAddress, null, 2));",
									"",
									"    // Check required keys for billing address",
									"    const requiredKeys = ['uid', 'firstname', 'lastname', 'street', 'city', 'region', 'postcode', 'telephone', 'country'];",
									"    const missingBillingKeys = requiredKeys.filter(key => !Object.keys(billingAddress).includes(key));",
									"    pm.expect(missingBillingKeys, `Billing address is missing required keys: ${missingBillingKeys.join(', ')}`).to.be.empty;",
									"",
									"    // Validate field types and content",
									"    pm.expect(billingAddress.uid, \"Billing address uid is invalid\").to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"    pm.expect(billingAddress.firstname, \"Billing address firstname is invalid\").to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"    pm.expect(billingAddress.lastname, \"Billing address lastname is invalid\").to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"    pm.expect(billingAddress.street, \"Billing address street is invalid\").to.be.an('array').that.is.not.empty;",
									"    pm.expect(billingAddress.city, \"Billing address city is invalid\").to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"    pm.expect(billingAddress.region, \"Billing address region is invalid\").to.be.an('object').that.has.all.keys('code', 'label');",
									"    pm.expect(billingAddress.postcode, \"Billing address postcode is invalid\").to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"    pm.expect(billingAddress.telephone, \"Billing address telephone is invalid\").to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"    pm.expect(billingAddress.country, \"Billing address country is invalid\").to.be.an('object').that.has.all.keys('code', 'label');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setBillingAddressOnCart($cartId: String!){\n\tsetBillingAddressOnCart(\n\t\tinput: {\n\t\t\tcart_id: $cartId\n\t\t\tbilling_address: \n\t\t\t\t{\n\t\t\t\t\tsame_as_shipping: true\n# \t\t\t\t\taddress: {\n# \t\t\t\t\t\tfirstname: \"Astik\"\n# \t\t\t\t\t\tlastname: \"Unagar\"\n# \t\t\t\t\t\tcompany: \"Adobe india Pvt. ltd.\"\n# \t\t\t\t\t\tstreet: [\"9th cross\", \"3rd main, 6th Stage, Brookfield\"]\n# \t\t\t\t\t\tcity: \"Austin\"\n# \t\t\t\t\t\tregion: \"TX\"\n# \t\t\t\t\t\tpostcode: \"75812\"\n# \t\t\t\t\t\tcountry_code: \"US\"\n# \t\t\t\t\t\ttelephone: \"1234567890\"\n# \t\t\t\t\t\tsave_in_address_book: false\n# \t\t\t\t\t}\n\t\t\t\t\t#use_for_shipping: true\n\t\t\t\t}\n\t\t}\n\t) {\n\t\tcart {\n\t\t\titemsV2{\n\t\t\t\titems{\n\t\t\t\t\tcost_center\n\t\t\t\t\tsku_alias\n\t\t\t\t}\n\t\t\t}\n\t\t\tprices {\n\t\t\t\tgrand_total {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tsubtotal_excluding_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tsubtotal_including_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n\t\t\tshipping_addresses {\n\t\t\t\tuid\n\t\t\t\tfirstname\n\t\t\t\tlastname\n\t\t\t\tcompany\n\t\t\t\tstreet\n\t\t\t\tcity\n\t\t\t\tregion {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpostcode\n\t\t\t\ttelephone\n\t\t\t\tcountry {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpickup_location_code\n\t\t\t}\n\t\t\tbilling_address {\n\t\t\t\tuid\n\t\t\t\tfirstname\n\t\t\t\tlastname\n\t\t\t\tcompany\n\t\t\t\tstreet\n\t\t\t\tcity\n\t\t\t\tregion {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpostcode\n\t\t\t\ttelephone\n\t\t\t\tcountry {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set shipping method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields: grand_total and shipping_addresses\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart).to.exist;",
									"",
									"    const cart = responseData.data.setShippingMethodsOnCart.cart;",
									"    pm.expect(cart).to.exist;",
									"    pm.expect(cart.prices).to.exist;",
									"    pm.expect(cart.prices.grand_total).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.shipping_addresses).to.exist.and.to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Grand total value is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.prices.grand_total.value).to.be.a('number').and.to.be.at.least(0, \"Grand total value should be non-negative\");",
									"});",
									"",
									"",
									"pm.test(\"Shipping addresses array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.shipping_addresses).to.exist.and.to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"Selected shipping method has valid carrier_code and method_code as non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.shipping_addresses).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.data.setShippingMethodsOnCart.cart.shipping_addresses.forEach(address => {",
									"        pm.expect(address.selected_shipping_method.carrier_code).to.exist.and.to.be.a('string').that.is.not.empty;",
									"        pm.expect(address.selected_shipping_method.method_code).to.exist.and.to.be.a('string').that.is.not.empty;",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setShippingMethodsOnCart(\n\t$cartId: String!\n) {\n  setShippingMethodsOnCart(input: {\n    cart_id: $cartId\n    shipping_methods: [\n\t\t\t{\n\t\t\t\tcarrier_code: \"rsdelivery\"\n\t\t\t\tmethod_code: \"13\"\n\t\t\t}\n    ]\n  }) {\n    cart {\n\t\t\tprices{\n\t\t\t\tgrand_total{\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n      shipping_addresses {\n        selected_shipping_method {\n          carrier_code\n          method_code\n          carrier_title\n          method_title\n        }\n      }\n    }\n  }\n}",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set payment method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response contains the data field\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('data');",
									"});",
									"",
									"",
									"pm.test(\"The selected_payment_method property must be present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setPaymentMethodOnCart).to.exist;",
									"    pm.expect(responseData.data.setPaymentMethodOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setPaymentMethodOnCart.cart.selected_payment_method).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"The payment method code must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.setPaymentMethodOnCart.cart.selected_payment_method.code).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setPaymentMethodOnCart($cartId: String!)\n{\n\tsetPaymentMethodOnCart(\n\t\tinput: {\n\t\t\tcart_id: $cartId\n\t\t\tpayment_method: {\n\t\t\t\tcode: \"checkmo\"\n\t\t\t}\n\t\t}\n\t) {\n\t\tcart {\n\t\t\tselected_payment_method {\n\t\t\t\tcode\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "place order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Order ID is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.placeOrder.orderV2.id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Order ID should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.placeOrder.orderV2.email).to.exist;",
									"    pm.expect(responseData.data.placeOrder.orderV2.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
									"});",
									"",
									"",
									"pm.test(\"Items array is present and contains at least one product item\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.nested.property('data.placeOrder.orderV2.items').that.is.an('array').and.to.have.length.of.at.least(1, \"Items array should contain at least one product item\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation placeOrder(\n\t$cartId: String!\n) {\n  placeOrder(input: {cart_id: $cartId}) {\n    errors{\n        code\n        message\n    }\n    orderV2{\n\t\t\tid\n            number\n\t\t\temail\n\t\t\titems{\n\t\t\t\tproduct_name\n\t\t\t\tproduct{\n\t\t\t\t\tsku\n\t\t\t\t}\n\t\t\t\tstatus\n\t\t\t}\n\t\t}\n  }\n}",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ==============================",
									"// updateCustomerOrders — Postman Tests (fixed negative expectations)",
									"// Validates ONLY the latest order (by timestamp) and includes negative tests",
									"// ==============================",
									"",
									"const res = pm.response.json();",
									"",
									"// Basic sanity checks",
									"pm.test(\"Response status is 200\", () => pm.expect(pm.response.code).to.equal(200));",
									"pm.test(\"Response body contains customerOrders.items array\", () => {",
									"    pm.expect(res).to.be.an('object');",
									"    pm.expect(res.data).to.be.an('object');",
									"    pm.expect(res.data.customerOrders).to.be.an('object');",
									"    pm.expect(res.data.customerOrders.items).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"const orders = res.data.customerOrders.items;",
									"",
									"// --------- helper: parse created_at robustly ----------",
									"function parseCreatedAt(ts) {",
									"    if (!ts || typeof ts !== 'string') return null;",
									"    // Expect format \"YYYY-MM-DD HH:MM:SS\"",
									"    const m = ts.match(/^(\\d{4})-(\\d{2})-(\\d{2})\\s+(\\d{2}):(\\d{2}):(\\d{2})$/);",
									"    if (m) {",
									"        const year = +m[1], month = +m[2] - 1, day = +m[3],",
									"              hour = +m[4], min = +m[5], sec = +m[6];",
									"        return new Date(Date.UTC(year, month, day, hour, min, sec));",
									"    }",
									"    const d = new Date(ts);",
									"    return isNaN(d.getTime()) ? null : d;",
									"}",
									"",
									"// --------- find the latest order by parsed timestamp ----------",
									"let maxTime = -Infinity;",
									"let latestIndex = 0;",
									"",
									"orders.forEach((o, idx) => {",
									"    const dt = parseCreatedAt(o.created_at);",
									"    if (dt && dt.getTime() > maxTime) {",
									"        maxTime = dt.getTime();",
									"        latestIndex = idx;",
									"    }",
									"});",
									"",
									"// Sanity: latestIndex must point to an order",
									"pm.test(\"Found a latest order index\", () => {",
									"    pm.expect(typeof latestIndex).to.equal('number');",
									"    pm.expect(orders[latestIndex]).to.exist;",
									"});",
									"",
									"const latestOrder = orders[latestIndex];",
									"",
									"// ------------------- Positive validations for latest order -------------------",
									"pm.test(\"Latest order selected (structure & types)\", function () {",
									"    pm.expect(latestOrder).to.be.an('object');",
									"    pm.expect(latestOrder).to.have.property('created_at').that.is.a('string');",
									"    pm.expect(latestOrder).to.have.property('id').that.is.a('string');",
									"    pm.expect(latestOrder).to.have.property('increment_id').that.is.a('string');",
									"    pm.expect(latestOrder).to.have.property('status').that.is.a('string');",
									"    pm.expect(latestOrder).to.have.property('grand_total').that.is.a('number');",
									"    pm.expect(latestOrder).to.have.property('total').that.is.an('object');",
									"    pm.expect(latestOrder.total).to.have.property('mop_header_discount').that.is.an('object');",
									"    pm.expect(latestOrder.total).to.have.property('ov_header_discount').that.is.an('object');",
									"});",
									"",
									"pm.test(\"created_at matches expected format YYYY-MM-DD HH:MM:SS and parsed OK\", function () {",
									"    const createdAt = latestOrder.created_at;",
									"    pm.expect(createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2}$/, \"created_at format mismatch\");",
									"    const parsed = parseCreatedAt(createdAt);",
									"    pm.expect(parsed, \"created_at failed to parse into Date\").to.be.instanceOf(Date);",
									"});",
									"",
									"pm.test(\"grand_total and nested discount amounts are numeric and non-negative\", function () {",
									"    pm.expect(latestOrder.grand_total).to.be.a('number').and.to.be.at.least(0);",
									"    const mop = latestOrder.total.mop_header_discount;",
									"    const ov = latestOrder.total.ov_header_discount;",
									"    pm.expect(mop.amount.value).to.be.a('number');",
									"    pm.expect(ov.amount.value).to.be.a('number');",
									"    pm.expect(mop.amount.value).to.be.at.least(0);",
									"    pm.expect(ov.amount.value).to.be.at.least(0);",
									"});",
									"",
									"pm.test(\"Currency codes for discounts are CHF\", function () {",
									"    const mopCurrency = latestOrder.total.mop_header_discount.amount.currency;",
									"    const ovCurrency = latestOrder.total.ov_header_discount.amount.currency;",
									"    pm.expect(mopCurrency).to.be.a('string').and.to.equal('CHF');",
									"    pm.expect(ovCurrency).to.be.a('string').and.to.equal('CHF');",
									"});",
									"",
									"// Regex checks",
									"pm.test(\"id & increment_id are numeric strings; created_at regex\", function () {",
									"    pm.expect(latestOrder.id).to.match(/^\\d+$/, \"id should be digits\");",
									"    pm.expect(latestOrder.increment_id).to.match(/^\\d+$/, \"increment_id should be digits\");",
									"    pm.expect(latestOrder.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2}$/, \"created_at must follow YYYY-MM-DD HH:MM:SS\");",
									"});",
									"",
									"// ------------------- Assert latestOrder has the maximum created_at ----------",
									"pm.test(\"Latest order's created_at is the maximum across all orders\", function () {",
									"    const allTimes = orders.map(o => parseCreatedAt(o.created_at)?.getTime() || -Infinity);",
									"    const observedMax = Math.max.apply(null, allTimes);",
									"    const latestTime = parseCreatedAt(latestOrder.created_at).getTime();",
									"    pm.expect(latestTime).to.eql(observedMax, `Expected latestOrder.created_at (${latestOrder.created_at}) to be the maximum timestamp`);",
									"});",
									"",
									"// ------------------- Schema-style deep validator for an order -------------------",
									"function validateOrderSchema(order) {",
									"    const errors = [];",
									"",
									"    if (!order || typeof order !== 'object') {",
									"        errors.push(\"order is not an object\");",
									"        return errors;",
									"    }",
									"    // required top-level fields",
									"    ['created_at', 'id', 'increment_id', 'status', 'grand_total', 'total'].forEach(k => {",
									"        if (!(k in order)) errors.push(`missing ${k}`);",
									"    });",
									"",
									"    // created_at format",
									"    if (order.created_at && !/^\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2}$/.test(order.created_at)) {",
									"        errors.push(\"created_at invalid format\");",
									"    }",
									"",
									"    // grand_total numeric",
									"    if ('grand_total' in order && typeof order.grand_total !== 'number') {",
									"        errors.push(\"grand_total not a number\");",
									"    }",
									"",
									"    // total object & nested structure",
									"    if (order.total && typeof order.total === 'object') {",
									"        const check = (node, name) => {",
									"            if (!node || typeof node !== 'object') {",
									"                errors.push(`${name} missing or not an object`);",
									"                return;",
									"            }",
									"            if (!node.amount || typeof node.amount !== 'object') {",
									"                errors.push(`${name}.amount missing or not object`);",
									"                return;",
									"            }",
									"            if (typeof node.amount.value !== 'number') errors.push(`${name}.amount.value must be number`);",
									"            if (typeof node.amount.currency !== 'string') errors.push(`${name}.amount.currency must be string`);",
									"        };",
									"        check(order.total.mop_header_discount, 'total.mop_header_discount');",
									"        check(order.total.ov_header_discount, 'total.ov_header_discount');",
									"    } else {",
									"        errors.push(\"total missing or not object\");",
									"    }",
									"",
									"    return errors;",
									"}",
									"",
									"pm.test(\"Latest order deep schema validation (no errors)\", function () {",
									"    const errors = validateOrderSchema(latestOrder);",
									"    pm.expect(errors.length, `Schema errors: ${errors.join('; ')}`).to.equal(0);",
									"});",
									"",
									"// ------------------- NEGATIVE TESTS (parameterized) -------------------",
									"// These simulate \"bad\" order payloads and assert the validator flags them invalid.",
									"",
									"const negativeCases = [",
									"    {",
									"        name: \"Missing required top-level field (id)\",",
									"        mutate: (o) => { const c = JSON.parse(JSON.stringify(o)); delete c.id; return c; },",
									"        expectErrorContains: \"missing id\"",
									"    },",
									"    {",
									"        name: \"created_at wrong format\",",
									"        mutate: (o) => { const c = JSON.parse(JSON.stringify(o)); c.created_at = \"2025/09/02\"; return c; },",
									"        expectErrorContains: \"created_at invalid format\"",
									"    },",
									"    {",
									"        name: \"grand_total wrong type (string)\",",
									"        mutate: (o) => { const c = JSON.parse(JSON.stringify(o)); c.grand_total = \"one thousand\"; return c; },",
									"        expectErrorContains: \"grand_total not a number\"",
									"    },",
									"    {",
									"        name: \"Missing nested amount.currency\",",
									"        mutate: (o) => {",
									"            const c = JSON.parse(JSON.stringify(o));",
									"            if (c.total && c.total.mop_header_discount && c.total.mop_header_discount.amount) {",
									"                delete c.total.mop_header_discount.amount.currency;",
									"            }",
									"            return c;",
									"        },",
									"        // match the exact validator message produced for missing/invalid currency",
									"        expectErrorContains: \"total.mop_header_discount.amount.currency must be string\"",
									"    },",
									"    {",
									"        name: \"invalid id (non-numeric)\",",
									"        mutate: (o) => { const c = JSON.parse(JSON.stringify(o)); c.id = \"ABC123\"; return c; },",
									"        // validation adds an explicit 'id regex failed' flag below, so expect that",
									"        expectErrorContains: \"id regex failed\"",
									"    },",
									"    {",
									"        name: \"invalid currency code\",",
									"        mutate: (o) => { const c = JSON.parse(JSON.stringify(o)); ",
									"            if (c.total && c.total.ov_header_discount && c.total.ov_header_discount.amount) {",
									"                c.total.ov_header_discount.amount.currency = \"USD\";",
									"            }",
									"            return c; ",
									"        },",
									"        expectErrorContains: \"currency mismatch\"",
									"    }",
									"];",
									"",
									"negativeCases.forEach(tc => {",
									"    pm.test(`[Negative] ${tc.name}`, function () {",
									"        const bad = tc.mutate(latestOrder);",
									"",
									"        // run generic schema validator",
									"        const errors = validateOrderSchema(bad);",
									"",
									"        // run some extra checks so the negative tests are explicit & strict",
									"        let extraFlags = [];",
									"",
									"        // explicit regex checks that should fail for mutated cases",
									"        if (bad.id && !/^\\d+$/.test(bad.id)) extraFlags.push(\"id regex failed\");",
									"        if (bad.increment_id && !/^\\d+$/.test(bad.increment_id)) extraFlags.push(\"increment_id regex failed\");",
									"        if (bad.created_at && !/^\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2}$/.test(bad.created_at)) extraFlags.push(\"created_at format failed\");",
									"",
									"        // currency strict check",
									"        try {",
									"            const ovCur = bad.total && bad.total.ov_header_discount && bad.total.ov_header_discount.amount && bad.total.ov_header_discount.amount.currency;",
									"            const mopCur = bad.total && bad.total.mop_header_discount && bad.total.mop_header_discount.amount && bad.total.mop_header_discount.amount.currency;",
									"            if (ovCur && ovCur !== 'CHF') extraFlags.push(\"currency mismatch\");",
									"            if (mopCur && mopCur !== 'CHF') extraFlags.push(\"currency mismatch\");",
									"        } catch (e) {",
									"            // ignore",
									"        }",
									"",
									"        const combined = errors.concat(extraFlags);",
									"        const combinedText = combined.join(' | ').toLowerCase();",
									"",
									"        // Expect at least one error/flag for negative case",
									"        pm.expect(combined.length, `Expected negative case to produce errors/flags. Detected: ${combined.join('; ') || 'NONE'}`).to.be.above(0);",
									"",
									"        // If user supplied an expected substring, assert it's included in either errors or flags",
									"        if (tc.expectErrorContains) {",
									"            const expected = tc.expectErrorContains.replace(/\\s+/g, ' ').toLowerCase();",
									"            pm.expect(combinedText, `Expected error to contain \"${tc.expectErrorContains}\"`).to.include(expected);",
									"        }",
									"    });",
									"});",
									"",
									"// Additional negative test: wrong data types deep in prices",
									"pm.test(\"[Negative] price nested value wrong type should fail\", function () {",
									"    const bad = JSON.parse(JSON.stringify(latestOrder));",
									"    // simulate malformed nested value",
									"    bad.total.ov_header_discount.amount.value = \"not-a-number\";",
									"    const errors = validateOrderSchema(bad);",
									"    pm.expect(errors.length).to.be.above(0);",
									"    pm.expect(typeof bad.total.ov_header_discount.amount.value).to.not.equal('number');",
									"});",
									"",
									"// Final: log which order is treated as latest for visibility",
									"console.log(\"Orders count:\", orders.length, \"Latest index:\", latestIndex, \"Latest order id:\", latestOrder.id, \"created_at:\", latestOrder.created_at);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query CustomerOrders {\n    customerOrders {\n        items {\n            created_at\n            \n            \n            id\n            increment_id\n            status\n            blanket_order\n            cost_center\n            grand_total\n            total {\n                mop_header_discount {\n                    amount {\n                        currency\n                        value\n                    }\n                    label\n                }\n                ov_header_discount {\n                    amount {\n                        currency\n                        value\n                    }\n                    label\n                }\n            }\n        }\n    }\n}",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PlaceOrder_Guest User",
			"item": [
				{
					"name": "create guest cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json(); ",
									"pm.environment.set(\"cartId\", responseJson.data.createGuestCart.cart.id);",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.createGuestCart).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Cart ID must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.createGuestCart).to.exist;",
									"    pm.expect(responseData.data.createGuestCart.cart).to.exist;",
									"    pm.expect(responseData.data.createGuestCart.cart.id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Cart ID should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createGuestCart($input: CreateGuestCartInput) {\n  createGuestCart(input: $input) {\n    cart {\n      id\n    }\n  }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set guest email on cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the structure of the 'setGuestEmailOnCart' object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.data.setGuestEmailOnCart).to.exist.and.to.be.an('object');",
									"    ",
									"    const cart = responseData.data.setGuestEmailOnCart.cart;",
									"    pm.expect(cart).to.exist.and.to.be.an('object');",
									"    ",
									"    pm.expect(cart.email).to.exist.and.to.be.a('string');",
									"    pm.expect(cart.id).to.exist.and.to.be.a('string');",
									"    pm.expect(cart.is_virtual).to.exist.and.to.be.a('boolean');",
									"    pm.expect(cart.total_quantity).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    ",
									"    const email = responseData.data.setGuestEmailOnCart.cart.email;",
									"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
									"    ",
									"    pm.expect(email).to.match(emailRegex, \"Email format is invalid\");",
									"});",
									"",
									"",
									"pm.test(\"Cart ID must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setGuestEmailOnCart).to.exist;",
									"    pm.expect(responseData.data.setGuestEmailOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setGuestEmailOnCart.cart.id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Cart ID should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Total quantity is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setGuestEmailOnCart).to.exist;",
									"    pm.expect(responseData.data.setGuestEmailOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setGuestEmailOnCart.cart.total_quantity).to.be.a('number').and.to.be.at.least(0, \"Total quantity should be a non-negative integer\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setGuestEmailOnCart ($cartId: String!){\nsetGuestEmailOnCart(\n        input: { cart_id: $cartId, email: \"cchatla@adobe.com\" }\n    ) {\n        cart {\n            email\n           \n            id\n            is_virtual\n            \n            total_quantity\n        }\n    }\n}",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Cart Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Response contains required fields in the addProductsToCart object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.addProductsToCart).to.exist;",
									"    pm.expect(responseData.data.addProductsToCart.cart).to.exist;",
									"    pm.expect(responseData.data.addProductsToCart.cart.itemsV2).to.exist;",
									"    pm.expect(responseData.data.addProductsToCart.cart.itemsV2.items).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.data.addProductsToCart.cart.itemsV2.items.forEach(item => {",
									"        pm.expect(item).to.have.property('uid').that.is.a('string');",
									"        pm.expect(item).to.have.property('quantity').that.is.a('number');",
									"        pm.expect(item).to.have.property('prices').that.is.an('object');",
									"        pm.expect(item.prices).to.have.property('price_including_tax').that.is.an('object');",
									"        pm.expect(item.prices.price_including_tax).to.have.property('currency').that.is.a('string');",
									"        pm.expect(item.prices.price_including_tax).to.have.property('value').that.is.a('number');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"User errors should be an empty array\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.addProductsToCart.user_errors).to.be.an('array').that.is.empty;",
									"});",
									"",
									"",
									"pm.test(\"The 'uid' must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.addProductsToCart.cart.itemsV2.items).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.data.addProductsToCart.cart.itemsV2.items.forEach(item => {",
									"        pm.expect(item.uid).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"UID should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Quantity is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.addProductsToCart.cart.itemsV2.items).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.data.addProductsToCart.cart.itemsV2.items.forEach(item => {",
									"        pm.expect(item.quantity).to.be.a('number').and.to.be.at.least(0);",
									"        pm.expect(Number.isInteger(item.quantity)).to.be.true; // Checking if the quantity is an integer",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation addProductsToCart($cartId: String!) {\n\taddProductsToCart(\n\t\tcartId: $cartId\n\t\tcartItems: [\n\t\t\t{\n\t\t\t\tquantity: 8000\n\t\t\t\tsku: \"8029043\"\n\t\t\t}\n\t\t]\n\t) {\n\t\tcart {\n\t\t\titemsV2 {\n\t\t\t\titems {\n\t\t\t\t\tuid\n\t\t\t\t\tquantity\n\t\t\t\t\tprices{\n\t\t\t\t\t\tprice_including_tax{\n\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tuser_errors {\n\t\t\tcode\n\t\t\tmessage\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Cart Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains required fields: email, total_quantity, and prices\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.cart).to.exist;",
									"",
									"    // Check if the cart has the required properties, and use to.have.property for each",
									"    pm.expect(responseData.data.cart).to.have.property('email');",
									"    pm.expect(responseData.data.cart).to.have.property('total_quantity');",
									"    pm.expect(responseData.data.cart).to.have.property('prices');",
									"});",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.cart).to.have.property('email');",
									"    pm.expect(responseData.data.cart.email).to.match(/^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/, \"Email format is invalid\");",
									"});",
									"",
									"pm.test(\"Total quantity is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.cart.total_quantity).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"pm.test(\"Prices object contains valid currency and value formats\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.cart.prices).to.exist.and.to.be.an('object');",
									"    ",
									"    const prices = responseData.data.cart.prices;",
									"",
									"    // Check if the discount property exists and if it is null",
									"    if (prices.hasOwnProperty('discount')) {",
									"        pm.expect(prices.discount).to.be.null; // Assuming discounts can be null",
									"    }",
									"",
									"    // Check subtotal_including_tax",
									"    pm.expect(prices.subtotal_including_tax).to.exist.and.to.be.an('object');",
									"    pm.expect(prices.subtotal_including_tax.value).to.be.a('number');",
									"    pm.expect(prices.subtotal_including_tax.value).to.be.at.least(0);",
									"",
									"    // Check subtotal_excluding_tax",
									"    pm.expect(prices.subtotal_excluding_tax).to.exist.and.to.be.an('object');",
									"    pm.expect(prices.subtotal_excluding_tax.value).to.be.a('number');",
									"    pm.expect(prices.subtotal_excluding_tax.value).to.be.at.least(0);",
									"",
									"    // Check subtotal_with_discount_excluding_tax",
									"    pm.expect(prices.subtotal_with_discount_excluding_tax).to.exist.and.to.be.an('object');",
									"    pm.expect(prices.subtotal_with_discount_excluding_tax.value).to.be.a('number');",
									"    pm.expect(prices.subtotal_with_discount_excluding_tax.value).to.be.at.least(0);",
									"",
									"    // Check grand_total",
									"    pm.expect(prices.grand_total).to.exist.and.to.be.an('object');",
									"    pm.expect(prices.grand_total.value).to.be.a('number');",
									"    pm.expect(prices.grand_total.value).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query cart($cartId: String!) {\n\tcart(\n\t\tcart_id: $cartId #refresh_cart: true\n\t) {\n\t\temail\n\t\ttotal_quantity\n\t\tprices {\n\t\t\tdiscounts {\n\t\t\t\tlabel\n\t\t\t\tamount {\n\t\t\t\t\tvalue\n\t\t\t\t\tcurrency\n\t\t\t\t}\n\t\t\t}\n\t\t\tsubtotal_including_tax {\n\t\t\t\tvalue\n\t\t\t}\n\t\t\tsubtotal_excluding_tax {\n\t\t\t\tvalue\n\t\t\t}\n\t\t\tsubtotal_with_discount_excluding_tax {\n\t\t\t\tvalue\n\t\t\t}\n\t\t\tgrand_total {\n\t\t\t\tvalue\n\t\t\t}\n\t\t}\n\t\titemsV2 {\n\t\t\titems {\n\t\t\t\tcost_center\n\t\t\t\tsku_alias\n\n\t\t\t\tquantity\n\t\t\t\tuid\n\t\t\t\tid\n\t\t\t\tproduct {\n\t\t\t\t\tuid\n\t\t\t\t\tname\n\t\t\t\t\tsku\n\t\t\t\t\t#only_x_left_in_stock\n\t\t\t\t\tprice {\n\t\t\t\t\t\tregularPrice {\n\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tminimalPrice {\n\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t... on ConfigurableCartItem {\n\t\t\t\t\tid\n\t\t\t\t\tquantity\n\t\t\t\t\tuid\n\t\t\t\t\tconfigurable_options {\n\t\t\t\t\t\tconfigurable_product_option_uid\n\t\t\t\t\t\tconfigurable_product_option_value_uid\n\t\t\t\t\t\tid\n\t\t\t\t\t\toption_label\n\t\t\t\t\t\tvalue_id\n\t\t\t\t\t\tvalue_label\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprices {\n\t\t\t\t\tprice {\n\t\t\t\t\t\tcurrency\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tprice_including_tax {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\trow_total_including_tax {\n\t\t\t\t\t\tcurrency\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\ttotal_item_discount {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\trow_total {\n\t\t\t\t\t\tcurrency\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tdiscounts {\n\t\t\t\t\t\tlabel\n\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set shipping address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Validate the structure of the cart object in the response\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.data.setShippingAddressesOnCart).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.data.setShippingAddressesOnCart.cart).to.exist.and.to.be.an('object');",
									"",
									"    const cart = responseData.data.setShippingAddressesOnCart.cart;",
									"",
									"    pm.expect(cart.prices).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.prices.subtotal_excluding_tax).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.prices.subtotal_with_discount_excluding_tax).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.prices.grand_total).to.exist.and.to.be.an('object');",
									"",
									"    pm.expect(cart.itemsV2).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.itemsV2.items).to.exist.and.to.be.an('array');",
									"",
									"    // Ensure shipping_addresses exists and is an array",
									"    pm.expect(cart.shipping_addresses).to.exist.and.to.be.an('array').that.is.not.null;",
									"",
									"    if (cart.shipping_addresses && cart.shipping_addresses.length > 0) {",
									"        // Loop through each address and validate fields",
									"        cart.shipping_addresses.forEach(address => {",
									"            pm.expect(address).to.be.an('object');",
									"            pm.expect(address.uid).to.exist.and.to.be.a('string');",
									"            pm.expect(address.firstname).to.exist.and.to.be.a('string');",
									"            pm.expect(address.lastname).to.exist.and.to.be.a('string');",
									"            pm.expect(address.company).to.exist.and.to.be.a('string');",
									"            pm.expect(address.street).to.exist.and.to.be.an('array');",
									"            pm.expect(address.city).to.exist.and.to.be.a('string');",
									"            pm.expect(address.region).to.exist.and.to.be.an('object');",
									"            pm.expect(address.postcode).to.exist.and.to.be.a('string');",
									"            pm.expect(address.telephone).to.exist.and.to.be.a('string');",
									"            pm.expect(address.country).to.exist.and.to.be.an('object');",
									"            pm.expect(address.available_shipping_methods).to.exist.and.to.be.an('array');",
									"        });",
									"    } else {",
									"        pm.expect.fail(\"shipping_addresses is empty or missing\");",
									"    }",
									"});",
									"",
									"pm.test(\"Subtotal values must be non-negative numbers\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.setShippingAddressesOnCart.cart.prices.subtotal_excluding_tax.value).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(responseData.data.setShippingAddressesOnCart.cart.prices.subtotal_with_discount_excluding_tax.value).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(responseData.data.setShippingAddressesOnCart.cart.prices.grand_total.value).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"pm.test(\"The itemsV2 array must contain at least one item and validate its structure\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setShippingAddressesOnCart).to.exist;",
									"    pm.expect(responseData.data.setShippingAddressesOnCart.cart.itemsV2).to.exist;",
									"    pm.expect(responseData.data.setShippingAddressesOnCart.cart.itemsV2.items).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.data.setShippingAddressesOnCart.cart.itemsV2.items.forEach(item => {",
									"        pm.expect(item).to.have.property('uid').that.is.a('string');",
									"        pm.expect(item).to.have.property('prices').that.is.an('object');",
									"        pm.expect(item.prices).to.have.property('price').that.is.an('object');",
									"        pm.expect(item.prices).to.have.property('fixed_product_taxes').that.is.an('array');",
									"        pm.expect(item.prices).to.have.property('row_total').that.is.an('object');",
									"        pm.expect(item).to.have.property('product').that.is.an('object');",
									"        pm.expect(item.product).to.have.property('sku').that.is.a('string');",
									"    });",
									"});",
									"",
									"pm.test(\"Shipping addresses contain valid address fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    const shippingAddresses = responseData.data.setShippingAddressesOnCart.cart.shipping_addresses;",
									"",
									"    // Ensure shipping_addresses exists and is an array",
									"    pm.expect(shippingAddresses).to.be.an('array').that.is.not.empty;",
									"",
									"    // Loop through each address and validate required fields",
									"    shippingAddresses.forEach(function(address) {",
									"        pm.expect(address).to.have.property('firstname').that.is.a('string').and.is.not.empty;",
									"        pm.expect(address).to.have.property('lastname').that.is.a('string').and.is.not.empty;",
									"        pm.expect(address).to.have.property('city').that.is.a('string').and.is.not.empty;",
									"        pm.expect(address).to.have.property('region').that.is.an('object');",
									"        pm.expect(address).to.have.property('postcode').that.is.a('string').and.is.not.empty;",
									"        pm.expect(address).to.have.property('telephone').that.is.a('string').and.is.not.empty;",
									"        pm.expect(address).to.have.property('street').that.is.an('array').and.is.not.empty;",
									"        pm.expect(address).to.have.property('country').that.is.an('object');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setShippingAddressesOnCart($cartId: String!) {\n\tsetShippingAddressesOnCart(\n\t\tinput: {\n\t\t\tcart_id: $cartId\n\t\t\tshipping_addresses: {\n\t\t\t\taddress: {\n\t\t\t\t\tfirstname: \"Chandu\"\n\t\t\t\t\tlastname: \"Ch\"\n\t\t\t\t\tcompany: \"Adobe india Pvt. ltd.\"\n\t\t\t\t\tstreet: [\"8450 North Fwy\", \"\"]\n\t\t\t\t\tcity: \"Switzerland\"\n\t\t\t\t\tregion: \"ZH\"\n\t\t\t\t\tpostcode: \"8001\"\n\t\t\t\t\tcountry_code: \"CH\"\n\t\t\t\t\ttelephone: \"1234567890\"\n\t\t\t\t\tsave_in_address_book: false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t) {\n\t\tcart {\n\t\t\tprices {\n\t\t\t\tsubtotal_excluding_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tsubtotal_with_discount_excluding_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tgrand_total {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n\t\t\titemsV2 {\n\t\t\t\titems {\n\t\t\t\t\tuid\n\t\t\t\t\tprices {\n\t\t\t\t\t\tprice {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfixed_product_taxes {\n\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlabel\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprice_including_tax {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t\trow_total {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t\trow_total_including_tax {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttotal_item_discount {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tproduct {\n\t\t\t\t\t\tsku\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tshipping_addresses {\n\t\t\t\tuid\n\t\t\t\tfirstname\n\t\t\t\tlastname\n\t\t\t\tcompany\n\t\t\t\tstreet\n\t\t\t\tcity\n\t\t\t\tregion {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpostcode\n\t\t\t\ttelephone\n\t\t\t\tcountry {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpickup_location_code\n\t\t\t\tavailable_shipping_methods {\n\t\t\t\t\tamount {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tavailable\n\t\t\t\t\tcarrier_code\n\t\t\t\t\tcarrier_title\n\t\t\t\t\tmethod_code\n\t\t\t\t\tmethod_title\n\t\t\t\t\tprice_excl_tax {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tprice_incl_tax {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbilling_address {\n\t\t\t\tuid\n\t\t\t\tfirstname\n\t\t\t\tlastname\n\t\t\t\tcompany\n\t\t\t\tstreet\n\t\t\t\tcity\n\t\t\t\tregion {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpostcode\n\t\t\t\ttelephone\n\t\t\t\tcountry {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set billing address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Response contains the 'data' field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('data');",
									"});",
									"",
									"",
									"pm.test(\"Validate the structure of the cart object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.data.setBillingAddressOnCart).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart).to.exist.and.to.be.an('object');",
									"    ",
									"    const cart = responseData.data.setBillingAddressOnCart.cart;",
									"    ",
									"    pm.expect(cart.itemsV2).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.itemsV2.items).to.exist.and.to.be.an('array').that.is.not.empty;",
									"",
									"    cart.itemsV2.items.forEach(item => {",
									"        pm.expect(item).to.be.an('object');",
									"        pm.expect(item.cost_center).to.exist.and.to.be.a('string');",
									"        pm.expect(item.sku_alias).to.exist.and.to.be.a('string');",
									"    });",
									"",
									"    pm.expect(cart.prices).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.prices.grand_total).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.prices.subtotal_excluding_tax).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.prices.subtotal_including_tax).to.exist.and.to.be.an('object');",
									"",
									"    pm.expect(cart.shipping_addresses).to.exist.and.to.be.an('array').that.is.not.empty;",
									"    cart.shipping_addresses.forEach(address => {",
									"        pm.expect(address).to.be.an('object');",
									"        pm.expect(address.uid).to.exist.and.to.be.a('string');",
									"        pm.expect(address.firstname).to.exist.and.to.be.a('string');",
									"        pm.expect(address.lastname).to.exist.and.to.be.a('string');",
									"        pm.expect(address.company).to.exist.and.to.be.a('string');",
									"        pm.expect(address.street).to.exist.and.to.be.an('array').that.is.not.empty;",
									"        pm.expect(address.city).to.exist.and.to.be.a('string');",
									"        pm.expect(address.region).to.exist.and.to.be.an('object');",
									"        pm.expect(address.postcode).to.exist.and.to.be.a('string');",
									"        pm.expect(address.telephone).to.exist.and.to.be.a('string');",
									"        pm.expect(address.country).to.exist.and.to.be.an('object');",
									"    });",
									"",
									"    pm.expect(cart.billing_address).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.billing_address.uid).to.exist.and.to.be.a('string');",
									"    pm.expect(cart.billing_address.firstname).to.exist.and.to.be.a('string');",
									"    pm.expect(cart.billing_address.lastname).to.exist.and.to.be.a('string');",
									"    pm.expect(cart.billing_address.company).to.exist.and.to.be.a('string');",
									"    pm.expect(cart.billing_address.street).to.exist.and.to.be.an('array').that.is.not.empty;",
									"    pm.expect(cart.billing_address.city).to.exist.and.to.be.a('string');",
									"    pm.expect(cart.billing_address.region).to.exist.and.to.be.an('object');",
									"    pm.expect(cart.billing_address.postcode).to.exist.and.to.be.a('string');",
									"    pm.expect(cart.billing_address.telephone).to.exist.and.to.be.a('string');",
									"    pm.expect(cart.billing_address.country).to.exist.and.to.be.an('object');",
									"});",
									"",
									"",
									"pm.test(\"Validate that grand_total, subtotal_excluding_tax, and subtotal_including_tax are non-negative values\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart.prices.grand_total.value).to.be.at.least(0, \"grand_total should be a non-negative value\");",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart.prices.subtotal_excluding_tax.value).to.be.at.least(0, \"subtotal_excluding_tax should be a non-negative value\");",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart.prices.subtotal_including_tax.value).to.be.at.least(0, \"subtotal_including_tax should be a non-negative value\");",
									"});",
									"",
									"",
									"pm.test(\"Shipping addresses contain at least one address with required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setBillingAddressOnCart).to.exist;",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setBillingAddressOnCart.cart.shipping_addresses).to.be.an('array').that.is.not.empty;",
									"",
									"    const shippingAddresses = responseData.data.setBillingAddressOnCart.cart.shipping_addresses;",
									"    let hasRequiredFields = false;",
									"",
									"    shippingAddresses.forEach(address => {",
									"        if (address.firstname && address.lastname && address.street.length > 0 && address.city && address.region && address.postcode && address.telephone && address.country) {",
									"            hasRequiredFields = true;",
									"        }",
									"    });",
									"",
									"    pm.expect(hasRequiredFields).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setBillingAddressOnCart($cartId: String!){\n\tsetBillingAddressOnCart(\n\t\tinput: {\n\t\t\tcart_id: $cartId\n\t\t\tbilling_address: \n\t\t\t\t{\n\t\t\t\t\tsame_as_shipping: true\n# \t\t\t\t\taddress: {\n# \t\t\t\t\t\tfirstname: \"Astik\"\n# \t\t\t\t\t\tlastname: \"Unagar\"\n# \t\t\t\t\t\tcompany: \"Adobe india Pvt. ltd.\"\n# \t\t\t\t\t\tstreet: [\"9th cross\", \"3rd main, 6th Stage, Brookfield\"]\n# \t\t\t\t\t\tcity: \"Austin\"\n# \t\t\t\t\t\tregion: \"TX\"\n# \t\t\t\t\t\tpostcode: \"75812\"\n# \t\t\t\t\t\tcountry_code: \"US\"\n# \t\t\t\t\t\ttelephone: \"1234567890\"\n# \t\t\t\t\t\tsave_in_address_book: false\n# \t\t\t\t\t}\n\t\t\t\t\t#use_for_shipping: true\n\t\t\t\t}\n\t\t}\n\t) {\n\t\tcart {\n\t\t\titemsV2{\n\t\t\t\titems{\n\t\t\t\t\tcost_center\n\t\t\t\t\tsku_alias\n\t\t\t\t}\n\t\t\t}\n\t\t\tprices {\n\t\t\t\tgrand_total {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tsubtotal_excluding_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tsubtotal_including_tax {\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n\t\t\tshipping_addresses {\n\t\t\t\tuid\n\t\t\t\tfirstname\n\t\t\t\tlastname\n\t\t\t\tcompany\n\t\t\t\tstreet\n\t\t\t\tcity\n\t\t\t\tregion {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpostcode\n\t\t\t\ttelephone\n\t\t\t\tcountry {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpickup_location_code\n\t\t\t}\n\t\t\tbilling_address {\n\t\t\t\tuid\n\t\t\t\tfirstname\n\t\t\t\tlastname\n\t\t\t\tcompany\n\t\t\t\tstreet\n\t\t\t\tcity\n\t\t\t\tregion {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t\tpostcode\n\t\t\t\ttelephone\n\t\t\t\tcountry {\n\t\t\t\t\tcode\n\t\t\t\t\tlabel\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set shipping method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Response contains required fields: grand_total and shipping_addresses\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.prices).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.prices.grand_total).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.shipping_addresses).to.exist.and.to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"Grand total is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.prices).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.prices.grand_total).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.prices.grand_total.value).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Shipping addresses array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.have.property('setShippingMethodsOnCart');",
									"    pm.expect(responseData.data.setShippingMethodsOnCart).to.have.property('cart');",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart).to.have.property('shipping_addresses').that.is.an('array').and.to.have.lengthOf.at.least(1, \"Shipping addresses array should contain at least one element\");",
									"});",
									"",
									"",
									"pm.test(\"Selected shipping method contains valid carrier and method codes\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setShippingMethodsOnCart.cart.shipping_addresses).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.data.setShippingMethodsOnCart.cart.shipping_addresses.forEach(shippingAddress => {",
									"        pm.expect(shippingAddress.selected_shipping_method).to.exist;",
									"        pm.expect(shippingAddress.selected_shipping_method.carrier_code).to.be.a('string').that.is.not.empty;",
									"        pm.expect(shippingAddress.selected_shipping_method.method_code).to.be.a('string').that.is.not.empty;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setShippingMethodsOnCart(\n\t$cartId: String!\n) {\n  setShippingMethodsOnCart(input: {\n    cart_id: $cartId\n    shipping_methods: [\n\t\t\t{\n\t\t\t\tcarrier_code: \"rsdelivery\"\n\t\t\t\tmethod_code: \"13\"\n\t\t\t}\n    ]\n  }) {\n    cart {\n\t\t\tprices{\n\t\t\t\tgrand_total{\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n      shipping_addresses {\n        selected_shipping_method {\n          carrier_code\n          method_code\n          carrier_title\n          method_title\n        }\n      }\n    }\n  }\n}",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set payment method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response contains the 'data' field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('data');",
									"});",
									"",
									"",
									"pm.test(\"The selected_payment_method should be present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.setPaymentMethodOnCart).to.exist;",
									"    pm.expect(responseData.data.setPaymentMethodOnCart.cart).to.exist;",
									"    pm.expect(responseData.data.setPaymentMethodOnCart.cart.selected_payment_method).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"The payment method code must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.setPaymentMethodOnCart.cart.selected_payment_method.code).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setPaymentMethodOnCart($cartId: String!)\n{\n\tsetPaymentMethodOnCart(\n\t\tinput: {\n\t\t\tcart_id: $cartId\n\t\t\tpayment_method: {\n\t\t\t\tcode: \"checkmo\"\n\t\t\t}\n\t\t}\n\t) {\n\t\tcart {\n\t\t\tselected_payment_method {\n\t\t\t\tcode\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "place order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the structure of the orderV2 object\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.data.placeOrder).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.data.placeOrder.orderV2).to.exist.and.to.be.an('object');",
									"",
									"    const orderV2 = responseData.data.placeOrder.orderV2;",
									"",
									"    pm.expect(orderV2).to.have.all.keys('id', 'number', 'email', 'items');",
									"    pm.expect(orderV2.id).to.exist.and.to.be.a('string');",
									"    pm.expect(orderV2.number).to.exist.and.to.be.a('string');",
									"    pm.expect(orderV2.email).to.exist.and.to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"    ",
									"    pm.expect(orderV2.items).to.be.an('array');",
									"    orderV2.items.forEach(item => {",
									"        pm.expect(item).to.have.all.keys('product_name', 'product', 'status');",
									"        pm.expect(item.product_name).to.exist.and.to.be.a('string');",
									"        pm.expect(item.product).to.exist.and.to.be.an('object');",
									"        pm.expect(item.product).to.have.property('sku').that.is.a('string');",
									"        pm.expect(item.status).to.exist.and.to.be.a('string');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.placeOrder.orderV2.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
									"});",
									"",
									"",
									"pm.test(\"Items array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.have.property('placeOrder');",
									"    pm.expect(responseData.data.placeOrder).to.have.property('orderV2');",
									"    pm.expect(responseData.data.placeOrder.orderV2).to.have.property('items').that.is.an('array').with.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"Each item in the items array has a non-empty product_name and a valid SKU\", function () {",
									"    const responseData = pm.response.json();",
									"    const items = responseData.data.placeOrder.orderV2.items;",
									"",
									"    pm.expect(items).to.be.an('array').that.is.not.empty;",
									"",
									"    items.forEach(item => {",
									"        pm.expect(item.product_name).to.exist.and.to.have.lengthOf.at.least(1, \"Product name should not be empty\");",
									"        pm.expect(item.product.sku).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"SKU should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation placeOrder(\n\t$cartId: String!\n) {\n  placeOrder(input: {cart_id: $cartId\n   blanket_order: \"test12!@#$%^&*()_:{}<>?\"\n        cost_center: \"test12!@#$%^&*()_:{}<>?\"}) {\n    errors{\n        code\n        message\n    }\n    orderV2{\n\t\t\tid\n            number\n\t\t\temail\n\t\t\titems{\n\t\t\t\tproduct_name\n\t\t\t\tproduct{\n\t\t\t\t\tsku\n\t\t\t\t}\n\t\t\t\tstatus\n\t\t\t}\n\t\t}\n  }\n}",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PunchoutUser_Scenarios",
			"item": [
				{
					"name": "Authorize Punchout User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.response.json().customer_token);\r",
									"let customerToken = \"Bearer \" +pm.response.json().customer_token;\r",
									" \r",
									"pm.environment.set(\"customerToken\", customerToken);\r",
									"// -------------------- POSITIVE TESTS --------------------\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains required fields\", function () {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res).to.have.property(\"success\").that.is.a(\"boolean\");\r",
									"    pm.expect(res).to.have.property(\"message\").that.is.a(\"string\").and.not.empty;\r",
									"    pm.expect(res).to.have.property(\"customer_token\").that.is.a(\"string\").and.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Validate customer_token format (JWT)\", function () {\r",
									"    const token = pm.response.json().customer_token;\r",
									"    const jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+$/;\r",
									"    pm.expect(token, \"Token must be a valid JWT\").to.match(jwtRegex);\r",
									"});\r",
									"\r",
									"// -------------------- NEGATIVE TESTS --------------------\r",
									"pm.test(\"[Negative] customer_token must not be missing or empty\", function () {\r",
									"    const badRes = { success: true, message: \"Success\" }; // missing token\r",
									"    pm.expect(badRes.customer_token, \"customer_token missing\").to.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[Negative] customer_token must not be invalid format\", function () {\r",
									"    const badRes = { success: true, message: \"Success\", customer_token: \"not-a-jwt\" };\r",
									"    const jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+$/;\r",
									"    pm.expect(badRes.customer_token).to.not.match(jwtRegex);\r",
									"});\r",
									"\r",
									"pm.test(\"[Negative] success must be boolean\", function () {\r",
									"    const badRes = { success: \"true\", message: \"Success\", customer_token: \"abc.def.ghi\" };\r",
									"    pm.expect(badRes.success).to.not.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"[Negative] message must not be empty\", function () {\r",
									"    const badRes = { success: true, message: \"\", customer_token: \"abc.def.ghi\" };\r",
									"    pm.expect(badRes.message).to.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth1",
							"oauth1": [
								{
									"key": "tokenSecret",
									"value": "{{token_secret}}",
									"type": "string"
								},
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "consumerSecret",
									"value": "{{consumer_secret}}",
									"type": "string"
								},
								{
									"key": "consumerKey",
									"value": "{{consumer_key}}",
									"type": "string"
								},
								{
									"key": "addParamsToHeader",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "signatureMethod",
									"value": "HMAC-SHA256",
									"type": "string"
								},
								{
									"key": "version",
									"value": "1.0",
									"type": "string"
								},
								{
									"key": "addEmptyParamsToSign",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "includeBodyHash",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\":\"chandu\",\n    \"lastName\":\"ch\",\n    \"email\":\"chandu.chatla@rsgroup.com\",\n    \"companyId\": 12\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://st1.emea.ac.ecommerce.rsgroup.com/rest/en_ch/V1/punchout-user-auth",
							"protocol": "https",
							"host": [
								"st1",
								"emea",
								"ac",
								"ecommerce",
								"rsgroup",
								"com"
							],
							"path": [
								"rest",
								"en_ch",
								"V1",
								"punchout-user-auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Customer Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.response.json().data.customerCart.id);\r",
									"let cartId = pm.response.json().data.customerCart.id;\r",
									"pm.environment.set(\"cartId\", cartId);\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains the 'data' field\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data').that.is.an('object');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Customer cart 'id' must be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.exist;\r",
									"    pm.expect(responseData.data.customerCart).to.exist;\r",
									"    pm.expect(responseData.data.customerCart.id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  customerCart{\n    id\n  }\n}\n",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Cart Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();\r",
									"const json = pm.response.json();\r",
									"\r",
									"const items = json?.data?.addProductsToCart?.cart?.itemsV2?.items;\r",
									"\r",
									"let uid = null;\r",
									"\r",
									"if (Array.isArray(items) && items.length > 0) {\r",
									"    uid = items[0]?.uid;\r",
									"}\r",
									"\r",
									"// Validate\r",
									"pm.test(\"Add to Cart response contains cart_item_uid\", function () {\r",
									"    pm.expect(uid, \"cart_item_uid not found in response\").to.be.a(\"string\").and.not.empty;\r",
									"});\r",
									"\r",
									"// Save to environment\r",
									"pm.environment.set(\"cart_item_uid\", uid);\r",
									"\r",
									"// Optional logging\r",
									"console.log(\"✅ Stored cart_item_uid:\", uid);\r",
									"\r",
									"\r",
									"\r",
									"// --- Positive Tests ---\r",
									"// Status code\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"// Deep schema validation\r",
									"pm.test(\"Response has required fields with deep nested objects\", function () {\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData.data).to.have.property('addProductsToCart');\r",
									"    const addProducts = responseData.data.addProductsToCart;\r",
									"\r",
									"    pm.expect(addProducts).to.have.property('cart');\r",
									"    pm.expect(addProducts.cart).to.have.property('itemsV2');\r",
									"    pm.expect(addProducts.cart.itemsV2).to.have.property('items');\r",
									"    pm.expect(addProducts).to.have.property('user_errors');\r",
									"\r",
									"    const items = addProducts.cart.itemsV2.items;\r",
									"    pm.expect(items).to.be.an('array');\r",
									"\r",
									"    items.forEach(item => {\r",
									"        pm.expect(item.uid).to.be.a('string').that.is.not.empty;\r",
									"        pm.expect(item.quantity).to.be.a('number');\r",
									"        pm.expect(item.prices).to.be.an('object');\r",
									"        pm.expect(item.prices.price_including_tax).to.be.an('object');\r",
									"        pm.expect(item.prices.price_including_tax.currency).to.be.a('string').that.is.not.empty;\r",
									"        pm.expect(item.prices.price_including_tax.value).to.be.a('number');\r",
									"    });\r",
									"});\r",
									"\r",
									"// --- Negative Deep Schema Tests (Missing Fields) ---\r",
									"pm.test(\"Negative: Missing 'cart' should fail schema validation\", function () {\r",
									"    const invalid = { data: { addProductsToCart: {} } };\r",
									"    pm.expect(() => {\r",
									"        pm.expect(invalid.data.addProductsToCart.cart).to.exist;\r",
									"    }).to.throw;\r",
									"});\r",
									"\r",
									"pm.test(\"Negative: Missing 'itemsV2' should fail schema validation\", function () {\r",
									"    const invalid = { data: { addProductsToCart: { cart: {} } } };\r",
									"    pm.expect(() => {\r",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2).to.exist;\r",
									"    }).to.throw;\r",
									"});\r",
									"\r",
									"pm.test(\"Negative: Missing 'items' should fail schema validation\", function () {\r",
									"    const invalid = { data: { addProductsToCart: { cart: { itemsV2: {} } } } };\r",
									"    pm.expect(() => {\r",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items).to.exist;\r",
									"    }).to.throw;\r",
									"});\r",
									"\r",
									"pm.test(\"Negative: Missing 'prices' should fail schema validation\", function () {\r",
									"    const invalid = {\r",
									"        data: {\r",
									"            addProductsToCart: {\r",
									"                cart: { itemsV2: { items: [{ uid: \"abc123\", quantity: 1 }] } }\r",
									"            }\r",
									"        }\r",
									"    };\r",
									"    pm.expect(() => {\r",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].prices).to.exist;\r",
									"    }).to.throw;\r",
									"});\r",
									"\r",
									"pm.test(\"Negative: Missing 'price_including_tax' should fail schema validation\", function () {\r",
									"    const invalid = {\r",
									"        data: {\r",
									"            addProductsToCart: {\r",
									"                cart: { itemsV2: { items: [{ uid: \"abc123\", quantity: 1, prices: {} }] } }\r",
									"            }\r",
									"        }\r",
									"    };\r",
									"    pm.expect(() => {\r",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].prices.price_including_tax).to.exist;\r",
									"    }).to.throw;\r",
									"});\r",
									"\r",
									"pm.test(\"Negative: Missing 'currency' should fail schema validation\", function () {\r",
									"    const invalid = {\r",
									"        data: {\r",
									"            addProductsToCart: {\r",
									"                cart: {\r",
									"                    itemsV2: { items: [{ uid: \"abc123\", quantity: 1, prices: { price_including_tax: { value: 100 } } }] }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    };\r",
									"    pm.expect(() => {\r",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].prices.price_including_tax.currency).to.exist;\r",
									"    }).to.throw;\r",
									"});\r",
									"\r",
									"pm.test(\"Negative: Missing 'value' should fail schema validation\", function () {\r",
									"    const invalid = {\r",
									"        data: {\r",
									"            addProductsToCart: {\r",
									"                cart: {\r",
									"                    itemsV2: { items: [{ uid: \"abc123\", quantity: 1, prices: { price_including_tax: { currency: \"CHF\" } } }] }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    };\r",
									"    pm.expect(() => {\r",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].prices.price_including_tax.value).to.exist;\r",
									"    }).to.throw;\r",
									"});\r",
									"\r",
									"// --- Negative Deep Schema Tests (Wrong Data Types) ---\r",
									"pm.test(\"Negative: uid must be a string\", function () {\r",
									"    const invalid = {\r",
									"        data: {\r",
									"            addProductsToCart: {\r",
									"                cart: {\r",
									"                    itemsV2: { items: [{ uid: 12345, quantity: 1, prices: { price_including_tax: { currency: \"CHF\", value: 100 } } }] }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    };\r",
									"    pm.expect(() => {\r",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].uid).to.be.a('string');\r",
									"    }).to.throw;\r",
									"});\r",
									"\r",
									"pm.test(\"Negative: quantity must be a number\", function () {\r",
									"    const invalid = {\r",
									"        data: {\r",
									"            addProductsToCart: {\r",
									"                cart: {\r",
									"                    itemsV2: { items: [{ uid: \"abc123\", quantity: \"two\", prices: { price_including_tax: { currency: \"CHF\", value: 100 } } }] }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    };\r",
									"    pm.expect(() => {\r",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].quantity).to.be.a('number');\r",
									"    }).to.throw;\r",
									"});\r",
									"\r",
									"pm.test(\"Negative: prices must be an object\", function () {\r",
									"    const invalid = {\r",
									"        data: {\r",
									"            addProductsToCart: {\r",
									"                cart: {\r",
									"                    itemsV2: { items: [{ uid: \"abc123\", quantity: 1, prices: \"not-an-object\" }] }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    };\r",
									"    pm.expect(() => {\r",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].prices).to.be.an('object');\r",
									"    }).to.throw;\r",
									"});\r",
									"\r",
									"pm.test(\"Negative: price_including_tax must be an object\", function () {\r",
									"    const invalid = {\r",
									"        data: {\r",
									"            addProductsToCart: {\r",
									"                cart: {\r",
									"                    itemsV2: { items: [{ uid: \"abc123\", quantity: 1, prices: { price_including_tax: \"invalid\" } }] }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    };\r",
									"    pm.expect(() => {\r",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].prices.price_including_tax).to.be.an('object');\r",
									"    }).to.throw;\r",
									"});\r",
									"\r",
									"pm.test(\"Negative: currency must be a string\", function () {\r",
									"    const invalid = {\r",
									"        data: {\r",
									"            addProductsToCart: {\r",
									"                cart: {\r",
									"                    itemsV2: { items: [{ uid: \"abc123\", quantity: 1, prices: { price_including_tax: { currency: 123, value: 100 } } }] }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    };\r",
									"    pm.expect(() => {\r",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].prices.price_including_tax.currency).to.be.a('string');\r",
									"    }).to.throw;\r",
									"});\r",
									"\r",
									"pm.test(\"Negative: value must be a number\", function () {\r",
									"    const invalid = {\r",
									"        data: {\r",
									"            addProductsToCart: {\r",
									"                cart: {\r",
									"                    itemsV2: { items: [{ uid: \"abc123\", quantity: 1, prices: { price_including_tax: { currency: \"CHF\", value: \"hundred\" } } }] }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    };\r",
									"    pm.expect(() => {\r",
									"        pm.expect(invalid.data.addProductsToCart.cart.itemsV2.items[0].prices.price_including_tax.value).to.be.a('number');\r",
									"    }).to.throw;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation addProductsToCart($cartId: String!) {\n\taddProductsToCart(\n\t\tcartId: $cartId\n\t\tcartItems: [\n\t\t\t{\n\t\t\t\tquantity: 2\n\t\t\t\tsku: \"3950295\"\n\t\t\t}\n\t\t]\n\t) {\n\t\tcart {\n\t\t\titemsV2 {\n\t\t\t\titems {\n\t\t\t\t\tuid\n\t\t\t\t\tquantity\n\t\t\t\t\tprices{\n\t\t\t\t\t\tprice_including_tax{\n\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tuser_errors {\n\t\t\tcode\n\t\t\tmessage\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Cart Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ====================\r",
									"// Positive Test Suite\r",
									"// ====================\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has required fields in the cart object\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data.cart).to.exist;\r",
									"    pm.expect(responseData.data.cart).to.have.all.keys('email', 'total_quantity', 'prices', 'itemsV2');\r",
									"\r",
									"    pm.expect(responseData.data.cart.prices).to.exist;\r",
									"    pm.expect(responseData.data.cart.prices).to.have.all.keys(\r",
									"        'discounts', \r",
									"        'subtotal_including_tax', \r",
									"        'subtotal_excluding_tax', \r",
									"        'subtotal_with_discount_excluding_tax', \r",
									"        'grand_total'\r",
									"    );\r",
									"    \r",
									"    pm.expect(responseData.data.cart.itemsV2).to.exist;\r",
									"    pm.expect(responseData.data.cart.itemsV2).to.have.property('items').that.is.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"    const email = pm.response.json().data.cart.email;\r",
									"    pm.expect(email).to.be.a('string').and.matches(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");\r",
									"});\r",
									"\r",
									"pm.test(\"Total quantity is a non-negative integer\", function () {\r",
									"    const totalQty = pm.response.json().data.cart.total_quantity;\r",
									"    pm.expect(totalQty).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Prices contain valid currency values and amounts\", function () {\r",
									"    const items = pm.response.json().data.cart.itemsV2.items;\r",
									"    pm.expect(items, \"Items array is missing\").to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    items.forEach((item, index) => {\r",
									"        pm.expect(item.prices.price.currency, `Item ${index}: Missing price currency`).to.be.a('string').and.not.empty;\r",
									"        pm.expect(parseFloat(item.prices.price.value), `Item ${index}: Invalid price value`).to.be.at.least(0);\r",
									"\r",
									"        pm.expect(parseFloat(item.prices.price_including_tax.value), `Item ${index}: Invalid price_including_tax`).to.be.at.least(0);\r",
									"\r",
									"        pm.expect(item.prices.row_total_including_tax.currency, `Item ${index}: Missing row_total_including_tax currency`).to.be.a('string');\r",
									"        pm.expect(parseFloat(item.prices.row_total_including_tax.value), `Item ${index}: Invalid row_total_including_tax`).to.be.at.least(0);\r",
									"\r",
									"        pm.expect(item.prices.row_total.currency, `Item ${index}: Missing row_total currency`).to.be.a('string');\r",
									"        pm.expect(parseFloat(item.prices.row_total.value), `Item ${index}: Invalid row_total`).to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"// ====================\r",
									"// Negative Test Suite\r",
									"// ====================\r",
									"\r",
									"pm.test(\"Negative: Missing required fields should break schema\", function () {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res.data.cart).to.not.have.property('non_existing_field', \"Unexpected extra field found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Negative: Invalid email format should fail regex\", function () {\r",
									"    const badEmails = [\"plainaddress\", \"no-at.com\", \"test@.com\"];\r",
									"    badEmails.forEach(email => {\r",
									"        pm.expect(email).to.not.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, `Invalid email '${email}' passed validation`);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Negative: Total quantity must reject non-numeric or negative values\", function () {\r",
									"    const badQuantities = [-5, \"two\", null];\r",
									"    badQuantities.forEach(qty => {\r",
									"        pm.expect(typeof qty === \"number\" && qty >= 0, `Invalid total_quantity '${qty}' passed validation`).to.be.false;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Negative: Currency fields must fail if not 3-letter ISO codes\", function () {\r",
									"    const badCurrencies = [\"\", \"US\", \"1234\", \"usdchf\"];\r",
									"    badCurrencies.forEach(curr => {\r",
									"        pm.expect(curr).to.not.match(/^[A-Z]{3}$/, `Invalid currency '${curr}' passed validation`);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Negative: Price values must reject wrong types\", function () {\r",
									"    const badPrices = [\"NaN\", {}, [], null];\r",
									"    badPrices.forEach(val => {\r",
									"        pm.expect(typeof val === \"number\" && !isNaN(val), `Invalid price '${JSON.stringify(val)}' passed validation`).to.be.false;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Negative: Deep nested product object must enforce schema\", function () {\r",
									"    const product = pm.response.json().data.cart.itemsV2.items[0].product;\r",
									"    pm.expect(product).to.have.all.keys(\"uid\", \"name\", \"sku\", \"price\");\r",
									"\r",
									"    // Ensure nested keys exist\r",
									"    pm.expect(product.price).to.have.all.keys(\"regularPrice\", \"minimalPrice\");\r",
									"\r",
									"    // Validate types\r",
									"    pm.expect(product.uid).to.be.a('string');\r",
									"    pm.expect(product.name).to.be.a('string');\r",
									"    pm.expect(product.sku).to.be.a('string');\r",
									"    pm.expect(product.price.regularPrice.amount.value).to.be.a('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Negative: Wrong data types at deep levels should fail\", function () {\r",
									"    const badSamples = [\r",
									"        { total_quantity: \"five\" },\r",
									"        { prices: { grand_total: { value: \"abc\" } } },\r",
									"        { itemsV2: { items: [{ quantity: \"2\" }] } },\r",
									"        { itemsV2: { items: [{ product: { sku: 12345 } }] } }\r",
									"    ];\r",
									"\r",
									"    badSamples.forEach(sample => {\r",
									"        if (sample.total_quantity) {\r",
									"            pm.expect(typeof sample.total_quantity === \"number\", `Invalid total_quantity type passed`).to.be.false;\r",
									"        }\r",
									"        if (sample.prices && sample.prices.grand_total) {\r",
									"            pm.expect(typeof sample.prices.grand_total.value === \"number\", `Invalid grand_total type passed`).to.be.false;\r",
									"        }\r",
									"        if (sample.itemsV2 && sample.itemsV2.items[0].quantity) {\r",
									"            pm.expect(typeof sample.itemsV2.items[0].quantity === \"number\", `Invalid quantity type passed`).to.be.false;\r",
									"        }\r",
									"        if (sample.itemsV2 && sample.itemsV2.items[0].product && sample.itemsV2.items[0].product.sku) {\r",
									"            pm.expect(typeof sample.itemsV2.items[0].product.sku === \"string\", `Invalid SKU type passed`).to.be.false;\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query cart($cartId: String!) {\n\tcart(\n\t\tcart_id: $cartId #refresh_cart: true\n\t) {\n\t\temail\n\t\ttotal_quantity\n\t\tprices {\n\t\t\tdiscounts {\n\t\t\t\tlabel\n\t\t\t\tamount {\n\t\t\t\t\tvalue\n\t\t\t\t\tcurrency\n\t\t\t\t}\n\t\t\t}\n\t\t\tsubtotal_including_tax {\n\t\t\t\tvalue\n\t\t\t}\n\t\t\tsubtotal_excluding_tax {\n\t\t\t\tvalue\n\t\t\t}\n\t\t\tsubtotal_with_discount_excluding_tax {\n\t\t\t\tvalue\n\t\t\t}\n\t\t\tgrand_total {\n\t\t\t\tvalue\n\t\t\t}\n\t\t}\n\t\titemsV2 {\n\t\t\titems {\n\t\t\t\tcost_center\n\t\t\t\tsku_alias\n\n\t\t\t\tquantity\n\t\t\t\tuid\n\t\t\t\tid\n\t\t\t\tproduct {\n\t\t\t\t\tuid\n\t\t\t\t\tname\n\t\t\t\t\tsku\n\t\t\t\t\t#only_x_left_in_stock\n\t\t\t\t\tprice {\n\t\t\t\t\t\tregularPrice {\n\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tminimalPrice {\n\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\tcurrency\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t... on ConfigurableCartItem {\n\t\t\t\t\tid\n\t\t\t\t\tquantity\n\t\t\t\t\tuid\n\t\t\t\t\tconfigurable_options {\n\t\t\t\t\t\tconfigurable_product_option_uid\n\t\t\t\t\t\tconfigurable_product_option_value_uid\n\t\t\t\t\t\tid\n\t\t\t\t\t\toption_label\n\t\t\t\t\t\tvalue_id\n\t\t\t\t\t\tvalue_label\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprices {\n\t\t\t\t\tprice {\n\t\t\t\t\t\tcurrency\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tprice_including_tax {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\trow_total_including_tax {\n\t\t\t\t\t\tcurrency\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\ttotal_item_discount {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\trow_total {\n\t\t\t\t\t\tcurrency\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tdiscounts {\n\t\t\t\t\t\tlabel\n\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalidate Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - message and success\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.an('object');",
									"    pm.expect(responseData.data.invalidateCart).to.be.an('object');",
									"    pm.expect(responseData.data.invalidateCart).to.have.all.keys('message', 'success');",
									"});",
									"",
									"",
									"pm.test(\"Success field is a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.invalidateCart.success).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"The message must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.invalidateCart).to.exist;",
									"    pm.expect(responseData.data.invalidateCart.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 3000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation ($cartId: String!) {\n\tinvalidateCart(\n\t\tcart_id: $cartId\n\t) {\n\t\t\tmessage\n\t\tsuccess\n\t}\n}",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Individual Test Cases",
			"item": [
				{
					"name": "Create Company",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the correct Content-Type header\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Errors array should be present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.errors).to.exist.and.to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"The 'message' field in the 'errors' array must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.errors).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.errors.forEach(error => {",
									"        pm.expect(error.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"The createCompany field should be null\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.have.property('createCompany').that.is.null;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\n  createCompany(input: {\n    company_name: \"TestCo\"\n    company_email: \"testcompanyb2b1@mailinator.com\"\n    company_admin: {\n      email: \"testcompanyb2b1@mailinator.com\"\n      firstname: \"Jhon\"\n      lastname:\"Doe\"\n    }\n    legal_name: \"TestCo Inc.\"\n    legal_address: {\n      street: [\n        \"Test Street\"\n      ]\n      city: \"Zurich\"\n      region: {\n        region_code: \"ZH\"\n      }\n      postcode: \"8001\"\n      country_id: CH\n      telephone: \"555 867-5309\"\n    }\n  }){\n    company {\n      id\n      name\n      company_admin {\n        email\n        firstname\n        lastname\n      }\n      legal_address {\n        street\n        city\n        region {\n          region_code\n          region_id\n        }\n        postcode\n        telephone\n      }\n    }\n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Customer Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.response.json().data.generateCustomerToken.token);",
									"let customerToken = \"Bearer \" +pm.response.json().data.generateCustomerToken.token;",
									" ",
									"pm.environment.set(\"customerToken\", customerToken);",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Token must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.generateCustomerToken).to.exist;",
									"    pm.expect(responseData.data.generateCustomerToken.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"",
									"pm.test(\"The data object must be present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('data').that.is.an('object');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Store",
								"value": "{{store}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\n  generateCustomerToken(\n    email: \"chandu123@mailinator.com\"\n    password: \"test@123456\"\n  ) {\n    token\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update customer_all attributes Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// -------------------- POSITIVE TESTS --------------------\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON with expected structure\", function () {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res).to.have.property(\"data\");\r",
									"    pm.expect(res.data).to.have.property(\"updateCustomerV2\");\r",
									"    pm.expect(res.data.updateCustomerV2).to.have.property(\"customer\");\r",
									"    pm.expect(res.data.updateCustomerV2.customer).to.have.property(\"email\");\r",
									"    pm.expect(res.data.updateCustomerV2.customer).to.have.property(\"custom_attributes\").that.is.an(\"array\");\r",
									"});\r",
									"\r",
									"// Email validation\r",
									"pm.test(\"Validate customer email format\", function () {\r",
									"    const email = pm.response.json().data.updateCustomerV2.customer.email;\r",
									"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"    pm.expect(email).to.match(emailRegex, `Invalid email format: ${email}`);\r",
									"});\r",
									"\r",
									"// Validate custom_attributes structure\r",
									"pm.test(\"Each custom_attribute has code and value\", function () {\r",
									"    const attrs = pm.response.json().data.updateCustomerV2.customer.custom_attributes;\r",
									"    attrs.forEach(attr => {\r",
									"        pm.expect(attr).to.have.keys(\"code\",\"value\");\r",
									"        pm.expect(attr.code).to.be.a(\"string\").that.is.not.empty;\r",
									"        pm.expect(attr.value).to.be.a(\"string\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// Regex validations for specific codes\r",
									"pm.test(\"Regex validations for specific custom attributes\", function () {\r",
									"    const attrs = pm.response.json().data.updateCustomerV2.customer.custom_attributes;\r",
									"    const map = {};\r",
									"    attrs.forEach(attr => map[attr.code] = attr.value);\r",
									"\r",
									"    if (map[\"rs_phone_number\"]) {\r",
									"        pm.expect(map[\"rs_phone_number\"]).to.match(/^\\+?[0-9 ]{7,20}$/, \"Phone number must match E.164/local with spaces allowed\");\r",
									"    }\r",
									"    if (map[\"rs_partner_cdm_id\"]) {\r",
									"        pm.expect(map[\"rs_partner_cdm_id\"]).to.match(/^[A-Z0-9]+$/, \"Partner CDM ID must be alphanumeric uppercase\");\r",
									"    }\r",
									"    if (map[\"customer_reference_number\"]) {\r",
									"        pm.expect(map[\"customer_reference_number\"]).to.match(/^[A-Z0-9]+$/, \"Customer reference must be alphanumeric uppercase\");\r",
									"    }\r",
									"    if (map[\"blanket_orders\"]) {\r",
									"        const parsed = JSON.parse(map[\"blanket_orders\"]);\r",
									"        parsed.forEach(order => {\r",
									"            pm.expect(order.rs_order_number).to.match(/^[0-9]+$/);\r",
									"            pm.expect(order.rs_start_date).to.match(/^\\d{2}-\\d{2}-\\d{4}$/); // dd-mm-yyyy\r",
									"            pm.expect(order.rs_end_date).to.match(/^\\d{2}-\\d{2}-\\d{4}$/);\r",
									"            pm.expect(order.rs_is_default).to.be.a(\"boolean\");\r",
									"        });\r",
									"    }\r",
									"    if (map[\"cost_centres\"]) {\r",
									"        const parsed = JSON.parse(map[\"cost_centres\"]);\r",
									"        parsed.forEach(cc => {\r",
									"            pm.expect(cc.rs_code).to.be.a(\"string\").that.is.not.empty;\r",
									"            pm.expect(cc.rs_friendly_name).to.be.a(\"string\").that.is.not.empty;\r",
									"            pm.expect(cc.rs_is_default).to.be.a(\"boolean\");\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"// -------------------- NEGATIVE TESTS --------------------\r",
									"\r",
									"// Missing fields\r",
									"pm.test(\"[Negative] Customer object missing email should break schema\", function () {\r",
									"    let fakeCustomer = { custom_attributes: [] };\r",
									"    pm.expect(fakeCustomer.email, \"Email missing\").to.be.undefined;\r",
									"});\r",
									"\r",
									"// Wrong data types\r",
									"pm.test(\"[Negative] Wrong data types at deep levels\", function () {\r",
									"    let badCustomer = {\r",
									"        email: 12345, // should be string\r",
									"        custom_attributes: [\r",
									"            { code: \"rs_phone_number\", value: true }, // should be string\r",
									"            { code: 789, value: \"value\" } // code should be string\r",
									"        ]\r",
									"    };\r",
									"    pm.expect(badCustomer.email).to.not.be.a(\"string\");\r",
									"    pm.expect(badCustomer.custom_attributes[0].value).to.not.be.a(\"string\");\r",
									"    pm.expect(badCustomer.custom_attributes[1].code).to.not.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// Regex invalidations\r",
									"pm.test(\"[Negative] Regex failures\", function () {\r",
									"    const badEmail = \"invalid-email.com\";\r",
									"    const badPhone = \"12-34-ABC\";\r",
									"    const badDate = \"2024/01/01\";\r",
									"    const badUID = \"###\";\r",
									"\r",
									"    pm.expect(badEmail).to.not.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
									"    pm.expect(badPhone).to.not.match(/^\\+?[0-9 ]{7,20}$/);\r",
									"    pm.expect(badDate).to.not.match(/^\\d{2}-\\d{2}-\\d{4}$/);\r",
									"    pm.expect(badUID).to.not.match(/^[A-Za-z0-9+/=]+$/);\r",
									"});\r",
									"\r",
									"// Deep schema invalid objects\r",
									"pm.test(\"[Negative] Deep schema invalid custom_attributes\", function () {\r",
									"    let badAttr = { wrongKey: \"oops\" };\r",
									"    pm.expect(badAttr).to.not.have.all.keys(\"code\",\"value\");\r",
									"});\r",
									"\r",
									"// Nested invalid JSON values\r",
									"pm.test(\"[Negative] Invalid JSON in custom_attributes value\", function () {\r",
									"    const badJSON = \"[{ invalid_json }]\";\r",
									"    try {\r",
									"        JSON.parse(badJSON);\r",
									"        pm.expect.fail(\"Parsing should fail for invalid JSON\");\r",
									"    } catch (e) {\r",
									"        pm.expect(e).to.be.an(\"error\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}"
							},
							{
								"key": "store",
								"value": "{{store}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\n\tupdateCustomerV2(\n\t\tinput: {\n\t\t\tcustom_attributes: [\n\t\t\t    { attribute_code: \"mkt_receive_emails\", value: \"1\" }\n\t\t\t    { attribute_code: \"mkt_receive_calls\", value: \"1\" }\n\t\t\t    { attribute_code: \"mkt_receive_by_post\", value: \"1\" }\n\t\t\t    { attribute_code: \"mkt_company_name\", value: \"RS Components\" }\n\t\t\t    { attribute_code: \"mkt_trading_as\", value: \"Adobe stock\" }\n\t\t\t    { attribute_code: \"mkt_address_line1\", value: \"112 Galaxy apartment\" }\n\t\t\t    { attribute_code: \"mkt_address_line2\", value: \"Martin luther road\" }\n\t\t\t    { attribute_code: \"mkt_city\", value: \"MKT City\" }\n\t\t\t    { attribute_code: \"mkt_region\", value: \"MKT Region\" }\n\t\t\t    { attribute_code: \"mkt_postcode\", value: \"MKT Postcode\" }\n\t\t\t    { attribute_code: \"mkt_country\", value: \"MKT Country\" }\n                { attribute_code: \"customer_reference_number\", value: \"TEST1257\" }\n\t\t\t\t{ attribute_code: \"disable_order_status_email\", value: \"1\" }\n                 { attribute_code: \"rs_phone_number\",value: \"+44 23543645\" }\n                 { attribute_code: \"mkt_datestamp\", value: \"124324\" }\n                 { attribute_code: \"address_type\", value: \"soft\" }\n                 { attribute_code: \"is_sku_alias\", value: \"1\" }\n                 { attribute_code: \"is_cost_center\", value: \"1\" }\n                 { \n                    attribute_code: \"blanket_orders\", \n                    value: \"[{ \\\"rs_order_number\\\": \\\"8378191\\\", \\\"rs_start_date\\\": \\\"20-06-2024\\\", \\\"rs_end_date\\\": \\\"20-08-2024\\\", \\\"rs_is_default\\\": true}]\" \n                \n                },\n                {\n                    \n                    attribute_code: \"cost_centres\", \n                    value: \"[{ \\\"rs_code\\\": \\\"code1\\\", \\\"rs_friendly_name\\\": \\\"name1\\\", \\\"rs_is_default\\\": true},{\\\"rs_code\\\": \\\"code2\\\",\\\"rs_friendly_name\\\": \\\"name2\\\",\\\"rs_is_default\\\": false}]\" \n                \n                }\n\n\t\t\t]\n\t\t}\n\t) {\n\t\tcustomer {\n\t\t\temail\n\t\t\tcustom_attributes {\n\t\t\t\t... on AttributeValue {\n\t\t\t\t\tcode\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						},
						"description": "Generated from cURL: curl --location 'https://st1.emea.ac.ecommerce.rsgroup.com//graphql' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer eyJraWQiOiIxIiwiYWxnIjoiSFMyNTYifQ.eyJ1aWQiOjE1MCwidXR5cGlkIjozLCJpYXQiOjE3NDcyOTc5NjksImV4cCI6MTc0NzMwMTU2OX0.PrDPWDOj19O81UcQmuq5P_cI85amFhLGRaF_uBp6WUU' \\\n--header 'Cookie: PHPSESSID=f94df92e7f50cbfc19e59a7994ad2048; private_content_version=19b65bdac7269619beb22db92611be91' \\\n--data '{\"query\":\"mutation {\\n\\tupdateCustomerV2(\\n\\t\\tinput: {\\n\\t\\t\\tcustom_attributes: [\\n\\t\\t\\t\\t{ attribute_code: \\\"customer_reference_number\\\", value: \\\"1234Test\\\" }\\n\\t\\t\\t\\t{ attribute_code: \\\"disable_order_status_email\\\", value: \\\"1\\\" }\\n                { attribute_code: \\\"sku_aliases\\\", value: \\\"1\\\" }\\n                { attribute_code: \\\"is_cost_center\\\", value: \\\"1\\\" }\\n                                \\n              \\n\\t\\t\\t]\\n\\t\\t}\\n\\t) {\\n\\t\\tcustomer {\\n\\t\\t\\temail\\n\\t\\t\\tcustom_attributes {\\n\\t\\t\\t\\t... on AttributeValue {\\n\\t\\t\\t\\t\\tcode\\n\\t\\t\\t\\t\\tvalue\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"variables\":{}}'"
					},
					"response": []
				},
				{
					"name": "get Customer details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ✅ Positive Tests",
									"pm.test(\"Response status code is 200\", function () { ",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains 'data' and 'customer' fields\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('data').that.is.an('object');",
									"    pm.expect(responseData.data).to.have.property('customer').that.is.an('object');",
									"});",
									"",
									"pm.test(\"Customer object contains required fields with type checks\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"",
									"    const requiredFields = [",
									"        'id', 'firstname', 'lastname', 'email', 'status',",
									"        'gender', 'created_at', 'store_credit', 'wishlist', 'orders'",
									"    ];",
									"",
									"    requiredFields.forEach(field => {",
									"        pm.expect(customer, `Customer object is missing required field: ${field}`).to.have.property(field);",
									"    });",
									"",
									"    pm.expect(customer.id).to.be.a('string');",
									"    pm.expect(customer.firstname).to.be.a('string');",
									"    pm.expect(customer.lastname).to.be.a('string');",
									"    pm.expect(customer.email).to.be.a('string');",
									"    pm.expect(customer.status).to.be.a('string');",
									"    pm.expect(customer.gender).to.be.a('number');",
									"    pm.expect(customer.created_at).to.be.a('string');",
									"});",
									"",
									"// ✅ Format & Schema Validations",
									"pm.test(\"Email format is valid\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
									"    pm.expect(customer.email).to.match(emailRegex, \"Email format is invalid\");",
									"});",
									"",
									"pm.test(\"Gender field is valid\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    pm.expect(customer.gender).to.be.oneOf([0, 1], \"Gender should be either 0 (Male) or 1 (Female)\");",
									"});",
									"",
									"pm.test(\"Orders object contains total_count field with type check\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    pm.expect(customer.orders).to.be.an('object');",
									"    pm.expect(customer.orders).to.have.property('total_count').that.is.a('number');",
									"});",
									"",
									"// ✅ Optional Role object validations",
									"pm.test(\"Role object contains valid fields with type checks (if present)\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    if (customer.role) {",
									"        pm.expect(customer.role).to.be.an('object');",
									"        pm.expect(customer.role).to.have.property('id').that.is.a('string');",
									"        pm.expect(customer.role).to.have.property('name').that.is.a('string');",
									"        pm.expect(customer.role).to.have.property('users_count').that.is.a('number');",
									"    } else {",
									"        console.log(\"⚠️ Role field not present, skipping role validation\");",
									"    }",
									"});",
									"",
									"pm.test(\"Store credit contains enabled field with type check\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    pm.expect(customer.store_credit).to.be.an('object');",
									"    pm.expect(customer.store_credit).to.have.property('enabled').that.is.a('boolean');",
									"});",
									"",
									"pm.test(\"Wishlist object contains valid fields with type checks\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    pm.expect(customer.wishlist).to.be.an('object');",
									"    pm.expect(customer.wishlist).to.have.property('id').that.is.a('string');",
									"    pm.expect(customer.wishlist).to.have.property('items_count').that.is.a('number');",
									"    pm.expect(customer.wishlist).to.have.property('sharing_code').that.is.a('string');",
									"    pm.expect(customer.wishlist).to.have.property('updated_at').that.is.a('string');",
									"});",
									"",
									"pm.test(\"Confirmation status is valid\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    const validStatuses = [\"ACCOUNT_CONFIRMATION_NOT_REQUIRED\", \"ACCOUNT_CONFIRMATION_PENDING\", \"ACCOUNT_CONFIRMATION_CONFIRMED\"];",
									"    pm.expect(customer.confirmation_status).to.be.oneOf(validStatuses, \"Invalid confirmation status\");",
									"});",
									"",
									"pm.test(\"Addresses array validation\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    pm.expect(customer.addresses).to.be.an('array');",
									"",
									"    if (customer.addresses.length > 0) {",
									"        customer.addresses.forEach(addr => {",
									"            pm.expect(addr).to.have.property('city').that.is.a('string');",
									"            pm.expect(addr).to.have.property('country_code').that.is.a('string');",
									"            pm.expect(addr).to.have.property('postcode').that.is.a('string');",
									"            pm.expect(addr).to.have.property('telephone').that.is.a('string');",
									"        });",
									"    }",
									"});",
									"",
									"pm.test(\"Created at field is in valid date format\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    const dateFormat = /^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/;",
									"    pm.expect(customer.created_at).to.match(dateFormat, \"Invalid created_at date format\");",
									"});",
									"",
									"pm.test(\"Customer status is valid\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    const validStatuses = [\"ACTIVE\", \"INACTIVE\"];",
									"    pm.expect(customer.status).to.be.oneOf(validStatuses, \"Invalid customer status\");",
									"});",
									"",
									"pm.test(\"Custom attributes are valid if present\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    pm.expect(customer.custom_attributes).to.be.an('array');",
									"    customer.custom_attributes.forEach(attr => {",
									"        pm.expect(attr).to.have.property('code').that.is.a('string');",
									"        pm.expect(attr).to.have.property('value');",
									"    });",
									"});",
									"",
									"// ✅ Regex Validations",
									"pm.test(\"Telephone format is valid (E.164 or Local)\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    if (customer.addresses.length > 0) {",
									"        customer.addresses.forEach(addr => {",
									"            const tel = addr.telephone;",
									"",
									"            if (tel && tel.trim() !== \"\") {",
									"                // Strict E.164: +<country_code><subscriber_number>",
									"                const e164Regex = /^\\+[1-9]\\d{7,14}$/;",
									"",
									"                // Local format: optional area code, spaces/dashes/(), 5–15 digits local part",
									"                const localRegex = /^(\\(?\\d{2,4}\\)?[\\s.-]?)?[\\d\\s.-]{5,15}$/;",
									"",
									"                pm.expect(",
									"                    e164Regex.test(tel) || localRegex.test(tel),",
									"                    `Invalid telephone format: ${tel}`",
									"                ).to.be.true;",
									"            } else {",
									"                console.log(`ℹ️ Skipping telephone validation (optional): ${tel}`);",
									"            }",
									"        });",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Postcode format is alphanumeric (4–10 chars)\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    if (customer.addresses.length > 0) {",
									"        customer.addresses.forEach(addr => {",
									"            const postcodeRegex = /^[A-Za-z0-9\\s-]{4,10}$/;",
									"            pm.expect(addr.postcode).to.match(postcodeRegex, `Invalid postcode format: ${addr.postcode}`);",
									"        });",
									"    }",
									"});",
									"",
									"pm.test(\"Date of birth format is valid if present (YYYY-MM-DD)\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    if (customer.dob) {",
									"        const dobRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"        pm.expect(customer.dob).to.match(dobRegex, `Invalid DOB format: ${customer.dob}`);",
									"    }",
									"});",
									"",
									"// ❌ Negative Tests",
									"pm.test(\"Fails if required field is missing\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    const mustHave = ['id', 'firstname', 'lastname', 'email'];",
									"    mustHave.forEach(field => {",
									"        pm.expect(customer, `Missing field: ${field}`).to.have.property(field);",
									"    });",
									"});",
									"",
									"pm.test(\"Fails if email is invalid format\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    const invalidEmailRegex = /\\s|@.*@|\\.\\./;",
									"    pm.expect(customer.email).to.not.match(invalidEmailRegex, \"Email contains invalid patterns\");",
									"});",
									"",
									"pm.test(\"Fails if gender is not 0 or 1\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    pm.expect([0,1]).to.include(customer.gender, \"Gender must be 0 or 1\");",
									"});",
									"",
									"pm.test(\"Fails if created_at is not a valid date\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    const invalidDateFormat = isNaN(Date.parse(customer.created_at));",
									"    pm.expect(invalidDateFormat).to.be.false;",
									"});",
									"// ❌ Negative Tests — Hardened with Regex Validations",
									"",
									"pm.test(\"Fails if required field is missing\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    const mustHave = ['id', 'firstname', 'lastname', 'email'];",
									"    mustHave.forEach(field => {",
									"        pm.expect(customer, `Missing field: ${field}`).to.have.property(field);",
									"    });",
									"});",
									"",
									"pm.test(\"Fails if email is invalid format\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
									"    pm.expect(customer.email, \"Invalid email format\").to.match(emailRegex);",
									"});",
									"",
									"pm.test(\"Fails if gender is not 0 or 1\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    pm.expect([0,1], \"Gender must be 0 or 1\").to.include(customer.gender);",
									"});",
									"",
									"pm.test(\"Fails if created_at is not a valid date format\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    const dateRegex = /^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/;",
									"    pm.expect(customer.created_at, \"Invalid created_at date format\").to.match(dateRegex);",
									"});",
									"",
									"// ❌ Regex Negative Tests",
									"",
									"// ❌ Negative Test: Telephone must fail if it matches neither format",
									"pm.test(\"Fails if telephone is neither E.164 nor Local\", function () {",
									"    const fakeNumbers = [",
									"        \"abcd123\",",
									"        \"++++++\",",
									"        \"123\",          // too short",
									"        \"+123\",         // incomplete E.164",
									"        \"44-ABCD-999\"   // letters",
									"    ];",
									"",
									"    const e164Regex = /^\\+[1-9]\\d{7,14}$/;",
									"    const localRegex = /^(\\(?\\d{2,4}\\)?[\\s.-]?)?[\\d\\s.-]{5,10}$/;",
									"",
									"    fakeNumbers.forEach(num => {",
									"        pm.expect(",
									"            e164Regex.test(num) || localRegex.test(num),",
									"            `Expected invalid telephone to fail: ${num}`",
									"        ).to.be.false;",
									"    });",
									"});",
									"",
									"pm.test(\"Fails if postcode format is invalid\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    if (customer.addresses.length > 0) {",
									"        const postcodeRegex = /^[A-Za-z0-9\\s-]{4,10}$/;",
									"        customer.addresses.forEach(addr => {",
									"            pm.expect(addr.postcode, `Invalid postcode format: ${addr.postcode}`).to.match(postcodeRegex);",
									"        });",
									"    }",
									"});",
									"",
									"pm.test(\"Fails if DOB is invalid format\", function () {",
									"    const customer = pm.response.json().data.customer;",
									"    if (customer.dob) {",
									"        const dobRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"        pm.expect(customer.dob, `Invalid DOB format: ${customer.dob}`).to.match(dobRegex);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  customer {\n   \n    addresses {\n      city\n      company\n      country_code\n      country_id     \n      customer_id\n      default_billing\n      default_shipping\n     custom_attributesV2 {\n        code\n        ... on AttributeValue {\n            value\n        }\n        ... on AttributeSelectedOptions {\n          selected_options {\n            label\n            value\n          }\n        }\n}\n \n      fax\n      firstname\n      id\n      lastname\n      middlename\n      postcode\n      prefix\n     region {\n    region_code\n    region\n  }\n      street\n      suffix\n      telephone\n      vat_id\n    }\n    allow_remote_shopping_assistance\n    \n    compare_list {\n      \n      item_count\n     \n      uid\n    }\n    confirmation_status\n    created_at\n   custom_attributes {\n      code\n      ... on AttributeValue {\n        value\n      }\n      ... on AttributeSelectedOptions {\n        selected_options {\n          label\n          value\n        }\n      }\n    }\n    date_of_birth\n    default_billing\n    default_shipping\n    dob\n    email\n    firstname\n    gender\n    gift_registries {\n      created_at   \n      event_name    \n      message\n      owner_name\n      privacy_settings      \n      status    \n      uid\n    }\n    \n    group_id\n    id\n    is_subscribed\n    job_title\n    lastname\n    middlename\n    orders(\n      filter: {}\n      currentPage: 1\n      pageSize: 20\n      sort: { sort_direction: ASC, sort_field: NUMBER }\n      scope: GLOBAL\n    ) {\n      \n      total_count\n    }\n    prefix\n  \n   \n    \n    status\n    store_credit {\n    \n      enabled\n    }\n   \n    suffix\n    taxvat\n    team {\n      description\n      id\n      name\n      structure_id\n    }\n    telephone\n    wishlist {\n      id\n    \n      items_count\n      \n      sharing_code\n      updated_at\n    }\n  \n}\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Store front (PDP)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response contains the data field\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('data');",
									"});",
									"",
									"pm.test(\"Products array is present and contains at least one product object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.have.property('products').that.is.an('array').that.is.not.empty;",
									"",
									"    responseData.data.products.forEach(product => {",
									"        pm.expect(product).to.be.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Each product object has the required fields with type checks\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    responseData.data.products.forEach(product => {",
									"        const requiredKeys = [",
									"            'id',",
									"            'sku',",
									"            'name',",
									"            'description',",
									"            'shortDescription',",
									"            'addToCartAllowed',",
									"            'url',",
									"            'price',",
									"            'attributes'",
									"        ];",
									"",
									"        // Check required fields exist",
									"        requiredKeys.forEach(key => {",
									"            pm.expect(product, `Product is missing required field: ${key}`).to.have.property(key);",
									"        });",
									"",
									"        // Type checks for fields with data",
									"        pm.expect(product.id).to.be.a('string').and.to.not.be.empty;",
									"        pm.expect(product.sku).to.be.a('string').and.to.not.be.empty;",
									"        pm.expect(product.name).to.be.a('string').and.to.not.be.empty;",
									"        pm.expect(product.description).to.be.a('string');  // can be empty string",
									"        pm.expect(product.shortDescription).to.be.a('string').and.to.not.be.empty;",
									"        pm.expect(product.addToCartAllowed).to.be.a('boolean');",
									"        pm.expect(product.url).to.be.a('string');  // can be empty string",
									"        pm.expect(product.attributes).to.be.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Price contains valid amount and currency values\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    responseData.data.products.forEach(product => {",
									"        pm.expect(product).to.have.property('price').that.is.an('object');",
									"",
									"        // Validate 'final' price",
									"        pm.expect(product.price).to.have.property('final').that.is.an('object');",
									"        pm.expect(product.price.final).to.have.property('amount').that.is.an('object');",
									"        pm.expect(product.price.final.amount).to.have.property('value').that.is.a('number').and.to.be.at.least(0);",
									"        pm.expect(product.price.final.amount).to.have.property('currency').that.is.a('string').and.to.not.be.empty;",
									"",
									"        // Validate 'regular' price",
									"        pm.expect(product.price).to.have.property('regular').that.is.an('object');",
									"        pm.expect(product.price.regular).to.have.property('amount').that.is.an('object');",
									"        pm.expect(product.price.regular.amount).to.have.property('value').that.is.a('number').and.to.be.at.least(0);",
									"        pm.expect(product.price.regular.amount).to.have.property('currency').that.is.a('string').and.to.not.be.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Attributes array contains valid attribute objects\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    responseData.data.products.forEach(product => {",
									"        pm.expect(product).to.have.property('attributes').that.is.an('array');",
									"",
									"        product.attributes.forEach(attr => {",
									"            pm.expect(attr).to.have.property('name').that.is.a('string').and.to.not.be.empty;",
									"            pm.expect(attr).to.have.property('label').that.is.a('string').and.to.not.be.empty;",
									"            pm.expect(attr).to.have.property('value');",
									"",
									"            // Value can be string, number, or even array depending on API design",
									"            pm.expect(",
									"                ['string', 'number', 'object', 'boolean'].includes(typeof attr.value),",
									"                `Unexpected type for attribute value: ${typeof attr.value}`",
									"            ).to.be.true;",
									"        });",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "AC-Source-Locale",
								"value": "en_ch",
								"type": "text"
							},
							{
								"key": "AC-Price-Book-ID",
								"value": "ch",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\n    products(skus: [\"8029043\"]) {\n        id\n        sku\n        name\n        description\n        shortDescription\n        addToCartAllowed\n        url\n        images(roles: []) {\n            url\n            label\n            roles\n        }\n        attributes(roles: []) {\n            name\n            label\n            value\n        }\n        inputOptions {\n            id\n            title\n            required\n            type\n            markupAmount\n            suffix\n            sortOrder\n            range {\n                from\n                to\n            }\n            imageSize {\n                width\n                height\n            }\n            fileExtensions\n        }\n        ... on SimpleProductView {\n            price {\n                final {\n                    amount {\n                        value\n                        currency\n                    }\n                }\n                regular {\n                    amount {\n                        value\n                        currency\n                    }\n                }\n                roles\n            }\n        }\n        links {\n            product {\n                sku\n\n            }\n            linkTypes\n        }\n    }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "https://na1-sandbox.api.commerce.adobe.com/Cxtg3yznDvBje4VM3oQf1R/graphql",
							"protocol": "https",
							"host": [
								"na1-sandbox",
								"api",
								"commerce",
								"adobe",
								"com"
							],
							"path": [
								"Cxtg3yznDvBje4VM3oQf1R",
								"graphql"
							]
						},
						"description": "### POST Request to [https://na1-sandbox.api.commerce.adobe.com/EfvDrU6urKCXXAKFyr8s7i/graphql](https://na1-sandbox.api.commerce.adobe.com/EfvDrU6urKCXXAKFyr8s7i/graphql)\n\n#### Description\n\nThis endpoint allows the user to make a POST request to retrieve product information.\n\n#### Response\n\nThe response for this request is in the form of a JSON schema:\n\n``` json\n{\n  \"data\": {\n    \"products\": [\n      {\n        \"id\": \"\",\n        \"sku\": \"\",\n        \"name\": \"\",\n        \"description\": \"\",\n        \"shortDescription\": \"\",\n        \"addToCartAllowed\": true,\n        \"url\": \"\",\n        \"images\": [],\n        \"attributes\": [\n          {\n            \"name\": \"\",\n            \"label\": \"\",\n            \"value\": \"\",\n            \"roles\": [\"\"]\n          }\n        ],\n        \"inputOptions\": [],\n        \"price\": null,\n        \"links\": []\n      }\n    ]\n  },\n  \"errors\": [\n    {\n      \"message\": \"\",\n      \"locations\": [\n        {\n          \"line\": 0,\n          \"column\": 0\n        }\n      ],\n      \"path\": [\"\"],\n      \"extensions\": {\n        \"classification\": \"\",\n        \"service\": \"\"\n      }\n    }\n  ]\n}\n\n ```\n\nThis JSON schema represents the structure of the response data, including product details and error information."
					},
					"response": [
						{
							"name": "Store front (PDP)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "AC-Channel-ID",
										"value": "96b7e5ab-88e3-4431-9320-419b23dfed5b",
										"type": "text"
									},
									{
										"key": "AC-Environment-ID",
										"value": "EfvDrU6urKCXXAKFyr8s7i",
										"type": "text"
									},
									{
										"key": "AC-Scope-Locale",
										"value": "de_ch",
										"type": "text"
									},
									{
										"key": "X-Api-Key",
										"value": "af088f803f4849dc9a4891c316add79b",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    products(skus: [\"414193\"]) {\n        id\n        sku\n        name\n        description\n        shortDescription\n        addToCartAllowed\n        url\n        images(roles: []) {\n            url\n            label\n            roles\n        }\n        attributes(roles: []) {\n            name\n            label\n            value\n            roles\n        }\n        inputOptions {\n            id\n            title\n            required\n            type\n            markupAmount\n            suffix\n            sortOrder\n            range {\n                from\n                to\n            }\n            imageSize {\n                width\n                height\n            }\n            fileExtensions\n        }\n        ... on SimpleProductView {\n            price {\n                final {\n                    amount {\n                        value\n                        currency\n                    }\n                }\n                regular {\n                    amount {\n                        value\n                        currency\n                    }\n                }\n                roles\n            }\n        }\n        links {\n            product {\n                sku\n\n            }\n            linkTypes\n        }\n    }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "https://na1-sandbox.api.commerce.adobe.com/EfvDrU6urKCXXAKFyr8s7i/graphql",
									"protocol": "https",
									"host": [
										"na1-sandbox",
										"api",
										"commerce",
										"adobe",
										"com"
									],
									"path": [
										"EfvDrU6urKCXXAKFyr8s7i",
										"graphql"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 15 May 2025 07:19:12 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "vary",
									"value": "accept-encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "cf-cache-status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "9400dd9f4c147f82-IAD"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": {\n        \"products\": [\n            {\n                \"id\": \"NDE0MTkzAGRlX2NoAEVmdkRyVTZ1cktDWFhBS0Z5cjhzN2kAU1RPUkVfQ09ERQBXRUJTSVRFX0NPREU\",\n                \"sku\": \"414193\",\n                \"name\": \"Fluke calibration 8808A, Tisch Digital Multimeter 750V ac / 10A ac, 100MΩ\",\n                \"description\": \"[{\\\"name\\\":null,\\\"type\\\":\\\"Heading\\\",\\\"value\\\":[\\\"Fluke 8808A Multimeter , 5.5 digit\\\"]},{\\\"name\\\":null,\\\"type\\\":\\\"Paragraph\\\",\\\"value\\\":[\\\"The Fluke 8808A delivers a wide variety of measurement functions, including volts, ohms, and amps, plus frequency - with a basic V dc accuracy of 0.015 %\\\"]},{\\\"name\\\":null,\\\"type\\\":\\\"List\\\",\\\"value\\\":[\\\"Six dedicated instrument setup keys to instantly select saved test configurations. Ideal for making routine measurements.<BR\\\\/>Large and clear Pass and Fail indication based on user defined limits<BR\\\\/>Extreme ease of use through soft key menu access, ideal for unskilled operators<BR\\\\/>5.5 digit resolution with 0.015% basic dc V accuracy,<BR\\\\/>Dual display to measure different signal characteristics such as Volts and Current simultaneously<BR\\\\/>Dedicated current ranges to measure dc leakage current (i-Leakage mode)<BR\\\\/>Math Functions: dBm, dB, Min, Max<BR\\\\/>Patented split terminal jacks for 2x4 Ohms function for precise 4-wire low ohms measurements.<BR\\\\/>RS-232 Interface <BR\\\\/>Programming Languages\\\\/Modes: Simplified ASCI, Fluke 45<BR\\\\/>Safety Rating EN61010-1 CAT I 1000 V, CAT II 600 V\\\"]}]\",\n                \"shortDescription\": \"Fluke 8808A multimeter 5.5 digit, 240V\",\n                \"addToCartAllowed\": true,\n                \"url\": \"\",\n                \"images\": [],\n                \"attributes\": [\n                    {\n                        \"name\": \"base_image\",\n                        \"label\": \"Base image\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_manufacturer\",\n                        \"label\": \"RS Manufacturer\",\n                        \"value\": \"Fluke\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_weight\",\n                        \"label\": \"RS WEIGHT\",\n                        \"value\": \"4.280 KGM\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_distrelec_sku\",\n                        \"label\": \"RS distrelec sku\",\n                        \"value\": \"17610300\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_article_slug\",\n                        \"label\": \"RS article slug\",\n                        \"value\": \"/multimeters/0414193\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_article_type\",\n                        \"label\": \"RS article type\",\n                        \"value\": \"STANDARD_PACK\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_manufacturer_part_number_primary\",\n                        \"label\": \"RS manufacturer part number primary\",\n                        \"value\": \"Fluke 8808A\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_manufacturer_part_number_alternative\",\n                        \"label\": \"RS manufacturer part number alternative\",\n                        \"value\": \"Fluke 8808A\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_manufacturer_part_number_commercially_sensitive\",\n                        \"label\": \"RS manufacturer part number commercially sensitive\",\n                        \"value\": \"N\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_packaging_pack_size\",\n                        \"label\": \"RS packaging pack size\",\n                        \"value\": \"1\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_packaging_sales_unit_of_measure\",\n                        \"label\": \"RS packaging sales unit of measure\",\n                        \"value\": \"EA\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_search\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_packaging_base_unit_of_measure\",\n                        \"label\": \"RS packaging base unit of measure\",\n                        \"value\": \"EA\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_calibration_is_calibrated\",\n                        \"label\": \"RS calibration is calibrated\",\n                        \"value\": \"N\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_calibration_calibration_type\",\n                        \"label\": \"RS calibration calibration type\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_length\",\n                        \"label\": \"RS length\",\n                        \"value\": \"460.000 MMT\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_width\",\n                        \"label\": \"RS width\",\n                        \"value\": \"405.000 MMT\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_search\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_height\",\n                        \"label\": \"RS height\",\n                        \"value\": \"220.000 MMT\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_comp_contains_hazardous_sustance\",\n                        \"label\": \"RS comp contains hazardous sustance\",\n                        \"value\": \"N\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_comp_rohs_status\",\n                        \"label\": \"RS comp rohs status\",\n                        \"value\": \"E\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_comp_energy_regulation_uk_status\",\n                        \"label\": \"RS comp energy regulation uk status\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_comp_energy_regulation_uk_rating\",\n                        \"label\": \"RS comp energy regulation uk rating\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_comp_energy_regulation_eu_staus\",\n                        \"label\": \"RS comp energy regulation eu staus\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_comp_energy_regulation_eu_rating\",\n                        \"label\": \"RS comp energy regulation eu rating\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_brand_name\",\n                        \"label\": \"RS brand name\",\n                        \"value\": \"Fluke calibration\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_brand_image\",\n                        \"label\": \"RS brand image\",\n                        \"value\": \"M4047-01\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_brand_slug\",\n                        \"label\": \"RS brand slug\",\n                        \"value\": \"TODO create SEO friendly brand slug\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_assets_images_is_indicative\",\n                        \"label\": \"RS assets images is indicative\",\n                        \"value\": \"Y\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_assets_images_photograph\",\n                        \"label\": \"RS assets images photograph\",\n                        \"value\": \"R0414193-02\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_assets_images_line_drawing\",\n                        \"label\": \"RS assets images line drawing\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_assets_images_animated\",\n                        \"label\": \"RS assets images animated\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_assets_images_eu_energy_rating\",\n                        \"label\": \"RS assets images eu energy rating\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_assets_images_uk_energy_rating\",\n                        \"label\": \"RS assets images uk energy rating\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_assets_videos_youtube\",\n                        \"label\": \"RS assets videos youtube\",\n                        \"value\": \"wySDB3LtUBY\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_assets_3d_images_trace_image_id\",\n                        \"label\": \"RS assets 3d images trace image id\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"manufacturer\",\n                        \"label\": \"Manufacturer\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"cost\",\n                        \"label\": \"Cost\",\n                        \"value\": \"\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_plp\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_specification_attributes\",\n                        \"label\": \"RS specification attributes\",\n                        \"value\": \"[{\\\"key\\\":\\\"Multimeter Type\\\",\\\"value\\\":\\\"Bench\\\"},{\\\"key\\\":\\\"Model Number p\\\",\\\"value\\\":\\\"8808A\\\"},{\\\"key\\\":\\\"Display Type\\\",\\\"value\\\":\\\"Digital\\\"},{\\\"key\\\":\\\"Functions Measured\\\",\\\"value\\\":\\\"AC Current, AC Voltage, Continuity, DC Current, DC Voltage, Diode, Frequency, Resistance\\\"},{\\\"key\\\":\\\"Absolute Maximum AC Voltage Measurement\\\",\\\"value\\\":\\\"750V ac\\\"},{\\\"key\\\":\\\"Absolute Maximum DC Current Measurement\\\",\\\"value\\\":\\\"10A dc\\\"},{\\\"key\\\":\\\"Absolute Maximum Resistance Measurement\\\",\\\"value\\\":\\\"100M?\\\"},{\\\"key\\\":\\\"Absolute Maximum DC Voltage Measurement\\\",\\\"value\\\":\\\"1000V dc\\\"},{\\\"key\\\":\\\"Absolute Maximum AC Current Measurement\\\",\\\"value\\\":\\\"10A ac\\\"},{\\\"key\\\":\\\"True RMS\\\",\\\"value\\\":\\\"Yes\\\"},{\\\"key\\\":\\\"Maximum Frequency\\\",\\\"value\\\":\\\"100kHz\\\"},{\\\"key\\\":\\\"AC Current Measurement Resolution\\\",\\\"value\\\":\\\"0.1\\\\u00b5A ac\\\"},{\\\"key\\\":\\\"DC Current Measurement Resolution\\\",\\\"value\\\":\\\"0.001\\\\u00b5A dc\\\"},{\\\"key\\\":\\\"DC Voltage Measurement Resolution\\\",\\\"value\\\":\\\"1\\\\u00b5V dc\\\"},{\\\"key\\\":\\\"Resistance Measurement Resolution\\\",\\\"value\\\":\\\"1m?\\\"},{\\\"key\\\":\\\"AC Voltage Measurement Resolution\\\",\\\"value\\\":\\\"1\\\\u00b5V ac\\\"},{\\\"key\\\":\\\"Width\\\",\\\"value\\\":\\\"217mm\\\"},{\\\"key\\\":\\\"Best AC Current Accuracy\\\",\\\"value\\\":\\\"\\\\u00b10.5% + 0.12\\\"},{\\\"key\\\":\\\"Maximum Operating Temperature\\\",\\\"value\\\":\\\"+50\\\\u00b0C\\\"},{\\\"key\\\":\\\"Best DC Voltage Accuracy\\\",\\\"value\\\":\\\"\\\\u00b10.015% + 0.003\\\"},{\\\"key\\\":\\\"Length\\\",\\\"value\\\":\\\"297mm\\\"},{\\\"key\\\":\\\"Best Resistance Measurement Accuracy\\\",\\\"value\\\":\\\"\\\\u00b11.75% + 0.004\\\"},{\\\"key\\\":\\\"Best DC Current Accuracy\\\",\\\"value\\\":\\\"\\\\u00b10.2% + 0.01\\\"},{\\\"key\\\":\\\"Weight\\\",\\\"value\\\":\\\"2.1kg\\\"},{\\\"key\\\":\\\"Height\\\",\\\"value\\\":\\\"88mm\\\"},{\\\"key\\\":\\\"Minimum Operating Temperature\\\",\\\"value\\\":\\\"0\\\\u00b0C\\\"},{\\\"key\\\":\\\"Best AC Voltage Accuracy\\\",\\\"value\\\":\\\"\\\\u00b10.9% + 0.05 Digits\\\"},{\\\"key\\\":\\\"Dimensions\\\",\\\"value\\\":\\\"297 x 217 x 88mm\\\"}]\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_search\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rs_tier_price\",\n                        \"label\": \"RS Tier Price\",\n                        \"value\": \"{\\\"ALL GROUPS\\\":[{\\\"qty\\\":\\\"5\\\",\\\"price\\\":\\\"10.000000\\\"}],\\\"Retailer\\\":[{\\\"qty\\\":\\\"10\\\",\\\"price\\\":\\\"8.000000\\\"}],\\\"Exempt\\\":[{\\\"qty\\\":\\\"15\\\",\\\"price\\\":\\\"5.000000\\\"}]}\",\n                        \"roles\": [\n                            \"visible_in_pdp\",\n                            \"visible_in_search\"\n                        ]\n                    }\n                ],\n                \"inputOptions\": [],\n                \"price\": null,\n                \"links\": []\n            }\n        ]\n    },\n    \"errors\": [\n        {\n            \"message\": \"Missing price information\",\n            \"locations\": [\n                {\n                    \"line\": 1,\n                    \"column\": 349\n                }\n            ],\n            \"path\": [\n                \"products\",\n                0,\n                \"price\"\n            ],\n            \"extensions\": {\n                \"classification\": \"DataFetchingException\",\n                \"service\": \"catalog\"\n            }\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "getRestrictionsbySKU",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**",
									" * ✅ Basic tests",
									" */",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"/**",
									" * ✅ Define schemas",
									" */",
									"const errorsSchema = {",
									"    type: \"array\",",
									"    items: {",
									"        type: \"object\",",
									"        required: [\"message\"],",
									"        properties: {",
									"            message: { type: \"string\", minLength: 1 }",
									"        },",
									"        additionalProperties: false",
									"    }",
									"};",
									"",
									"const detailsSchema = {",
									"    type: \"object\",",
									"    required: [\"message\", \"rule_type\"],",
									"    properties: {",
									"        message: { type: \"string\" },",
									"        rule_type: { type: \"string\" }",
									"    },",
									"    additionalProperties: false",
									"};",
									"",
									"const attributesSchema = {",
									"    type: \"array\",",
									"    items: {",
									"        type: \"object\",",
									"        required: [\"name\", \"label\", \"value\"],",
									"        properties: {",
									"            name: { type: \"string\", minLength: 1 },",
									"            label: { type: \"string\", minLength: 1 },",
									"            value: {}",
									"        },",
									"        additionalProperties: false",
									"    }",
									"};",
									"",
									"const restrictionsSchema = {",
									"    type: [\"object\", \"null\"],",
									"    required: [\"sku\", \"restricted\", \"details\"],",
									"    properties: {",
									"        sku: { type: \"string\", minLength: 1 },",
									"        restricted: { type: \"boolean\" },",
									"        details: detailsSchema,",
									"        attributes: attributesSchema",
									"    },",
									"    additionalProperties: false",
									"};",
									"",
									"const responseSchema = {",
									"    type: \"object\",",
									"    properties: {",
									"        data: {",
									"            type: \"object\",",
									"            required: [\"getProductRestrictionsBySkus\"],",
									"            properties: {",
									"                getProductRestrictionsBySkus: restrictionsSchema",
									"            },",
									"            additionalProperties: false",
									"        },",
									"        errors: errorsSchema",
									"    },",
									"    additionalProperties: false",
									"};",
									"",
									"/**",
									" * ✅ Schema validation",
									" */",
									"pm.test(\"Validate full response against schema\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(tv4.validate(responseData, responseSchema), JSON.stringify(tv4.error, null, 2)).to.be.true;",
									"});",
									"",
									"/**",
									" * ✅ Business logic negative tests",
									" */",
									"pm.test(\"Business logic: restricted flag rules\", function () {",
									"    const responseData = pm.response.json();",
									"    const restrictions = responseData?.data?.getProductRestrictionsBySkus;",
									"",
									"    if (restrictions && restrictions !== null) {",
									"        const details = restrictions.details;",
									"",
									"        if (restrictions.restricted === true) {",
									"            pm.expect(details.message, \"Message should not be empty if restricted\").to.have.lengthOf.at.least(1);",
									"            pm.expect(details.rule_type, \"Rule type should not be empty if restricted\").to.have.lengthOf.at.least(1);",
									"        }",
									"",
									"        if (restrictions.restricted === false) {",
									"            pm.expect(details.message, \"Message should be empty if not restricted\").to.equal(\"\");",
									"            pm.expect(details.rule_type, \"Rule type should be empty if not restricted\").to.equal(\"\");",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * ✅ Optional errors check",
									" */",
									"pm.test(\"Errors array validation if present\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    if (responseData.hasOwnProperty(\"errors\")) {",
									"        pm.expect(tv4.validate(responseData.errors, errorsSchema), JSON.stringify(tv4.error, null, 2)).to.be.true;",
									"    } else {",
									"        console.log(\"No errors array found in response.\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetProductRestrictionsBySkus {\n  getProductRestrictionsBySkus(\n    input: {\n        sku: \"SKU99\",\n    }){\n        sku\n        restricted\n        details{\n            message\n            rule_type\n        }\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCompany details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"// ✅ Status code",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// ✅ Response structure: must have \"data\" always, \"errors\" optional",
									"pm.test(\"Response has required top-level field: data\", function () {",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('data');",
									"});",
									"",
									"// ✅ Errors handling (only if present)",
									"if (responseData.errors) {",
									"    pm.test(\"Errors array must be valid if present\", function () {",
									"        pm.expect(responseData.errors).to.be.an('array').that.is.not.empty;",
									"    });",
									"",
									"    pm.test(\"Each error must contain a non-empty message\", function () {",
									"        responseData.errors.forEach(error => {",
									"            pm.expect(error).to.have.property('message');",
									"            pm.expect(error.message).to.be.a('string').that.is.not.empty;",
									"        });",
									"    });",
									"",
									"    pm.test(\"Error extensions category must be string or null\", function () {",
									"        responseData.errors.forEach(error => {",
									"            if (error.extensions) {",
									"                pm.expect(error.extensions.category).to.satisfy(",
									"                    v => typeof v === 'string' || v === null,",
									"                    \"Category must be a valid string or null\"",
									"                );",
									"            }",
									"        });",
									"    });",
									"}",
									"",
									"// ✅ Company object validations",
									"if (responseData.data && responseData.data.company) {",
									"    const company = responseData.data.company;",
									"",
									"    pm.test(\"Company must have required fields\", function () {",
									"        pm.expect(company).to.include.keys(",
									"            \"rs_restriction_type\",",
									"            \"rs_restrictions_apply\",",
									"            \"company_admin\",",
									"            \"email\",",
									"            \"id\",",
									"            \"legal_address\",",
									"            \"legal_name\",",
									"            \"name\"",
									"        );",
									"    });",
									"",
									"    pm.test(\"Company ID should be base64-like string\", function () {",
									"        pm.expect(company.id).to.match(/^[A-Za-z0-9+/=]+$/, \"ID must be base64-like\");",
									"    });",
									"",
									"    pm.test(\"Company email must be valid\", function () {",
									"        pm.expect(company.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Invalid company email format\");",
									"    });",
									"",
									"    // ✅ Company admin",
									"    if (company.company_admin) {",
									"        pm.test(\"Company admin must have valid fields\", function () {",
									"            pm.expect(company.company_admin).to.include.keys(\"firstname\", \"lastname\", \"email\");",
									"            pm.expect(company.company_admin.firstname).to.be.a('string').that.is.not.empty;",
									"            pm.expect(company.company_admin.lastname).to.be.a('string').that.is.not.empty;",
									"            pm.expect(company.company_admin.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Invalid admin email\");",
									"        });",
									"    }",
									"",
									"    // ✅ Legal address",
									"    if (company.legal_address) {",
									"        const addr = company.legal_address;",
									"        pm.test(\"Legal address must have required fields\", function () {",
									"            pm.expect(addr).to.include.keys(\"street\", \"city\", \"region\", \"postcode\", \"country_code\", \"telephone\");",
									"        });",
									"",
									"      ",
									"",
									"        pm.test(\"Postcode must be non-empty string or number-like\", function () {",
									"            pm.expect(addr.postcode).to.match(/^[A-Za-z0-9\\s\\-]+$/, \"Invalid postcode format\");",
									"        });",
									"",
									"        pm.test(\"Country code must be 2 uppercase letters\", function () {",
									"            pm.expect(addr.country_code).to.match(/^[A-Z]{2}$/, \"Invalid country code\");",
									"        });",
									"",
									"        if (addr.region) {",
									"            pm.test(\"Region must contain region_id and region_code\", function () {",
									"                pm.expect(addr.region).to.include.keys(\"region_id\", \"region_code\");",
									"                pm.expect(addr.region.region_id).to.be.a('number');",
									"                pm.expect(addr.region.region_code).to.be.a('string').that.is.not.empty;",
									"            });",
									"        }",
									"    }",
									"}",
									"",
									"// ✅ Negative schema-style validations (fields missing/invalid)",
									"pm.test(\"Negative: company must fail if required fields are missing\", function () {",
									"    if (responseData.data && responseData.data.company) {",
									"        const company = responseData.data.company;",
									"        [\"id\", \"email\", \"name\"].forEach(field => {",
									"            pm.expect(company, `${field} should exist`).to.have.property(field);",
									"        });",
									"    }",
									"});",
									"",
									"pm.test(\"Negative: invalid email should fail regex\", function () {",
									"    const invalids = [\"abc@\", \"test@.com\", \"123@456\", \"bad email\"];",
									"    invalids.forEach(email => {",
									"        pm.expect(email).to.not.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, `Invalid email passed regex: ${email}`);",
									"    });",
									"});",
									"// --- Telephone validation (conditional) ---",
									"pm.test(\"Telephone must be valid in either E.164 or local format\", function () {",
									"    const e164Regex = /^\\+[1-9]\\d{7,14}$/;",
									"    const localRegex = /^\\+?[0-9][0-9\\s\\-()]*$/;",
									"    const tel = responseData.data?.company?.legal_address?.telephone;",
									"",
									"    if (tel) {",
									"        if (tel.startsWith(\"+\")) {",
									"            pm.expect(tel).to.match(e164Regex, \"Telephone is not valid E.164 format\");",
									"        } else {",
									"            pm.expect(tel).to.match(localRegex, \"Telephone is not valid local format\");",
									"        }",
									"    }",
									"});",
									"",
									"// --- Negative E.164 tests ---",
									"pm.test(\"Negative: invalid E.164 numbers should fail\", function () {",
									"    const e164Regex = /^\\+[1-9]\\d{7,14}$/;",
									"    const invalids = [",
									"        \"14155552671\",  // missing +",
									"        \"+123\",         // too short",
									"        \"+\",            // empty after +",
									"        \"+abcd123\",     // contains letters",
									"        \"+00000000\",    // leading zero after +",
									"        \"+1 (555) 123\", // has spaces/parentheses → not strict E.164",
									"    ];",
									"    invalids.forEach(phone => {",
									"        pm.expect(phone).to.not.match(e164Regex, `Invalid phone passed E.164 regex: ${phone}`);",
									"    });",
									"});",
									"",
									"// --- Negative local format tests ---",
									"pm.test(\"Negative: invalid local numbers should fail\", function () {",
									"    const localRegex = /^\\+?[0-9][0-9\\s\\-()]*$/;",
									"    const invalids = [",
									"        \"()\",           // only parentheses",
									"        \"+++++\",        // only plus signs",
									"        \"123-abc\",      // contains letters",
									"        \"(---)\",        // meaningless brackets",
									"        \"+\",            // lone plus",
									"        \" \",            // empty space",
									"        \"555-TEST\",     // alphanumeric local number",
									"        \"12#34\",        // special char not allowed",
									"    ];",
									"    invalids.forEach(phone => {",
									"        pm.expect(phone).to.not.match(localRegex, `Invalid phone passed local regex: ${phone}`);",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query{\n  company{\n    rs_restriction_type\n    rs_restrictions_apply\n    company_admin {\n      firstname\n      lastname\n      email\n    }\n    email\n    id\n    legal_address {\n      street\n       city\n      region {\n        region_id\n        region_code\n      }\n      postcode\n      country_code\n      telephone\n    }\n    legal_name\n    name\n  }\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "storePickupLocations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"const responseData = pm.response.json();",
									"",
									"pm.test(\"Response structure should include pickupLocations\", function () {",
									"    pm.expect(responseData).to.have.nested.property('data.pickupLocations');",
									"    pm.expect(responseData.data.pickupLocations).to.be.an('object');",
									"});",
									"",
									"// Helper: clean invisible characters",
									"function normalizePhoneFax(val) {",
									"    if (!val) return val;",
									"    return val.replace(/[\\u200B-\\u200D\\uFEFF]/g, '').trim(); // remove zero-width spaces",
									"}",
									"",
									"// Relaxed regex for international numbers (allow +, spaces, dashes, parentheses)",
									"const phoneFaxRegex = /^\\+?\\d{1,4}(?:[\\s\\-()]?\\d+)+$/;",
									"",
									"pm.test(\"Validate structure of pickupLocations\", function () {",
									"    const pickupLocations = responseData.data.pickupLocations;",
									"",
									"    pm.expect(pickupLocations).to.have.property('items').that.is.an('array');",
									"    pickupLocations.items.forEach(item => {",
									"        pm.expect(item).to.have.property('pickup_location_code').that.is.a('string').and.not.empty;",
									"        pm.expect(item).to.have.property('name').that.is.a('string').and.not.empty;",
									"",
									"        if (item.email !== null) {",
									"            pm.expect(item.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, `Invalid email: ${item.email}`);",
									"        }",
									"",
									"        // Phone validation with normalization",
									"        if (item.phone !== null) {",
									"            const cleanPhone = normalizePhoneFax(item.phone);",
									"            pm.expect(cleanPhone).to.match(phoneFaxRegex, `Invalid phone format: ${item.phone}`);",
									"        }",
									"",
									"        // Fax validation with normalization",
									"        if (item.fax !== null) {",
									"            const cleanFax = normalizePhoneFax(item.fax);",
									"            pm.expect(cleanFax).to.match(phoneFaxRegex, `Invalid fax format: ${item.fax}`);",
									"        }",
									"",
									"        if (item.postcode !== null) {",
									"            pm.expect(item.postcode).to.match(/^[A-Za-z0-9\\s-]{3,10}$/, `Invalid postcode: ${item.postcode}`);",
									"        }",
									"",
									"        if (item.opening_times !== null) {",
									"            let times;",
									"            try {",
									"                times = JSON.parse(item.opening_times);",
									"                pm.expect(times).to.be.an('array');",
									"                times.forEach(t => {",
									"                    pm.expect(t).to.have.property('day').that.is.a('string');",
									"                    pm.expect(t).to.have.property('open').that.is.a('boolean');",
									"                    if (t.start && t.end) {",
									"                        pm.expect(t.start).to.match(/^\\d{2}:\\d{2}$/, `Invalid start time: ${t.start}`);",
									"                        pm.expect(t.end).to.match(/^\\d{2}:\\d{2}$/, `Invalid end time: ${t.end}`);",
									"                    }",
									"                });",
									"            } catch (e) {",
									"                throw new Error(`Invalid opening_times JSON: ${item.opening_times}`);",
									"            }",
									"        }",
									"    });",
									"});",
									"",
									"// Negative test injections for robustness",
									"pm.test(\"Reject clearly invalid phone/fax formats\", function () {",
									"    const invalidSamples = [\"123-abc\", \"++++++\", \"phone123\", \"123_456\", \" \"];",
									"    invalidSamples.forEach(sample => {",
									"        const cleanSample = normalizePhoneFax(sample);",
									"        pm.expect(phoneFaxRegex.test(cleanSample)).to.eql(false, `Invalid format passed unexpectedly: ${sample}`);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Insomnia/2023.5.7-adobe"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  pickupLocations(\n    pageSize: 20\n    currentPage: 1\n    sort: {distance: ASC}\n  ) {\n    items {\n      pickup_location_code\n      name\n      email\n      fax\n      description\n      latitude\n      longitude\n      country_id\n      region_id\n      region\n      city\n      street\n      postcode\n      phone\n      opening_times\n    },\n    total_count\n    page_info {\n      page_size\n      current_page\n      total_pages\n    }\n  }\n}\n",
								"variables": "{\n    \"cartId\": \"{{cartId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "store config details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ✅ Status check\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"// ✅ Existence checks\r",
									"pm.test(\"Response contains 'data' and 'storeConfig' fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('data').that.is.an('object');\r",
									"    pm.expect(responseData.data).to.have.property('storeConfig').that.is.an('object');\r",
									"});\r",
									"\r",
									"// ✅ Schema-style validation\r",
									"pm.test(\"StoreConfig contains required non-null fields\", function () {\r",
									"    const storeConfig = pm.response.json().data.storeConfig;\r",
									"\r",
									"    const requiredNonNullFields = [\r",
									"        \"autocomplete_on_storefront\",\r",
									"        \"base_currency_code\",\r",
									"        \"base_url\",\r",
									"        \"base_media_url\",\r",
									"        \"base_static_url\",\r",
									"        \"secure_base_url\",\r",
									"        \"store_code\",\r",
									"        \"store_group_code\",\r",
									"        \"website_code\",\r",
									"        \"website_name\",\r",
									"        \"locale\",\r",
									"        \"timezone\",\r",
									"        \"is_default_store\"\r",
									"    ];\r",
									"\r",
									"    requiredNonNullFields.forEach(field => {\r",
									"        pm.expect(storeConfig, `StoreConfig is missing required field: ${field}`).to.have.property(field);\r",
									"        pm.expect(storeConfig[field], `Field ${field} should not be null`).to.not.be.null;\r",
									"    });\r",
									"});\r",
									"\r",
									"// ✅ Regex validations\r",
									"pm.test(\"Validate URL formats\", function () {\r",
									"    const storeConfig = pm.response.json().data.storeConfig;\r",
									"    const urlFields = [\"base_url\", \"base_media_url\", \"base_static_url\", \"secure_base_url\"];\r",
									"\r",
									"    const urlRegex = /^https?:\\/\\/[^\\s/$.?#].[^\\s]*$/;\r",
									"\r",
									"    urlFields.forEach(field => {\r",
									"        pm.expect(storeConfig[field], `${field} should be a valid URL`).to.match(urlRegex);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Validate currency and locale formats\", function () {\r",
									"    const storeConfig = pm.response.json().data.storeConfig;\r",
									"\r",
									"    const currencyRegex = /^[A-Z]{3}$/; // e.g. CHF, USD, EUR\r",
									"    const localeRegex = /^[a-z]{2}_[A-Z]{2}$/; // e.g. en_GB\r",
									"\r",
									"    pm.expect(storeConfig.base_currency_code, \"Invalid currency format\").to.match(currencyRegex);\r",
									"    pm.expect(storeConfig.locale, \"Invalid locale format\").to.match(localeRegex);\r",
									"});\r",
									"\r",
									"// ✅ Business rule validations\r",
									"pm.test(\"Shopping cart fields are correctly configured\", function () {\r",
									"    const storeConfig = pm.response.json().data.storeConfig;\r",
									"    pm.expect(storeConfig.shopping_cart_display_price).to.be.a('number');\r",
									"    pm.expect(storeConfig.shopping_cart_display_shipping).to.be.a('number');\r",
									"    pm.expect(storeConfig.shopping_cart_display_subtotal).to.be.a('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Order cancellation reasons are valid\", function () {\r",
									"    const cancellationReasons = pm.response.json().data.storeConfig.order_cancellation_reasons;\r",
									"    pm.expect(cancellationReasons).to.be.an('array').that.is.not.empty;\r",
									"    cancellationReasons.forEach(reason => {\r",
									"        pm.expect(reason).to.have.property(\"description\").that.is.a(\"string\").and.not.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"// ✅ Negative tests for schema violations\r",
									"pm.test(\"Negative: Missing required field should fail\", function () {\r",
									"    const storeConfig = pm.response.json().data.storeConfig;\r",
									"    if (!storeConfig.hasOwnProperty(\"base_currency_code\")) {\r",
									"        pm.expect.fail(\"Negative test: base_currency_code is missing!\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Negative: Empty string values should fail\", function () {\r",
									"    const storeConfig = pm.response.json().data.storeConfig;\r",
									"    [\"store_code\", \"website_name\"].forEach(field => {\r",
									"        if (storeConfig[field] === \"\") {\r",
									"            pm.expect.fail(`Negative test: ${field} is empty string!`);\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Negative: Invalid regex values should fail\", function () {\r",
									"    const storeConfig = pm.response.json().data.storeConfig;\r",
									"    const badCurrencyRegex = /[^A-Z]/;\r",
									"    if (badCurrencyRegex.test(storeConfig.base_currency_code)) {\r",
									"        pm.expect.fail(`Negative test: Invalid currency code: ${storeConfig.base_currency_code}`);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "store",
								"value": "{{store}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{customerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query StoreConfig {\n    storeConfig {\n    absolute_footer\n    autocomplete_on_storefront\n    base_currency_code\n    base_link_url\n    base_media_url\n    base_static_url\n    base_url\n    cart_expires_in_days\n    cart_summary_display_quantity\n    catalog_default_sort_by\n    category_fixed_product_tax_display_setting\n    category_url_suffix\n    ccdm_price_book_id\n    ccdm_service_endpoint\n    ccdm_source_locale\n    check_money_order_enable_for_specific_countries\n    check_money_order_enabled\n    check_money_order_make_check_payable_to\n    check_money_order_max_order_total\n    check_money_order_min_order_total\n    check_money_order_new_order_status\n    check_money_order_payment_from_specific_countries\n    check_money_order_send_check_to\n    check_money_order_sort_order\n    check_money_order_title\n    cms_home_page\n    cms_no_cookies\n    cms_no_route\n    code    \n    configurable_thumbnail_source\n    copyright\n    countries_with_required_region\n    create_account_confirmation\n    customer_access_token_lifetime\n    cybersource_3ds_card_types\n    cybersource_3ds_enabled\n  \n    default_country\n    default_description\n    default_display_currency_code\n    default_keywords\n    default_title\n    demonotice\n    display_state_if_optional\n    front\n    grid_per_page\n    grid_per_page_values\n    head_includes\n    head_shortcut_icon\n    header_logo_src\n    id\n    is_default_store\n    is_default_store_group\n    is_guest_checkout_enabled\n    is_negotiable_quote_active\n    is_one_page_checkout_enabled\n    is_requisition_list_active\n    list_mode\n    list_per_page\n    list_per_page_values\n    locale\n    logo_alt\n    logo_height\n    logo_width\n    magento_wishlist_general_is_enabled\n    max_items_in_order_summary\n    minicart_display\n    minicart_max_items\n    minimum_password_length\n    newsletter_enabled\n    no_route\n    optional_zip_countries\n    order_cancellation_enabled\n    order_cancellation_reasons {\n      description\n    }\n    payment_payflowpro_cc_vault_active\n    product_fixed_product_tax_display_setting\n    product_url_suffix\n    quickorder_active\n    required_character_classes_number\n    root_category_id\n    root_category_uid\n    sales_fixed_product_tax_display_setting\n    secure_base_link_url\n    secure_base_media_url\n    secure_base_static_url\n    secure_base_url\n    shopping_cart_display_full_summary\n    shopping_cart_display_grand_total\n    shopping_cart_display_price\n    shopping_cart_display_shipping\n    shopping_cart_display_subtotal\n    shopping_cart_display_tax_gift_wrapping\n    shopping_cart_display_zero_tax\n    show_cms_breadcrumbs\n    store_code\n    store_group_code\n    store_group_name\n    store_name\n    store_sort_order\n    timezone\n    title_prefix\n    title_separator\n    title_suffix\n    use_store_in_url\n    website_code\n    website_id\n    website_name\n    weight_unit\n    welcome\n    zero_subtotal_enable_for_specific_countries\n    zero_subtotal_enabled\n    zero_subtotal_new_order_status\n    zero_subtotal_payment_action\n    zero_subtotal_payment_from_specific_countries\n    zero_subtotal_sort_order\n    zero_subtotal_title\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}